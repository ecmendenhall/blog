<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lisp | Connor Mendenhall]]></title>
  <link href="http://ecmendenhall.github.io/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://ecmendenhall.github.io/blog/"/>
  <updated>2013-06-24T13:52:24-05:00</updated>
  <id>http://ecmendenhall.github.io/blog/</id>
  <author>
    <name><![CDATA[Connor Mendenhall]]></name>
    <email><![CDATA[ecmendenhall@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Breadth-first numbering: A solution]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-a-solution/"/>
    <updated>2013-06-24T12:00:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-a-solution</id>
    <content type="html"><![CDATA[<p>Now that we've built an <a href="blog/2013/06/24/breadth-first-numbering-a-lazy-functional-queue/">efficient functional
queue</a>,
we can finally put it to work in a breadth-first numbering solution.</p>

<p>First, let's define a few trees up front for testing. The first is the
example given in the introduction of <a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">the
paper</a>.
The other two are a little trickier, and the twelve-node tree is not binary.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">example-tree</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>                            <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                 <span class="s">&quot;leaf&quot;</span><span class="p">))</span>
</span><span class='line'>                       <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                        <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">five-nodes</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>                               <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="s">&quot;E&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                               <span class="s">&quot;leaf&quot;</span><span class="p">))</span>
</span><span class='line'>                     <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                          <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">twelve-nodes</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>                       <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                            <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="p">(</span><span class="s">&quot;F&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                      <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">(</span><span class="s">&quot;G&quot;</span> <span class="p">(</span><span class="s">&quot;I&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                           <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                      <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">(</span><span class="s">&quot;H&quot;</span> <span class="p">(</span><span class="s">&quot;J&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                           <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                           <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                      <span class="p">(</span><span class="s">&quot;K&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                      <span class="p">(</span><span class="s">&quot;L&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'>                            <span class="p">(</span><span class="s">&quot;E&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To calculate the visit order, we can perform a simple <a href="https://en.wikipedia.org/wiki/Breadth-first_search">breadth-first
traversal</a> of the
tree. Now that we have a queue, the solution is pretty close to the pseudocode: Start with the
root node in the queue, and assign it a number. Then recur with three
new parameters: A queue with this node's children inserted, a list
with this node's number consed on, and an incremented node number.
When the queue is empty, we're done:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">visit-order</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tree</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">bfs-iter</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span> <span class="nv">visited</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">))</span> <span class="nv">visited</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">node</span>  <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">new-q</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">)))))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">equal? </span><span class="s">&quot;leaf&quot;</span> <span class="nv">node</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">bfs-iter</span> <span class="nv">new-q</span> <span class="nv">visited</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">bfs-iter</span> <span class="p">(</span><span class="nf">ins-items</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">node</span><span class="p">)</span> <span class="nv">new-q</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">node</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">visited</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">n</span><span class="p">)))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">bfs-iter</span> <span class="p">(</span><span class="nf">ins</span> <span class="nv">tree</span> <span class="nv">empty-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()</span> <span class="mi">1</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span>  <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">example-tree</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;C&quot;</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;B&quot;</span><span class="o">.</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="o">.</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>          <span class="s">&quot;Visit-order searches a tree breadth-first and returns a</span>
</span><span class='line'><span class="s">          list of nodes and their numbers.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span>  <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">five-nodes</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;E&quot;</span> <span class="o">.</span> <span class="mi">5</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="o">.</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="o">.</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span>   <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">twelve-nodes</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>           <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;L&quot;</span> <span class="o">.</span> <span class="mi">12</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;K&quot;</span> <span class="o">.</span> <span class="mi">11</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;J&quot;</span> <span class="o">.</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;I&quot;</span> <span class="o">.</span> <span class="mi">9</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;H&quot;</span> <span class="o">.</span> <span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;G&quot;</span> <span class="o">.</span> <span class="mi">7</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;F&quot;</span> <span class="o">.</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="s">&quot;E&quot;</span> <span class="o">.</span> <span class="mi">5</span><span class="p">)</span>  <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span>  <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span>  <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="o">.</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="o">.</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>           <span class="s">&quot;Visit-order works on non-binary trees.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's possible to map a visit queue back to a binary tree (check out
 Michael's <a href="https://gist.github.com/MichaelBaker/5810053">concise Haskell
 solution</a>), but I
 wanted a solution that would work for all trees. In the end, I settled for performing a second <a href="https://en.wikipedia.org/wiki/Depth-first_search">depth-first
 traversal</a>
to label nodes. This <code>walk-map</code> function works like a recursive <code>map</code>,
 traversing a nested structure and applying a function to every
 element that's not a list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">walk-map</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">func</span> <span class="nv">items</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">apply-or-map</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">null? </span><span class="nv">item</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>          <span class="p">((</span><span class="nb">pair? </span><span class="nv">item</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">apply-or-map</span> <span class="nv">item</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">func</span> <span class="nv">item</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="nb">map </span><span class="nv">apply-or-map</span> <span class="nv">items</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span>  <span class="p">(</span><span class="nf">walk-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span> <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="s">&quot;one&quot;</span><span class="p">)</span> <span class="p">((</span><span class="nb">= </span><span class="nv">i</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot;two&quot;</span><span class="p">)</span> <span class="p">((</span><span class="nb">= </span><span class="nv">i</span> <span class="mi">3</span><span class="p">)</span> <span class="s">&quot;three&quot;</span><span class="p">)</span> <span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="p">(</span><span class="mi">3</span> <span class="p">(</span><span class="mi">1</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">3</span><span class="p">))))</span>
</span><span class='line'>          <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="p">(</span><span class="s">&quot;three&quot;</span> <span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="p">(</span><span class="s">&quot;two&quot;</span><span class="p">)</span><span class="s">&quot;two&quot;</span><span class="p">)</span> <span class="s">&quot;one&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here's a convenience function to store node order in a hash set:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">make-label-map</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">labels</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">label-map</span> <span class="p">(</span><span class="nf">make-hash</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="nv">add-labels</span>
</span><span class='line'>    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">labels</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">labels</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">label-map</span>
</span><span class='line'>          <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">node</span>   <span class="p">(</span><span class="nb">car </span> <span class="p">(</span><span class="nb">car </span><span class="nv">labels</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">number</span> <span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nb">car </span><span class="nv">labels</span><span class="p">))))</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">hash-set!</span> <span class="nv">label-map</span> <span class="nv">node</span> <span class="nv">number</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">add-labels</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">labels</span><span class="p">))))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">add-labels</span> <span class="nv">labels</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">label-map</span> <span class="p">(</span><span class="nf">make-label-map</span> <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">example-tree</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="s">&quot;A&quot;</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="s">&quot;B&quot;</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="s">&quot;C&quot;</span><span class="p">)</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="s">&quot;D&quot;</span><span class="p">)</span> <span class="mi">3</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And at long last, a solution for breadth-first numbering: calculate
node order, then map over the tree to apply the labels:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">number-tree</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tree</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">label-map</span> <span class="p">(</span><span class="nf">make-label-map</span> <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">tree</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">walk-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">node</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">equal? </span><span class="s">&quot;leaf&quot;</span> <span class="nv">node</span><span class="p">)</span>
</span><span class='line'>                               <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="nv">node</span><span class="p">)))</span>
</span><span class='line'>            <span class="nv">tree</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">number-tree</span> <span class="nv">example-tree</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="p">(</span><span class="mi">2</span> <span class="s">&quot;leaf&quot;</span> <span class="p">(</span><span class="mi">4</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">))</span> <span class="p">(</span><span class="mi">3</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">number-tree</span> <span class="nv">five-nodes</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="p">(</span><span class="mi">2</span> <span class="p">(</span><span class="mi">4</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)</span> <span class="p">(</span><span class="mi">5</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">))</span> <span class="p">(</span><span class="mi">3</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">number-tree</span> <span class="nv">twelve-nodes</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>                                       <span class="p">(</span><span class="mi">2</span> <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="mi">3</span>
</span><span class='line'>                                          <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                          <span class="p">(</span><span class="mi">4</span>
</span><span class='line'>                                            <span class="p">(</span><span class="mi">6</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                               <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                            <span class="p">(</span><span class="mi">7</span> <span class="p">(</span><span class="mi">9</span>     <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                                      <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                               <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                            <span class="p">(</span><span class="mi">8</span> <span class="p">(</span><span class="mi">10</span>    <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                                      <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                                      <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                               <span class="p">(</span><span class="mi">11</span>    <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                               <span class="p">(</span><span class="mi">12</span>    <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'>                                          <span class="p">(</span><span class="mi">5</span>   <span class="s">&quot;leaf&quot;</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On the plus side, this solution generalizes to non-binary trees, and
is built almost entirely out of Scheme primitives. It's not as concise
or efficient as I'd like, but I'm happy with my lazy lists and
functional queue, even if the implementation is a little long. You can
find an edited version of my solution
<a href="https://gist.github.com/ecmendenhall/5847792">here</a>, and all the code
from these posts as a Gist <a href="https://gist.github.com/ecmendenhall/5847793">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breadth-first numbering: A lazy functional queue]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-a-lazy-functional-queue/"/>
    <updated>2013-06-24T00:22:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-a-lazy-functional-queue</id>
    <content type="html"><![CDATA[<p>On the way to a <a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">breadth-first
numbering</a>
solution, I've built a simple functional queue and <a href="http://ecmendenhall.github.io/blog/2013/06/24/breadth-first-numbering-lazy-lists/">created lazy
lists</a>
from Scheme primitives (and a couple handy macros). In this post,
I'll bring the pieces together to create an improved queue. (And yes,
I promise I'll actually start numbering trees sometime soon).</p>

<p>Our simple queue consisted of two lists: one for the head of the
queue, and a reversed one for the tail:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">5</span> <span class="mi">4</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Our improved queue makes two changes: lazy lists and incremental
reversal. It will look like this:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="o">&#39;</span><span class="p">(((</span><span class="mi">1</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&amp;lt</span><span class="c1">;procedure:...me/bfs/queue.scm:106:6&gt;) . 3)</span>
</span><span class='line'>  <span class="p">((</span><span class="mi">5</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&amp;lt</span><span class="c1">;procedure:...me/bfs/queue.scm:106:6&gt;) . 2))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This looks a little complicated, but just like the simple queue, it's also a list of a head and
reversed tail, with each side storing the length of the associated
list. This equivalent is a little simpler:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="o">&#39;</span><span class="p">((</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">5</span> <span class="mi">4</span><span class="p">))</span> <span class="o">.</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To start implementing the improvements, we need to update the
selectors to get the lists and lengths from both sides:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">empty-q</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="o">&#39;</span><span class="p">()</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="o">&#39;</span><span class="p">()</span> <span class="mi">0</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">five-items</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span><span class="p">))</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))</span> <span class="mi">3</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">lhs-len</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">lhs-len</span> <span class="nv">five-items</span><span class="p">)</span> <span class="mi">2</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Our lazy queue stores the length of the lists on each side.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">rhs-len</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">rhs-len</span> <span class="nv">five-items</span><span class="p">)</span> <span class="mi">3</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Our lazy queue stores the length of the lists on each side.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">lhs-list</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">five-items</span><span class="p">))</span> <span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">rhs-list</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">five-items</span><span class="p">))</span> <span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can write an updated insert function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">ins</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">item</span> <span class="nv">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">lcons</span> <span class="nv">item</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nf">rhs-len</span> <span class="nv">queue</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">three-items</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>  <span class="p">(</span><span class="nf">six-items</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">6</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">5</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">))))))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">three-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">six-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                <span class="s">&quot;Ins adds elements to the right side.&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Remove is a little more complicated. In the simple queue, we simply
swapped and reversed the right side. We want our improved queue to
avoid reversing long right side lists. The solution is <em>incremental
reversal</em>: rebalance the queue every time an element is removed.</p>

<p>In <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.8825">Okasaki's implementation</a>,
this is done with functions called <code>make-queue</code> and <code>rotate</code>. Below
are my Scheme translations.</p>

<p><code>Rotate</code> reverses the right side list and concatenates it to the left.
 It's similar to the simple queue implementation, but it uses lazy
 list operators and it's designed to work incrementally:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rotate</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">left</span> <span class="nv">right</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">rotate-recur</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">left</span> <span class="nv">right</span> <span class="nv">accumulator</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">left</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">lcar</span> <span class="nv">right</span><span class="p">)</span> <span class="nv">accumulator</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">lcar</span> <span class="nv">left</span><span class="p">)</span> <span class="p">(</span><span class="nf">rotate-recur</span> <span class="p">(</span><span class="nf">lcdr</span> <span class="nv">left</span><span class="p">)</span>
</span><span class='line'>                                         <span class="p">(</span><span class="nf">lcdr</span> <span class="nv">right</span><span class="p">)</span>
</span><span class='line'>                                         <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">lcar</span> <span class="nv">right</span><span class="p">)</span> <span class="nv">accumulator</span><span class="p">))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">rotate-recur</span> <span class="nv">left</span> <span class="nv">right</span> <span class="o">&#39;</span><span class="p">())))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rotated</span> <span class="p">(</span><span class="nf">rotate</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">five-items</span><span class="p">)</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">five-items</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span> <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">5</span> <span class="nv">rotated</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                <span class="s">&quot;Rotate reverses the right side list and concatenates it to the left.&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Make-queue</code> implements the incremental reversal logic. Now, we no
longer wait until the head list is empty to swap and reverse. Instead,
we rotate the queue as soon as the tail list contains one more element
than the head. This keeps the queue balanced, and ensures that we
won't run into an expensive reversal:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">make-queue</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">left</span> <span class="nv">right</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">&amp;lt</span><span class="c1">;= (cdr right) (cdr left))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list </span><span class="nv">left</span> <span class="nv">right</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">rotate</span> <span class="p">(</span><span class="nb">car </span><span class="nv">left</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">car </span><span class="nv">right</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">left</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">right</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">cons </span><span class="o">&#39;</span><span class="p">()</span> <span class="mi">0</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rebalanced</span> <span class="p">(</span><span class="nf">make-queue</span> <span class="p">(</span><span class="nf">left-side</span> <span class="nv">five-items</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>                          <span class="p">(</span><span class="nf">right-side</span> <span class="nv">five-items</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span> <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">5</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">rebalanced</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">rebalanced</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>           <span class="s">&quot;Make-queue rebalances the queue when the right side is longer than the left.&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To maintain a balanced queue, we'll want to call <code>make-queue</code> on
insertion and removal. Here's an improved insert, and a new remove:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">ins</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">item</span> <span class="nv">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">make-queue</span> <span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">lcons</span> <span class="nv">item</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nf">rhs-len</span> <span class="nv">queue</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">three-items</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>  <span class="p">(</span><span class="nf">six-items</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">6</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">5</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">))))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">three-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">six-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">six-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>            <span class="s">&quot;Ins adds elements to the right side and </span>
</span><span class='line'><span class="s">             rebalances if it&#39;s longer than the left.&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">rem</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">queue</span><span class="p">))</span> <span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>    <span class="o">&#39;</span><span class="p">()</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">make-queue</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">lcdr</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>                                  <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">lhs-len</span> <span class="nv">queue</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">removed</span> <span class="p">(</span><span class="nf">rem</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">)))))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">removed</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">removed</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">removed</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>            <span class="s">&quot;Rem returns a pair: the element removed</span>
</span><span class='line'><span class="s">             from the queue and the new queue.&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, let's add a couple convenience functions to insert and remove
multiple items:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">ins-items</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">items</span> <span class="nv">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">items</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">queue</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">ins-items</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">)</span> <span class="p">(</span><span class="nf">ins</span> <span class="p">(</span><span class="nb">car </span><span class="nv">items</span><span class="p">)</span> <span class="nv">queue</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">seven-items</span> <span class="p">(</span><span class="nf">ins-items</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span><span class="p">)</span> <span class="nv">empty-q</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">7</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">seven-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>            <span class="s">&quot;Ins-items adds multiple items to the queue.&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">rem-n</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">rem-n-iter</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">queue</span> <span class="nv">items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">reverse </span><span class="nv">items</span><span class="p">)</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">rem-n-iter</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">car </span> <span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">))</span> <span class="nv">items</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">rem-n-iter</span> <span class="nv">n</span> <span class="nv">queue</span> <span class="o">&#39;</span><span class="p">())))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">remove-four</span> <span class="p">(</span><span class="nf">rem-n</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">ins-items</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span><span class="p">)</span> <span class="nv">empty-q</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">remove-four</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">lhs-len</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">remove-four</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>               <span class="p">(</span><span class="nf">rhs-len</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">remove-four</span><span class="p">)))</span> <span class="mi">3</span>
</span><span class='line'>            <span class="s">&quot;Rem-n returns a list of removed items and the new queue.&quot;</span><span class="p">))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next time, we'll finally bring everything together to solve the
breadth-first numbering problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breadth-first numbering: Lazy lists]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-lazy-lists/"/>
    <updated>2013-06-24T00:15:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-lazy-lists</id>
    <content type="html"><![CDATA[<p>In my <a href="http://ecmendenhall.github.io/blog/2013/06/24/breadth-first-numbering-functional-queues/">last
post</a>,
I wrote a simple functional queue as a stepping stone towards a
<a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">breadth-first-numbering</a>
solution. By using an ordered and reversed list to represent the front
and back of the queue, it's cheap and easy to enqueue and dequeue
items. A simple queue is fine for this toy example, but it's
inefficient, since it requires reversing the tail list whenever the
head list is empty. We can do better with two improvements: lazy lists
and incremental reversal.</p>

<p>Clojure's lazy seqs seemed powerful and mysterious until I read
through <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5">chapter
3</a>
of SICP. Building a lazy list is based on two simple operations,
<code>delay</code> and <code>force</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">delay</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">((</span><span class="k">delay </span><span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="nv">form</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">force</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">delayed</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">delayed</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">add-ones</span> <span class="p">(</span><span class="k">delay </span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-pred</span> <span class="nv">procedure?</span> <span class="nv">add-ones</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">force </span><span class="nv">add-ones</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Delay</code> wraps a form in an anonymous function of no arguments. It can
be stored and passed around like any other list, but won't perform the
computation "stored" inside until it's evaluated. <code>Force</code> is the
opposite of delay, forcing a delayed form to evaluate. From these two
basics, we can build a lazy versions of <code>cons</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">lcons</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">((</span><span class="nf">lcons</span> <span class="nv">item</span> <span class="nv">items</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">item</span> <span class="p">(</span><span class="k">delay </span><span class="nv">items</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Racket's macro system uses <a href="http://blog.racket-lang.org/2011/04/writing-syntax-case-macros.html">syntax-case
 macros</a>,
which are a little different from the comma-spliced <code>defmacro</code> beasts you know
 and love from Common Lisp and Clojure. In addition to enforcing <a href="https://en.wikipedia.org/wiki/Hygienic_macros">good
 hygiene</a>,
the syntax-case macro system works by pattern matching against syntax
 objects. In <code>lcons</code>, any form that matches the pattern <code>(lcons item
 items)</code> is mapped to <code>(cons item (delay items))</code>. In the <code>delay</code>
 macro above, anything matching <code>(delay form)</code> maps to <code>(lambda ()
 form)</code>. We're still defining the ways we want to
 change the syntax of our program, but the transformation is applied
 at a different level: to syntax objects instead of raw s-expressions.</p>

<p>With <code>lcons</code> finished, it's easy to create lazy lists:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">llist</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">items</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">items</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&#39;</span><span class="p">()</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">car </span><span class="nv">items</span><span class="p">)</span> <span class="p">(</span><span class="nf">llist</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">lazy</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-pred</span> <span class="nv">pair?</span> <span class="nv">lazy&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="s">&quot;A lazy list is a pair: the head of the list and a delayed</span>
</span><span class='line'><span class="s">        function.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lazy</span><span class="p">)</span> <span class="mi">1</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>           <span class="s">&quot;A lazy list stores its head as the first item of a</span>
</span><span class='line'><span class="s">           pair.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-pred</span> <span class="nv">procedure?</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lazy</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="s">&quot;A lazy list stores a delayed function as the second item</span>
</span><span class='line'><span class="s">        of a pair.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="p">((</span><span class="nb">cdr </span><span class="nv">lazy</span><span class="p">)))</span> <span class="mi">2</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>           <span class="s">&quot;Evaluating the delayed function returns the next item</span>
</span><span class='line'><span class="s">           in the list.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just as eager lists are composed of nested pairs, lazy lists are
composed of nested, <em>delayed</em> pairs:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">eager-list</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">2</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">3</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">4</span> <span class="o">&#39;</span><span class="p">())))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;blockquote&gt;&lt;p&gt;eager-list</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span><span class="nv">&lt;/p&gt;&lt;/blockquote&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">lazy-list</span> <span class="p">(</span><span class="nf">lcons</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">lcons</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">lcons</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">lcons</span> <span class="mi">4</span> <span class="o">&#39;</span><span class="p">())))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;blockquote&gt;&lt;p&gt;</span><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&amp;lt</span><span class="c1">;procedure:...me/bfs/queue.scm:106:6&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>Like a normal list, the <code>car</code> of each pair is the list item, and the
  <code>cdr</code> represents the rest of the list. But it doesn't return the
  next pair until it's evaluated:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;blockquote&gt;&lt;p&gt;</span><span class="p">(</span><span class="nb">car </span><span class="nv">lazy-list</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="nb">cdr </span><span class="nv">lazy-list</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;h1&gt;&amp;lt</span><span class="c1">;procedure:...queue.scm:106:6&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">((</span><span class="nb">cdr </span><span class="nv">lazy-list</span><span class="p">))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&amp;lt</span><span class="c1">;procedure:...queue.scm:106:6&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>With this behavior in mind, we can write lazy <code>car</code> and lazy <code>cdr</code>:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lcar</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">llist</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">car </span><span class="nv">llist</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">lcar</span> <span class="nv">lazy</span><span class="p">)</span> <span class="mi">1</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Lazy-car is just like regular car!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">lcdr</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">llist</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">force </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">llist</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">lcdr</span> <span class="nv">lazy</span><span class="p">))</span> <span class="mi">2</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Lazy-cdr forces evaluation of the next list element.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A <code>take-n</code> function is also handy for converting lazy lists back to
eager ones:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">take-n</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">lazy-list</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">n</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">lcar</span> <span class="nv">lazy-list</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">take-n</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">lcdr</span> <span class="nv">lazy-list</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Take-n returns the first n elements of a lazy list.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And that's it! We've written all the basics necessary for lazy lists.
(For a few more lazy-fied list operations, see <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5.1">section 3.5.1</a>
of SICP).</p>

<p>Finally, we should make one important optimization. Over the course of
list operations like <code>lcdr</code>, the same delayed form can be called many
times. If the delayed computation is simple, this won't be noticeably
inefficient. In our case, we're just storing values that are
immediately returned (integers in these examples, and eventually some
node representation in our numbering solution). But there's no
guarantee that delayed computations will be cheap! We could put
functions in a lazy list just as easily:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;blockquote&gt;&lt;p&gt;</span><span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&amp;lt</span><span class="c1">;procedure:...queue.scm:106:6&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>And those functions could require a lot of work:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;blockquote&gt;&lt;p&gt;</span><span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">read-book</span> <span class="s">&quot;Finnegans Wake&quot;</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">read-book</span> <span class="s">&quot;In Search of Lost Time&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">read-book</span> <span class="s">&quot;Gravity&#39;s Rainbow&quot;</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;riverrun, past Eve and Adam&#39;s...&quot;</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&amp;lt</span><span class="c1">;procedure:...read.scm:10:5&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>In practice, we should memoize lazy computations, so subsequent calls
look up their previously computed values. It's an easy fix:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">memoize</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">func</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">already-run?</span> <span class="no">#f</span><span class="p">)</span> <span class="p">(</span><span class="nf">result</span> <span class="no">#f</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="nv">already-run?</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">begin </span><span class="p">(</span><span class="k">set! </span><span class="nv">result</span> <span class="p">(</span><span class="nf">func</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="k">set! </span><span class="nv">already-run?</span> <span class="no">#t</span><span class="p">)</span>
</span><span class='line'>               <span class="nv">result</span><span class="p">)</span>
</span><span class='line'>         <span class="nv">result</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define-syntax </span><span class="nv">delay</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">((</span><span class="k">delay </span><span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nf">memoize</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="nv">form</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that we've written lazy lists, we can use them to build an
efficient functional queue for the breadth-first numbering problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breadth-first numbering: Functional queues]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-functional-queues/"/>
    <updated>2013-06-24T00:14:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-functional-queues</id>
    <content type="html"><![CDATA[<p>I spent some time this weekend (okay fine, most of Saturday and
Sunday afternoon) on an exercise <a href="https://twitter.com/Twernmilt">Michael
Baker</a> shared on our "geeks" mailing
list. The problem is a <a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">functional
pearl</a>
from Chris Okasaki: given a binary tree, reproduce a structurally
identical tree with its nodes numbered in breadth-first order.</p>

<p>For example, numbering this tree:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_       a&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>   / \
</span><span class='line'>  /   \
</span><span class='line'>b       d
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>   / \     / \
</span><span class='line'>  .   c   .   .&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> / \
</span><span class='line'>.   .
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
Should yield this tree:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_       1&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>   / \
</span><span class='line'>  /   \
</span><span class='line'>2       3
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>   / \     / \
</span><span class='line'>  .   4   .   .&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> / \
</span><span class='line'>.   .
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
If you've ever solved a search problem, this might sound stupid easy.
But getting the details of a functional solution right can be a challenge. As Okasaki
puts it in <a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">the paper</a>:</p>

<blockquote><p>…I presented the problem to many other
functional programmers and was continually amazed at the
baroque solutions I received in reply. With only a single
exception, everyone who came near a workable answer went
in a very different direction from my solution right from the
very beginning of the design process. I gradually realized
that I was witnessing some sort of mass mental block, a
communal blind spot, that was steering programmers away
from what seemed to be a very natural solution.</p></blockquote>

<p>Before you read my baroque solution, you might want to try for
yourself. I'll wait.</p>

<p>Although I love Clojure, using built-in <a href="http://stackoverflow.com/questions/2493996/hidden-features-of-clojure">queues</a>
and <a href="http://clojure.org/lazy">lazy seqs</a> felt like cheating. So I chose
to use <a href="http://racket-lang.org/">Racket</a> with
<a href="http://docs.racket-lang.org/rackunit/api.html#%28part._.Checks%29">Rackunit</a>,
and tried to use as many primitives as possible.</p>

<p>Breadth-first traversal is easy with a queue, but an efficient
functional queue can be tricky. Consing an element to the front of a
Scheme list is cheap, but appending is expensive—it requires "cdring
down" over all the elements. One solution (cribbed from <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.8825">Okasaki
himself</a>)
is to represent a queue as a pair of lists. The list on the left is
the head of the queue, so elements can be popped of in O(1) time. The
right side represents the rest of the elements <em>in reverse</em>, so
elements can be pushed on to the end in constant time. Here are the first
steps towards an implementation: an empty queue with left and right selectors.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">simple-q</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">empty-queue</span> <span class="o">&#39;</span><span class="p">(()()))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="nv">empty-queue</span> <span class="o">&#39;</span><span class="p">(()</span> <span class="p">())</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;An empty queue is a list containing two empty lists.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">right-side</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">queue</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">right-side</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;The right side of a queue is the second list.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">left-side</span> <span class="p">(</span><span class="k">lambda </span> <span class="p">(</span><span class="nf">queue</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">queue</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">left-side</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;The left side of a queue is the first list.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Inserting an item conses it on to the right-side list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">insert</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">item</span> <span class="nv">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">item</span> <span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">insert</span> <span class="mi">7</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">7</span> <span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Inserting an element adds it to the beginning of the</span>
</span><span class='line'><span class="s">          right side list.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To dequeue an item, "remove" it from the left side with <code>car</code>, and
return a new queue, with the <code>cdr</code> of the left side list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">remove</span>
</span><span class='line'> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span> <span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">remove</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="p">((</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Removing an element returns a pair: the removed</span>
</span><span class='line'><span class="s">           element and the new queue.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When the left side is out of elements, reverse the right side list,
and swap it with the left. Here's the buildup to <code>swap-and-reverse-car</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">swap</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">)</span> <span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">swap</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;The right side and left side can be swapped.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">reverse</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">items</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">items</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="nv">items</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nf">right-side</span> <span class="nv">simple-q</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;A list&#39;s elements can be reversed.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">reverse-car</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">items</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">car </span><span class="nv">items</span><span class="p">))</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">reverse-car</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="mi">3</span> <span class="mi">4</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">2</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="mi">3</span> <span class="mi">4</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;The first item in a list can be reversed.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">define </span><span class="nv">swap-and-reverse-car</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span> <span class="p">(</span><span class="nf">reverse-car</span> <span class="p">(</span><span class="nf">swap</span> <span class="nv">queue</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">swap-and-reverse-car</span> <span class="o">&#39;</span><span class="p">(()</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">)</span> <span class="p">())</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Swap and reverse-car can be composed to swap sides,</span>
</span><span class='line'><span class="s">          then reverse the left.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can write a dequeue function that really works:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">remove</span>
</span><span class='line'>   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">remove</span> <span class="p">(</span><span class="nf">swap-and-reverse-car</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span> <span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">remove</span> <span class="o">&#39;</span><span class="p">(()</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span> <span class="p">((</span><span class="mi">5</span> <span class="mi">6</span><span class="p">)</span> <span class="p">()))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;To remove an element when the left side is empty, swap</span>
</span><span class='line'><span class="s">          and reverse, then try again.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">remove</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="p">((</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="s">&quot;Removing an element returns a pair: the removed element</span>
</span><span class='line'><span class="s">          and the new queue.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That's all it takes to build a simple functional queue. Unfortunately,
it's not very efficient. Reversing a list is the kind of O(n)
operation we built our queue to avoid in the first place, but if many
more items are inserted than removed, we'll end up reversing and
swapping a lot. We can do better—and I'll explain how in my next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network closures in Clojure]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/25/network-closures-in-clojure/"/>
    <updated>2013-05-25T12:38:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/25/network-closures-in-clojure</id>
    <content type="html"><![CDATA[<p>Clojure may be a new language, but Lisp has a long history.
Translating Scheme and Common Lisp classics into Clojure is always an
interesting exercise, and often illuminates the differences and
comparative advantages of various Lisp-y languages. (For more
Lisp-to-Clojure resources see <a href="http://juliangamble.com/blog/2012/07/13/amazing-lisp-books-living-again-in-clojure/">this
list</a>.
Or, if you'd like to try porting some Scheme, consider <a href="https://github.com/ecmendenhall/sicpclojure">helping
translate SICP</a>).</p>

<p>This weekend, I spent some time with Paul Graham's classic <a href="http://www.paulgraham.com/onlisp.html"><em>On
Lisp</em></a>.
In Chapter 6, Graham shows how to use
<a href="https://en.wikipedia.org/wiki/Closure_(computer_science)">closures</a>
to model nodes in a network, representing a 20 questions game as a self-traversing binary
tree. Here's his original code, and my best attempts at Clojure translations.</p>

<p>The most obvious model for a set of connected nodes is a nested data
structure, like a map of maps. In Common Lisp, Graham uses a mutable
hashmap of <a href="http://www.lispworks.com/documentation/HyperSpec/Body/m_defstr.htm">structured
types</a>,
each pointing to their neighbors in the network:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defstruct</span> <span class="nv">node</span> <span class="nv">contents</span> <span class="nv">yes</span> <span class="nv">no</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nb">defvar</span> <span class="nv">&lt;em&gt;nodes&lt;/em&gt;</span> <span class="p">(</span><span class="nb">make-hash-table</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nb">defun</span> <span class="nv">defnode</span> <span class="p">(</span><span class="nv">name</span> <span class="nv">conts</span> <span class="nv">&amp;amp</span><span class="c1">;optional yes no)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">name</span> <span class="nv">&lt;em&gt;nodes&lt;/em&gt;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">make-node</span> <span class="ss">:contents</span> <span class="nv">conts&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;:yes</span> <span class="nv">yes</span>
</span><span class='line'><span class="ss">:no</span> <span class="nv">no</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A simple map seems like a sufficient replacement in Clojure. A single
node looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:people</span> <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is the person a man?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:male</span>, <span class="ss">:no</span> <span class="ss">:female</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the full tree looks like the following. Each node's <code>:yes</code> or <code>:no</code> keyword
points to the next node in the tree:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:penny</span> <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Abraham Lincoln.&quot;</span>, <span class="ss">:yes</span> <span class="nv">nil</span>, <span class="ss">:no</span> <span class="nv">nil</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:coin</span>  <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is the coin a penny?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:penny</span>, <span class="ss">:no</span> <span class="ss">:other-coin</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:USA</span>   <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is he on a coin?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:coin</span>, <span class="ss">:no</span> <span class="ss">:no-coin</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:dead</span>  <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Was he from the USA?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:USA</span>, <span class="ss">:no</span> <span class="ss">:elsewhere</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:male</span>  <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is he living?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:live</span>, <span class="ss">:no</span> <span class="ss">:dead</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:people</span> <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is the person a man?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:male</span>, <span class="ss">:no</span> <span class="ss">:female</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here's my first draft for defining nodes in Clojure. Since the Common
Lisp version used a mutable variable, I used a Clojure atom to store
network state:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nodes</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{}))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">defnode</span> <span class="p">[</span><span class="nb">name </span><span class="nv">contents</span> <span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; [yes no]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">nodes</span> <span class="nb">assoc name </span><span class="p">{</span><span class="ss">:contents</span> <span class="nv">contents</span> <span class="ss">:yes</span> <span class="nv">yes</span> <span class="ss">:no</span> <span class="nv">no</span><span class="p">}))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">make-nodes</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:people</span> <span class="s">&quot;Is the person a man?&quot;</span> <span class="ss">:male</span> <span class="ss">:female</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:male</span> <span class="s">&quot;Is he living?&quot;</span> <span class="ss">:live</span> <span class="ss">:dead</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:dead</span> <span class="s">&quot;Was he from the USA?&quot;</span> <span class="ss">:USA</span> <span class="ss">:elsewhere</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:USA</span> <span class="s">&quot;Is he on a coin?&quot;</span> <span class="ss">:coin</span> <span class="ss">:no-coin</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:coin</span> <span class="s">&quot;Is the coin a penny?&quot;</span> <span class="ss">:penny</span> <span class="ss">:other-coin</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:penny</span> <span class="s">&quot;Abraham Lincoln.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Traversing the network is simple: get a node, print the associated
question, prompt for input, get the next node, and repeat. Here's the original Common Lisp:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">run-node</span> <span class="p">(</span><span class="nv">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">n</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">name</span> <span class="nv">&lt;em&gt;nodes&lt;/em&gt;</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">node-yes</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;~A~%&amp;gt;&amp;gt; &quot;</span> <span class="p">(</span><span class="nv">node-contents</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">case</span> <span class="p">(</span><span class="nb">read</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">yes</span> <span class="p">(</span><span class="nv">run-node</span> <span class="p">(</span><span class="nv">node-yes</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>         <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nv">run-node</span> <span class="p">(</span><span class="nv">node-no</span> <span class="nv">n</span><span class="p">)))))</span>
</span><span class='line'>      <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nv">node-contents</span> <span class="nv">n</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And here's an equivalent in Clojure:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-node</span> <span class="p">[</span><span class="nv">name</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nb">node </span>    <span class="p">(</span><span class="err">@</span><span class="nv">nodes</span> <span class="nv">name</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="nv">contents</span> <span class="p">(</span><span class="nb">node </span><span class="ss">:contents</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">yes</span>      <span class="p">(</span><span class="nb">node </span><span class="ss">:yes</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">no</span>       <span class="p">(</span><span class="nb">node </span><span class="ss">:no</span><span class="p">)]</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="nv">yes</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;yes&quot;</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">run-node</span> <span class="nv">yes</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">run-node</span> <span class="nv">no</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Of course, there's no reason to bother swapping and dereferencing an
atom as long as the tree won't need to change at runtime. This
immutable version works just as well:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">defnode</span> <span class="p">[</span><span class="nv">nodes</span> <span class="nb">name </span><span class="nv">contents</span> <span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; [yes no]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">assoc </span><span class="nv">nodes</span> <span class="nb">name </span><span class="p">{</span><span class="ss">:contents</span> <span class="nv">contents</span> <span class="ss">:yes</span> <span class="nv">yes</span> <span class="ss">:no</span> <span class="nv">no</span><span class="p">}))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">make-nodes</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="p">{}</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nf">defnode</span> <span class="ss">:people</span> <span class="s">&quot;Is the person a man?&quot;</span> <span class="ss">:male</span> <span class="ss">:female</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defnode</span> <span class="ss">:male</span> <span class="s">&quot;Is he living?&quot;</span> <span class="ss">:live</span> <span class="ss">:dead</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defnode</span> <span class="ss">:dead</span> <span class="s">&quot;Was he from the USA?&quot;</span> <span class="ss">:USA</span> <span class="ss">:elsewhere</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defnode</span> <span class="ss">:USA</span> <span class="s">&quot;Is he on a coin?&quot;</span> <span class="ss">:coin</span> <span class="ss">:no-coin</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defnode</span> <span class="ss">:coin</span> <span class="s">&quot;Is the coin a penny?&quot;</span> <span class="ss">:penny</span> <span class="ss">:other-coin</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defnode</span> <span class="ss">:penny</span> <span class="s">&quot;Abraham Lincoln.&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="k">def </span><span class="nv">nodes</span> <span class="p">(</span><span class="nf">make-nodes</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">run-node</span> <span class="p">[</span><span class="nv">nodes</span> <span class="nv">name</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nb">node </span>    <span class="p">(</span><span class="nf">nodes</span> <span class="nv">name</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="nv">contents</span> <span class="p">(</span><span class="nb">node </span><span class="ss">:contents</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">yes</span>      <span class="p">(</span><span class="nb">node </span><span class="ss">:yes</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">no</span>       <span class="p">(</span><span class="nb">node </span><span class="ss">:no</span><span class="p">)]</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="nv">yes</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;yes&quot;</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">run-node</span> <span class="nv">nodes</span> <span class="nv">yes</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">run-node</span> <span class="nv">nodes</span> <span class="nv">no</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Using a closure rolls the data structure and traversal code into one,
by associating the <code>yes</code> and <code>no</code> fields with anonymous functions that
handle the same logic as <code>run-node</code>. Here's Graham's CL version:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">defnode</span> <span class="p">(</span><span class="nv">name</span> <span class="nv">conts</span> <span class="nv">&amp;amp</span><span class="c1">;optional yes no)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">name</span> <span class="nv">&lt;em&gt;nodes&lt;/em&gt;</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="k">if</span> <span class="nv">yes</span>
</span><span class='line'>      <span class="err">#’</span><span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;~A~%&amp;gt;&amp;gt; &quot;</span> <span class="nv">conts</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">case</span> <span class="p">(</span><span class="nb">read</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">yes</span> <span class="p">(</span><span class="nb">funcall</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">yes</span> <span class="vg">*nodes*</span><span class="p">)))</span>
</span><span class='line'>            <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nb">funcall</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">no</span> <span class="vg">*nodes*</span><span class="p">)))))</span>
</span><span class='line'>      <span class="err">#’</span><span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="nv">conts</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And here's mine in Clojure. The double-parens around <code>(@nodes yes)</code>
and <code>(@nodes no)</code> call the anonymous function, instead of just
returning it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nodes</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{}))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">defclosure</span> <span class="p">[</span><span class="nb">name </span><span class="nv">contents</span> <span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; [yes no]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">nodes</span> <span class="nb">assoc </span><span class="nv">name&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>     <span class="p">(</span><span class="k">if </span><span class="nv">yes</span>
</span><span class='line'>       <span class="p">(</span><span class="k">fn </span><span class="p">[]</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;yes&quot;</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>           <span class="p">((</span><span class="err">@</span><span class="nv">nodes</span> <span class="nv">yes</span><span class="p">))</span>
</span><span class='line'>           <span class="p">((</span><span class="err">@</span><span class="nv">nodes</span> <span class="nv">no</span><span class="p">))))</span>
</span><span class='line'>       <span class="p">(</span><span class="k">fn </span><span class="p">[]</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">make-nodes</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:people</span> <span class="s">&quot;Is the person a man?&quot;</span> <span class="ss">:male</span> <span class="ss">:female</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:male</span> <span class="s">&quot;Is he living?&quot;</span> <span class="ss">:live</span> <span class="ss">:dead</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:dead</span> <span class="s">&quot;Was he from the USA?&quot;</span> <span class="ss">:USA</span> <span class="ss">:elsewhere</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:USA</span> <span class="s">&quot;Is he on a coin?&quot;</span> <span class="ss">:coin</span> <span class="ss">:no-coin</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:coin</span> <span class="s">&quot;Is the coin a penny?&quot;</span> <span class="ss">:penny</span> <span class="ss">:other-coin</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:penny</span> <span class="s">&quot;Abraham Lincoln.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, traversing the tree is as simple as calling:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">((</span><span class="nf">nodes</span> <span class="ss">:people</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
And watching the tree traverse itself. You can find my code from this
post <a href="https://gist.github.com/ecmendenhall/5646594">here</a>. For more on closures in Lisp,
check out the rest of <a href="http://lib.store.yahoo.net/lib/paulgraham/onlisp.pdf">Chapter 6</a>.</p>
]]></content>
  </entry>
  
</feed>
