<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Connor Mendenhall]]></title>
  <link href="http://ecmendenhall.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://ecmendenhall.github.io/blog/"/>
  <updated>2013-08-25T22:30:36-05:00</updated>
  <id>http://ecmendenhall.github.io/blog/</id>
  <author>
    <name><![CDATA[Connor Mendenhall]]></name>
    <email><![CDATA[ecmendenhall@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Specljs Leiningen template]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/08/04/specljs-leiningen-template/"/>
    <updated>2013-08-04T14:19:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/08/04/specljs-leiningen-template</id>
    <content type="html"><![CDATA[<p>I'm very fond of <a href="http://speclj.com/">Speclj</a>, the simple, flexible Clojure spec runner we
use at 8th Light. Speclj now has a ClojureScript
<a href="https://clojars.org/specljs">counterpart</a>, but like many things
ClojureScript, it requires some classpath juggling and configuration
to get everything working nicely. To save my future self the hassle, I
put together a basic project template with Speclj and Specljs tests
and autorunners both preconfigured.</p>

<p>If you're using Leiningen 2, it's as easy as:</p>

<pre><code>$ lein new specljs &lt;your project name&gt;
</code></pre>

<p>Leiningen will download the template from Clojars automatically.</p>

<p>To start the Speclj autorunner from inside the project directory:</p>

<pre><code>$ lein spec -a
</code></pre>

<p>Specljs tests are configured to run whenever the ClojureScript
compiles. To watch for changes, rebuild and run tests automatically,
start the cljsbuild auto-compiler:</p>

<pre><code>$ lein cljsbuild auto
</code></pre>

<p>To run specljs tests once:</p>

<pre><code>$ lein cljsbuild test
</code></pre>

<p>If you're using pre-2.0 Leiningen, you can find the template on
<a href="https://clojars.org/specljs/lein-template">Clojars</a> and the source on <a href="https://github.com/ecmendenhall/specljs-template">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prime factorization with core.logic]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/07/15/prime-factorization-with-core-dot-logic/"/>
    <updated>2013-07-15T00:31:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/07/15/prime-factorization-with-core-dot-logic</id>
    <content type="html"><![CDATA[<p>It's time for my first <a href="http://blog.8thlight.com/micah-martin/2013/05/28/performing-code-katas.html">code
kata</a>,
and on Colin's suggestion, I'm starting with a classic: <a href="http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata">prime
factorization</a>.
The problem description is simple: write a function that takes an
integer n and returns a list of its prime factors in ascending order.
That leaves lots of room for creativity, and in my few months at 8th
Light, I've seen several interesting solutions, including <a href="https://github.com/marosluuce/objective-c-PrimeFactors">Objective-C</a>
and
<a href="http://telladifferentstory.tumblr.com/post/49745640314/pattern-matching-re-visited-with-the-prime-factors-kata">Erlang</a>.
I've been meaning to learn Clojure's <code>core.logic</code> library for a while,
so I decided to come up with a logic programming solution.</p>

<p>If you haven't yet checked out <code>core.logic</code>, there are a growing
number of resources on the web. To get up to speed, I worked through David Nolen's <a href="https://github.com/swannodette/logic-tutorial">logic tutorial</a>, the <a href="http://objectcommando.com/blog/2011/11/04/the-magical-island-of-kanren-core-logic-intro-part-1/">Magical Island of Kanren</a>, the
<a href="https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer">core.logic
Primer</a>,
and a few chapters of <a href="http://www.amazon.com/The-Reasoned-Schemer-Daniel-Friedman/dp/0262562146">The Reasoned
Schemer</a>.
Hopefully, following along with my test cases will explain the subset
of logic functions in my solution.</p>

<p>I'll start with a basic <a href="https://github.com/slagyr/speclj">speclj</a>
test setup:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>For the production code, I'll start with <code>core.logic</code> and three functions from the <a href="https://github.com/clojure/core.logic/wiki/Features#clpfd">finite domain</a> namespace.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On to the tests! The declarative aspect of logic programming feels
well-suited to a mathy problem like this. Instead of describing <em>how</em> to
factorize, I'll write a few definitions and let the logic engine
handle the rest. The strategy I have in mind is the same simple one I learned in
8th grade algebra: start with a composite integer, and <a href="https://en.wikipedia.org/wiki/Prime_factorization#Prime_decomposition">decompose it</a>
into a factor tree whose leaves are prime factors.</p>

<p>To start, I'll define "factor pairs": a vector of two integers that
multiply to another. So, <code>[2 3]</code>  is a factor pair of 6, <code>[1 23]</code> a
factor pair of 23. Here's the most general test I came up with:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; args] `(it ~@args))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">([</span><span class="nv">_0</span> <span class="nv">_1</span><span class="p">])</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There's a lot of syntax right off the bat, but this test isn't as
confusing as it might look. So far, I've found it easiest to understand logic programming as
describing a set of constraints on a solution. This test describes the
first constraint: factor pairs are vectors of two elements.</p>

<p>Here, <code>_0</code> and <code>_1</code> represent <em>reified</em>, <em>unbound</em> logic variables: symbolic
representations of logic variables that can take on any value. (The
numbers at the end indicate that they're two different variables: <code>_0</code>
and <code>_1</code> can take on different values). So this
test simply describes the most general constraint: the <code>factor-pairs</code>
function should take something as an argument and return a list of
vectors of two things--any two things!.</p>

<p>Here's a function that does just that:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>run*</code> function is the, uh, <em>core</em> of <code>core.logic</code>, used to set up
problems for the logic engine to solve. It returns a list of all the
solutions that match the constraints defined inside. The <code>fresh</code> form
inside of <code>run*</code> is
analogous to <code>let</code>: a way to declare local logic variables. The first
two lines say "Find all
the solutions where pair, factor1, and factor2 meet these
constraints," and the third describes the only constraint: "A pair is a
vector of two elements, factor1 and factor2".</p>

<p>Note that I'm ignoring the <code>number</code> argument! At this point
<code>(factor-pairs 81)</code>, <code>(factor-pairs 72)</code>, and <code>(factor-pairs 23)</code> all
return the same result. For now, calling this function <code>factor-pairs</code>
is a little misleading, since it returns the equivalent of all
possible pairs of two things. But now that the tests pass, we can add
another constraint:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; args] `(it ~@args))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;= % high)) pair)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Here, I'll describe the next constraint: factor pairs should only be
defined between 2 and n. (Yes, a pair like <code>[1 23]</code> is technically a
pair of factors, but it's not very useful for my prime factorization purposes).</p>

<p>I may be open to a little <a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">TDD legal trouble</a>
with this test update, but I've added a couple helper functions to
keep the tests as declarative as possible. <code>Should-all</code> asserts that a
predicate matches for every element in a collection. <code>In-interval?</code>
tests whether a pair is in the range <code>low</code> to <code>high</code>, inclusive.
Hopefully, <code>Two-elements?</code> explains itself. Since <code>factor-pairs</code> will
now return a list with many elements, I've generalized the original test.</p>

<p>It only takes one line to add the extra constraint:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The new line declares that <code>factor1</code> and <code>factor2</code> must both be in the
finite interval 2-<code>number</code>. <code>Factor-pairs</code> is still something of a
misnomer: it now returns the Cartesian product of all numbers
2-<code>number</code>. But it's a step closer. I'll add one more constraint:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; args] `(it ~@args))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;= % high)) pair)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Factor pairs contain two elements between 2 and n that equal n when
multiplied. That's a complete definition of a factor pair, and adding
the third constraint completes the function:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">= </span><span class="nv">number</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, <code>eq</code> converts an arithmetic expression into a constraint, as
long as the logic variables are defined over a finite domain. So the
final constraint simply says <code>number</code> must equal <code>factor1</code> times
<code>factor2</code>. If you're not convinced by the tests, try it in a REPL:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)</span>
</span><span class='line'><span class="p">([</span><span class="mi">3</span> <span class="mi">27</span><span class="p">]</span> <span class="p">[</span><span class="mi">9</span> <span class="mi">9</span><span class="p">]</span> <span class="p">[</span><span class="mi">27</span> <span class="mi">3</span><span class="p">])</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;user=&gt;</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">148</span><span class="p">)</span>
</span><span class='line'><span class="p">([</span><span class="mi">2</span> <span class="mi">74</span><span class="p">]</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">37</span><span class="p">]</span> <span class="p">[</span><span class="mi">37</span> <span class="mi">4</span><span class="p">]</span> <span class="p">[</span><span class="mi">74</span> <span class="mi">2</span><span class="p">])</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;user=&gt;</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">)</span>
</span><span class='line'><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are some properties here that I'll use to my advantage. First,
by default, factor pairs are ordered by the first factor, ascending.
Second, I've already created an implicit definition of primes: numbers
that return an empty list of factor pairs. I'll add it as a test for
clarity:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; args] `(it ~@args))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;= % high)) pair)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now I'll move on to decomposition. If you've watched a prime factors
kata before, you've probably seen a few standard tests: start by
testing 1, then 2, then 3, and then composites. Here's where something
similar comes in:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; args] `(it ~@args))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;= % high)) pair)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Decomposition&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 1 into itself&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Of course, it's easy to pass this one:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">= </span><span class="nv">number</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">decompose</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I'll make it a little harder with the next bit of the definition.
Primes should decompose into themselves:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; args] `(it ~@args))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;= % high)) pair)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Decomposition&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 1 into itself&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes primes into themselves&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">17</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">23</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I'll get back to passing with a small tweak. Instead of returning
<code>'(1)</code>, <code>decompose</code> should check if a number has any
factor pairs. If not, return the number.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">= </span><span class="nv">number</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">decompose</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">factorpair</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">factor-pairs</span> <span class="nv">number</span><span class="p">))]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">factorpair</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="nv">number</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That's the easy part, but what about composites? Well, two times a
prime should certainly decompose to 2 and the prime:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'>      <span class="nv">&lt;br/&gt;</span>
</span><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; args] `(it ~@args))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;= % high)) pair)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Decomposition&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 1 into itself&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes primes into themselves&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">17</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">23</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 2 * a prime into 2 and itself&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">4</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Decompose</code> already includes the base case at the bottom of of the
prime factor tree. If I feed it a number that's not prime, it should
decompose its factors until it runs into a prime. Concatenating the
results should return a nice list of prime factors:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>    <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">= </span><span class="nv">number</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">decompose</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">factorpair</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">factor-pairs</span> <span class="nv">number</span><span class="p">))]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">factorpair</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="nv">number</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nf">decompose</span> <span class="p">(</span><span class="nb">first </span><span class="nv">factorpair</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">decompose</span> <span class="p">(</span><span class="nb">second </span><span class="nv">factorpair</span><span class="p">))))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And that's it! Here's a last set of test cases to confirm that it
works:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>        <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; args] `(it ~@args))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">lt</span><span class="c1">;= % high)) pair)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Decomposition&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 1 into itself&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes primes into themselves&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">17</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">23</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 2 * a prime into 2 and itself&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes a composite into its prime factorization&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">8</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">30</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">11</span> <span class="mi">11</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">242</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">11</span> <span class="mi">23</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="p">(</span><span class="nb">* </span><span class="mi">23</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">11</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This isn't the fastest way to find prime factors, but it's no worse
than the typical trial division solution to the prime factors kata.
Using <code>core.logic</code> to declare definitions and constraints on the
solution feels uniquely concise, expressive, and clear, and the
exercise helped me get a more concrete handle on logic programming.
You can find the code from this post (and a few earlier iterations) <a href="https://gist.github.com/ecmendenhall/5970568">as
a Gist here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure namespaces for Python programmers]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/07/14/clojure-namespaces-for-python-programmers/"/>
    <updated>2013-07-14T22:28:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/07/14/clojure-namespaces-for-python-programmers</id>
    <content type="html"><![CDATA[<p>My mentor <a href="https://twitter.com/trptcolin">Colin</a> wrote one of the most
popular posts on the <a href="http://blog.8thlight.com/">8th Light blog</a>, on
the somewhat complex process of <a href="http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html">requiring Clojure
libs</a>.
It's not a stretch to give it some of the credit for my interest in
Clojure: I came close to giving up in frustration the first time I
tried to import a library in a Clojure REPL. It was <a href="http://xkcd.com/353/">so easy in
Python</a>, and there I was, suddenly dealing with
macros, keywords, quotes, and--heaven forfend!--all those parentheses.</p>

<p>For all the details on namespaces, <code>require</code>, and the <code>ns</code> macro, see
<a href="http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html">Colin's
post</a>,
which is still the authoritative source. But if you're a Python
programmer looking for a quick reference, here's the Python-Clojure
Rosetta stone I went looking for the first time I deadpanned into my
Clojure REPL.</p>

<h2>Import a library</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">library</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">library</span><span class="o">.</span><span class="n">dostuff</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="nv">library</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">library/dostuff</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">library</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span>  <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">library</span><span class="o">.</span><span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;library</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;user=&gt;</span> <span class="p">(</span><span class="nf">library/dostuff</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff!&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Import everything without qualification</h2>

<p>(Note: This practice is usually as ill-advised in Clojure as it is in Python!)
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dostuff</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">dostuff</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="o">*&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span>  <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'><span class="nv">nil&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;user=&gt;</span> <span class="p">(</span><span class="nf">dostuff</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff!&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Import specific functions</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span><span class="p">,</span> <span class="n">returnthings</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="n">returnthings</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span> <span class="nv">returnthings</span><span class="p">]]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">dostuff</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">returnthings</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span><span class="p">,</span> <span class="n">returnthings</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span>  <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span>  <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">returnthings</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="p">{</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span> <span class="nv">returnthings</span><span class="p">]])</span>
</span><span class='line'><span class="nv">nil&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;user=&gt;</span> <span class="p">(</span><span class="nf">dostuff</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span><span class='line'><span class="nv">nil&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;user=&gt;</span> <span class="p">(</span><span class="nf">returnthings</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="ss">:foo</span> <span class="mi">1</span> <span class="ss">:bar</span> <span class="mi">2</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Import and rename a library</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">library</span> <span class="kn">as</span> <span class="nn">lib</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">lib</span><span class="o">.</span><span class="n">dostuff</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">library</span> <span class="ss">:as</span> <span class="nv">lib</span><span class="p">]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">lib/dostuff</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">library</span> <span class="kn">as</span> <span class="nn">lib</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span>  <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">lib</span><span class="o">.</span><span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">library</span> <span class="ss">:as</span> <span class="nv">lib</span><span class="p">])</span>
</span><span class='line'><span class="nv">nil&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;user=&gt;</span> <span class="p">(</span><span class="nf">lib/dostuff</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Import and rename a function</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span> <span class="k">as</span> <span class="n">ds</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ds</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span><span class="p">]</span> <span class="ss">:rename</span> <span class="p">{</span><span class="nv">dostuff</span> <span class="nv">ds</span><span class="p">}]))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nf">ds</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span> <span class="k">as</span> <span class="n">ds</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">ds</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span><span class="p">]</span> <span class="ss">:rename</span> <span class="p">{</span><span class="nv">dostuff</span> <span class="nv">ds</span><span class="p">}])</span>
</span><span class='line'><span class="nv">nil&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;user=&gt;</span> <span class="p">(</span><span class="nf">ds</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>All together, now!</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">onelibrary</span><span class="o">,</span> <span class="nn">anotherlibrary</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">onemorelibrary</span> <span class="kn">as</span> <span class="nn">oml</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">returnthings</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span> <span class="k">as</span> <span class="n">ds</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">onelibrary&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>         <span class="nv">anotherlibrary</span>
</span><span class='line'>         <span class="p">[</span><span class="nv">onemorelibrary</span> <span class="ss">:as</span> <span class="nv">oml</span><span class="p">]</span>
</span><span class='line'>         <span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span> <span class="nv">returnthings</span><span class="p">]</span>
</span><span class='line'>                  <span class="ss">:rename</span> <span class="p">{</span><span class="nv">dostuff</span> <span class="nv">ds</span><span class="p">}]]))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quieter Cascalog]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/19/quieter-cascalog/"/>
    <updated>2013-06-19T21:23:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/19/quieter-cascalog</id>
    <content type="html"><![CDATA[<p>Tonight I attended a meetup on <a href="http://cascalog.org/">Cascalog</a>, a clojure DSL built on top of the <a href="https://en.wikipedia.org/wiki/Hadoop">Hadoop</a> map-reduce framework. (Slides <a href="https://docs.google.com/presentation/d/1DPD1v2sDwJ0G1LkvDwSzg9H4y26ce6j1l1zeu8t1FLo/edit?pli=1#slide=id.geccfa070_076">here</a> and code <a href="https://github.com/chairmanK/cascalog-workshop">here</a> if you'd like to check it out yourself).</p>

<p>Running huge, complicated queries with a few lines of code was
awesome, but my Hadoop installation made a lot of noise whenever I
tried a query in the REPL using the <code>?&lt;-</code> query executor, printing
lots of unwanted log info to
stdout. (I was using Hadoop
installed over homebrew
instead of the
<a href="https://github.com/chairmanK/cascalog-workshop">readme</a>
recommendation).
Fortunately, it's easy to
hush the logger a little by
running queries inside
<code>cascalog.io/with-log-level</code>.
Here's a quick two-line
macro that wraps calls to
<code>?&lt;-</code> in <code>with-log-level</code> to
quiet down Hadoop:</p>

<pre><code>  (require '[cascalog.io :refer [with-log-level]])
  (defmacro ?&lt;-- [&amp; forms] `(with-log-level :fatal (?&lt;- ~@forms)))
</code></pre>

<p>For future reference, you can find a gist <a href="https://gist.github.com/ecmendenhall/5819322">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reconstructing Clojure macros with speclj]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/27/learning-clojure-macros-with-speclj/"/>
    <updated>2013-05-27T17:01:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/27/learning-clojure-macros-with-speclj</id>
    <content type="html"><![CDATA[<blockquote><p>"It is a revelation to compare Menard’s Don Quixote with Cervantes’.
The latter, for example, wrote (part one, chapter nine):
'…truth, whose mother is history, rival of time, depository of
deeds, witness of the past, exemplar and adviser to the present, and
the future’s counselor.' Written in the seventeenth century, written by
the 'lay genius' Cervantes, this enumeration is a mere rhetorical
praise of history. Menard, on the other hand, writes:
'…truth, whose mother is history, rival of time, depository of
deeds, witness of the past, exemplar and adviser to the present, and
the future’s counselor.'"</p></blockquote>

<p>–From <a href="http://www.coldbacon.com/writing/borges-quixote.html"><em>Pierre Menard, Author of the Quixote</em></a></p>

<p><a href="http://www.infoq.com/presentations/Clojure-Macros">Macros are hard</a>,
but one of the most helpful exercises I've found in my limited macro
writing experience is practicing by recreating some of the <a href="http://clojure.org/macros">core
macros</a> I already know and love, like <code>or</code>,
<code>when-let</code>, and <code>-&gt;</code>.</p>

<p>Using <a href="https://github.com/slagyr/speclj">speclj</a> greatly simplifies
this exercise, and writing macro specs often test my understanding
better than writing the implementations themselves. Here's an example spec for the threading macro:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;-&gt; macro&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should expand into the code below&quot;</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">macro-form</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">;-macro 1 (+ 2) (* 3))]</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">macro-challenges.core/-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">;-macro</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">macro-challenges.core/-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">;-macro 1 (+ 2)) (* 3))</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">macroexpand-1 </span><span class="nv">macro-form</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">macro-challenges.core/-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">;-macro 1 (+ 2)) 3)</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">macroexpand </span><span class="nv">macro-form</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">macroexpand-all</span> <span class="nv">macro-form</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The functions <code>macroexpand</code>, <code>macroexpand-1</code>, and <code>macroexpand-all</code>
come in very handy. <code>Macroexpand-1</code> returns the "first" expansion of a
macro form (macros within macros won't be expanded). <code>Macroexpand</code>
calls <code>macroexpand-1</code> until the expansion is no longer a macro form.</p>

<p>In the above example, the first expansion of <code>-&gt;-macro</code>, my threading
macro replacement, returns a form that starts with another call to
<code>-&gt;-macro</code>. (I was surprised to find out that this is how the
threading macro works under the hood). <code>Macroexpand</code> expands <a href="http://stackoverflow.com/questions/2296385/homoiconicity-how-does-it-work">into a
list</a>
until the first item is <code>*</code>, which is not a macro.</p>

<p>When it's macros all the way down, <code>macroexpand-all</code> (technically
<code>clojure.walk/macroexpand-all</code>) recursively expands all macros in a
given form, resulting in the much simpler expression <code>(* (+ 1 2) 3)</code>
in the example above. These functions are all hugely helpful for
writing macros and their associated tests.</p>

<p>Here's my recreation of <code>-&gt;</code>, which passed the spec:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">-&gt;-macro</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">arg</span><span class="p">]</span> <span class="nv">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">arg</span> <span class="nv">first-form</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="nb">first </span><span class="nv">first-form</span><span class="p">)</span> <span class="o">~</span><span class="nv">arg</span> <span class="o">~@</span><span class="p">(</span><span class="nb">rest </span><span class="nv">first-form</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">arg</span> <span class="nv">first-form</span> <span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; more-forms]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span> <span class="o">`</span><span class="p">(</span><span class="nf">-</span><span class="o">&amp;</span><span class="nv">gt</span><span class="c1">;-macro (-&amp;gt;-macro ~arg ~first-form) ~@more-forms)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And bears a pretty strong resemblance to the original source:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">-&gt;</span>
</span><span class='line'>  <span class="s">&quot;Threads the expr through the forms. Inserts x as the</span>
</span><span class='line'><span class="s">  second item in the first form, making a list of it if it is not a</span>
</span><span class='line'><span class="s">  list already. If there are more forms, inserts the first form as the</span>
</span><span class='line'><span class="s">  second item in second form, etc.&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:added</span> <span class="s">&quot;1.0&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">x</span><span class="p">]</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">x</span> <span class="nv">form</span><span class="p">]</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">seq? </span><span class="nv">form</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>          <span class="p">(</span><span class="nb">with-meta </span><span class="o">`</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="nb">first </span><span class="nv">form</span><span class="p">)</span> <span class="o">~</span><span class="nv">x</span> <span class="o">~@</span><span class="p">(</span><span class="nb">next </span><span class="nv">form</span><span class="p">))</span> <span class="p">(</span><span class="nb">meta </span><span class="nv">form</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">list </span><span class="nv">form</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">([</span><span class="nv">x</span> <span class="nv">form</span> <span class="o">&amp;</span><span class="nv">amp</span><span class="c1">; more] `(-&gt; (-&gt; ~x ~form) ~@more)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Some macros are pretty easy to reconstruct (but check <a href="http://clojuredocs.org/clojure_core/clojure.repl/doc">their
documentation</a>
to make sure you really understand how they handle different
arguments). If you're well and truly stuck, it's always possible to check out the
<a href="http://clojuredocs.org/clojure_core/clojure.repl/source">original
code</a> for inspiration.</p>

<p>The specs and solutions I've written so far (mostly low-hanging fruit) are all
  available on my
  <a href="https://github.com/ecmendenhall/macro-challenges">Github</a>, if you'd
  like to have a hand at reconstructing Clojure yourself.</p>
]]></content>
  </entry>
  
</feed>
