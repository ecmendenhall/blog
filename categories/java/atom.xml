<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Connor Mendenhall]]></title>
  <link href="http://ecmendenhall.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://ecmendenhall.github.io/blog/"/>
  <updated>2013-06-10T00:34:58-05:00</updated>
  <id>http://ecmendenhall.github.io/blog/</id>
  <author>
    <name><![CDATA[Connor Mendenhall]]></name>
    <email><![CDATA[ecmendenhall@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Long methods]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-long-methods/"/>
    <updated>2013-06-03T01:28:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-long-methods</id>
    <content type="html"><![CDATA[<p>Martin Fowler identifies long methods as another common code smell, fixable by breaking one long method into several smaller ones and composing them together. Since <em>Clean Code</em> emphasized writing short, meaningful methods, I had to look a bit to find one. But I'm not very happy with the board coordinate constructor:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">UniversalBoardCoordinate</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">noParens</span> <span class="o">=</span> <span class="n">locationPhrase</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;(&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="n">noParens</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">coordinates</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidCoordinateException</span><span class="o">(</span><span class="s">&quot;That&#39;s not a valid board location.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">row</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'><span class="err">        </span><span class="n">column</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is an easy refactor: think about what each line of code does, group the related ones in their own methods, and replace them. In fact, I'd already separated each group with a line break. The first two trim the input string and split it in two:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Integer</span><span class="o">[]</span> <span class="nf">parseString</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">noParens</span> <span class="o">=</span> <span class="n">locationPhrase</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;(&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="n">noParens</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">checkValidity</span><span class="o">(</span><span class="n">coordinates</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="n">parseCoordinates</span><span class="o">(</span><span class="n">coordinates</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The next two check whether the result is valid:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkValidity</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">coordinates</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidCoordinateException</span><span class="o">(</span><span class="s">&quot;That&#39;s not a valid board location.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">And</span> <span class="n">the</span> <span class="n">last</span> <span class="n">two</span> <span class="n">convert</span> <span class="n">the</span> <span class="n">strings</span> <span class="n">to</span> <span class="nl">integers:</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Integer</span><span class="o">[]</span> <span class="nf">parseCoordinates</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">trim</span><span class="o">()),</span>
</span><span class='line'><span class="err">                               </span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">trim</span><span class="o">())</span> <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that the details of string manipulation are hidden in helper methods, the complicated constructor looks trivial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">UniversalBoardCoordinate</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Integer</span><span class="o">[]</span> <span class="n">orderedPair</span> <span class="o">=</span> <span class="n">parseString</span><span class="o">(</span><span class="n">locationPhrase</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">row</span> <span class="o">=</span> <span class="n">orderedPair</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="err">        </span><span class="n">column</span> <span class="o">=</span> <span class="n">orderedPair</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Refused-ish bequest]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-refused-ish-bequest/"/>
    <updated>2013-06-03T01:04:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-refused-ish-bequest</id>
    <content type="html"><![CDATA[<p>Before finishing up the first version of my terminal view game, I moved strings like the welcome message and player prompts to a <a href="http://docs.oracle.com/javase/tutorial/essential/environment/properties.html">properties file</a>. This requires reading and storing the strings before using them in the view, but has two big advantages. First, tests no longer break when I edit a string (at least, as long as my tests are using the same properties). Second, if I wanted to translate my program into another language, it's as easy as swapping out the properties file.</p>

<p>Unfortunately, loading strings got ugly fast. Here's an example from the <code>GameController</code> class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameController</span> <span class="kd">implements</span> <span class="n">Controller</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">welcome</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">yourMove</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">yourMoveThreeSquares</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">gameOverDraw</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">gameOverWin</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">xWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">oWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">boardSize</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">public</span> <span class="n">GameController</span><span class="o">(</span><span class="n">View</span> <span class="n">gameView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">view</span> <span class="o">=</span> <span class="n">gameView</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameBoard</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
 
 It gets worse. When I started writing my Swing view, I needed to ignore certain strings, like those that prompt for keyboard input. A good idea: avoid creating a brand new SwingController class, but somehow filter out unneeded strings. A bad idea: do it by checking and ignoring certain strings from the controller. This is logic that really shouldn't be in the view, implemented in a very fragile way. In fact, it undoes all the abstraction of the properties file—as soon as a string changes, <code>displayMessage()</code> will probably break. Plus, there's plenty of duplicated code.</p>

<p> <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err"> </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwingView</span> <span class="kd">extends</span> <span class="n">JFrame</span> <span class="kd">implements</span> <span class="n">View</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">boardSize</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ignoreThese</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">public</span> <span class="n">SwingView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">divider</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">playAgain</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">choosePlayerOne</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">choosePlayerTwo</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">boardSize</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">displayMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;move&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="kt">int</span> <span class="n">endStart</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;player&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="mi">6</span><span class="o">;</span>
</span><span class='line'><span class="err">            </span><span class="n">String</span> <span class="n">ending</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">endStart</span><span class="o">);</span>
</span><span class='line'><span class="err">            </span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;Your move, player&quot;</span> <span class="o">+</span> <span class="n">ending</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">return</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">        </span><span class="n">JLabel</span> <span class="n">messageLabel</span> <span class="o">=</span> <span class="n">messagePanel</span><span class="o">.</span><span class="na">getLabel</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">messageLabel</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="err"> </span>  <span class="o">}</span><span class="err">   </span>
</span><span class='line'><span class="err"> </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
 
 This is similar, though not identical to Fowler's "Refused bequest," where a subclass inherits lots of methods and then ignores them. Here' I'm loading lots of strings, then ignoring them.
 
 Refused bequest is fixed with a refactor called "Replace inheritance with delegation:" put the superclass in a field on the old subclass, remove the inheritance, and simply delegate to the superclass methods when needed. Here, I haven't even shared code through inheritance, but by good old copy-and-paste (so it's also part of the duplicated code stink parade).
 
 The cleanup strategy here is similar too: create a separate class to handle loading properties, and use it in place of the duplicated methods. I'll start by creating a <code>StringLoader</code> class that includes the duplicated fields and methods:
 
 <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err"> </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">welcome</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">yourMove</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">yourMoveThreeSquares</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">gameOverDraw</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">gameOverWin</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">xWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">oWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">boardSize</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="kc">null</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Instead of all these fields, storing strings in a map is much cleaner:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The repeated calls to <code>viewStrings.getProperty()</code> are still pretty ugly and very difficult to read. One solution is to extract a <code>load()</code> method, then iterate over an array of the property names:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">Properties</span> <span class="n">viewStringProperties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">load</span><span class="o">(</span><span class="n">String</span> <span class="n">propertyName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">propertyString</span> <span class="o">=</span> <span class="n">viewStringProperties</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">propertyName</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">propertyName</span><span class="o">,</span> <span class="n">propertyString</span><span class="o">)</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStringProperties</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">exception</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">properties</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;welcome&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;divider&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;yourmove&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;playagain&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;gameoverwin&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;xwins&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;owins&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;boardsize&quot;</span><span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">property</span> <span class="o">:</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">load</span><span class="o">(</span><span class="n">property</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, let's replace the hardcoded filepath by passing a path to the view constructor (and on to the <code>loadViewStrings()</code> method:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">StringLoader</span><span class="o">(</span><span class="n">String</span> <span class="n">filepath</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">      </span><span class="n">loadViewStrings</span><span class="o">(</span><span class="n">filepath</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, reading in strings from the properties file looks like this, instead of the forty-line monster we started with:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameController</span> <span class="kd">implements</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="err">    </span>  <span class="k">new</span> <span class="n">StringLoader</span><span class="o">().</span><span class="na">getViewStrings</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To use a string, I can just get it from the map:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">viewStrings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This requires trading off a little clarity, but on balance it's much cleaner. Best of all, now I can use properties as they were intended. Preventing my view from displaying certain strings just requires creating a new properties file and removing the content from the unneeded messages—another win for decoupling and abstraction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Duplicated code]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/02/refactoring-examples-duplicated-code/"/>
    <updated>2013-06-02T20:56:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/02/refactoring-examples-duplicated-code</id>
    <content type="html"><![CDATA[<p>I've spent the last couple weeks working through <a href="http://martinfowler.com/">Martin Fowler's</a> <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1370238910&amp;sr=8-1&amp;keywords=refactoring"><em>Refactoring</em></a>, which includes a taxonomy of useful solutions to common code smells. It's an excellent book, but I found it hard to recognize and remember some of the patterns without digging into my own  code. Over the next few posts, I'll describe some of the smells and refactors I found in my Tic Tac Toe game (as much to commit them to my own memory as to share them with others). First up, the most common code smell of all: duplication.</p>

<p>Despite using a <a href="https://github.com/ecmendenhall/Java-TTT/blob/master/test/com/cmendenhall/tests/TicTacToeTest.java">superclass</a> to store static methods and data
used by all my tests, I wasn't using inheritance to create universal setup and teardown methods. Although many of my tests used a similar pattern to capture output, none were quite alike, and all of them were pretty messy. Here's an example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JUnit4</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameControllerTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="n">MockTerminalView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MockTerminalView</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">GameController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameController</span><span class="o">(</span><span class="n">view</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="kd">private</span> <span class="kd">final</span> <span class="n">PrintStream</span> <span class="n">stdout</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kd">final</span> <span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">PrintStream</span> <span class="n">outputStream</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">OutputRecorder</span> <span class="n">outputRecorder</span><span class="o">;</span>
</span><span class='line'><span class="err">  </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Before</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">outputRecorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">Player</span> <span class="n">playerOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HumanPlayer</span><span class="o">(</span><span class="n">X</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">Player</span> <span class="n">playerTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MinimaxPlayer</span><span class="o">(</span><span class="n">O</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerOne</span><span class="o">(</span><span class="n">playerOne</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerTwo</span><span class="o">(</span><span class="n">playerTwo</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="nd">@Test</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">controllerShouldStartNewGame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputRecorder</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">welcome</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">divider</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">    </span><span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="n">GameOverException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">controllerShouldEndGameOnRestartIfInputIsNo</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">GameOverException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputStream</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;n&quot;</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">restartGame</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">playAgain</span><span class="o">,</span> <span class="n">output</span><span class="o">.</span><span class="na">toString</span><span class="o">());&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These tests use both a plain <code>PrintStream</code> and my custom <code>OutputRecorder</code>, though they don't really need to. Some setup is done in the fields, and some during <code>setUp()</code>, though there's no clear reason why. And the same lines setting up and tearing down the recorder are repeated across lots of tests. The smell here is duplicated code, which Fowler calls "number one in the stink parade." To solve it, I'll start by extracting a method, and then extracting a superclass.</p>

<p>First, I'll create an empty <code>TicTacToeTest</code> class with empty setup and teardown methods.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JUnit4</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TicTacToeTest</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@Before</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nd">@After</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cleanUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, extract a <code>setUpRecorder()</code> method including all the setup-related lines:</p>

<pre><code>        <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="kd">private</span> <span class="n">OutputRecorder</span> <span class="n">recorder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setUpRecorder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>        <span class="err">        </span><span class="n">PrintStream</span> <span class="n">stdout</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>        <span class="err">        </span><span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="err">        </span><span class="n">recorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Then, a <code>startRecorder()</code> method to replace calls to <code>System.setOut()</code>:</p>

<pre><code>        <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="kd">private</span><span class="err"> </span><span class="kt">void</span><span class="err"> </span><span class="n">startRecorder</span><span class="o">()</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">recorder</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>This method might seem short, but I find <code>startRecorder()</code> much easier to read. Now that these methods are implemented, I can plug them into the tests:</p>

<pre><code>          <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>          <span class="nd">@Before</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>          <span class="err">    </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'>          <span class="err">    </span>
</span><span class='line'>          <span class="err">    </span><span class="n">setUpRecorder</span><span class="o">();</span>
</span><span class='line'>          <span class="err">    </span>
</span><span class='line'>          <span class="err">    </span><span class="n">Player</span> <span class="n">playerOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HumanPlayer</span><span class="o">(</span><span class="n">X</span><span class="o">);</span>
</span><span class='line'>          <span class="err">    </span><span class="n">Player</span> <span class="n">playerTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MinimaxPlayer</span><span class="o">(</span><span class="n">O</span><span class="o">);</span>
</span><span class='line'>          <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerOne</span><span class="o">(</span><span class="n">playerOne</span><span class="o">);</span>
</span><span class='line'>          <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerTwo</span><span class="o">(</span><span class="n">playerTwo</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Test</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">controllerShouldStartNewGame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">startRecorder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>              <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>              <span class="err">    </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">welcome</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'>              <span class="err">    </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">divider</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>              <span class="err">    </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>The last line of the second test was meant as a mini-teardown, to reset stdout before the next test. I wrote it before I understood JUnit execution, in which each test runs in its own environment. It survived around 80 commits, but it doesn't actually do anything, so I can safely delete it. (I know because none of the tests fail afterwards). In fact, this whole refactor should be possible while keeping the tests green.</p>

<p>After searching for usages of the old pattern and replacing them with the new methods, there's just one thing left: pull up the new methods to a Test superclass. Here's the result:</p>

<pre><code>              <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>              <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TicTacToeTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>              <span class="err">    </span><span class="kd">protected</span> <span class="n">OutputRecorder</span> <span class="n">recorder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="err">    </span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">setUpRecorder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>              <span class="err">        </span><span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>              <span class="err">        </span><span class="n">recorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="err">    </span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">startRecorder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">recorder</span><span class="o">);</span>
</span><span class='line'>              <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="err">    </span><span class="nd">@Before</span>
</span><span class='line'>              <span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">recorderSetUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>              <span class="err">        </span><span class="n">setUpRecorder</span><span class="o">();</span>
</span><span class='line'>              <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>This looks like a simple refactor, but my tests are now much cleaner. More important, if I need to make a change to the <code>OutputRecorder</code> class, it will propagate through all tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Travis CI solutions: Ivy dependencies and headless testing]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/28/two-travis-ci-solutions/"/>
    <updated>2013-05-28T01:06:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/28/two-travis-ci-solutions</id>
    <content type="html"><![CDATA[<p>One of last week's projects was setting up <a href="https://travis-ci.org/">Travis
CI</a>, a hosted <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous
integration</a>
service that's free for open source projects. Even if you haven't
heard about Travis (as I hadn't), you've probably already seen the
service on Github—it's responsible for the green and red build status
icons at the top of many project READMEs.</p>

<p>After every push to a remote repo, Travis builds your project, runs
the test suite, and sends off a notification with the results. Once
it's configured, it's a great way to ensure that even if your project is
unfinished, the published code will work correctly for anyone who
pulls the repo.</p>

<p>The official <a href="http://about.travis-ci.org/">Travis docs</a> are close to
comprehensive, but I ran into a few catches getting everything set up (and have an inbox full of
failed build notifications to prove it). Hopefully these solutions
will rescue someone else from a frustrating afternoon.</p>

<h1>Resolving Ivy dependencies</h1>

<p>My Tic Tac Toe project uses <a href="https://ant.apache.org/ivy/">Ivy</a> to
manage build dependencies, and my ant build script includes a <a href="https://ant.apache.org/ivy/history/latest-milestone/install.html">standard
snippet</a> that downloads Ivy if it's not available locally:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ivy.install.version&quot;</span> <span class="na">value=</span><span class="s">&quot;2.1.0-rc2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;condition</span> <span class="na">property=</span><span class="s">&quot;ivy.home&quot;</span> <span class="na">value=</span><span class="s">&quot;${env.IVY_HOME}&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>isset property=&quot;env.IVY_HOME&quot; /<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/condition&gt;</span>
</span><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ivy.home&quot;</span> <span class="na">value=</span><span class="s">&quot;${user.home}/.ant&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ivy.jar.dir&quot;</span> <span class="na">value=</span><span class="s">&quot;${ivy.home}/lib&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ivy.jar.file&quot;</span> <span class="na">value=</span><span class="s">&quot;${ivy.jar.dir}/ivy.jar&quot;</span> <span class="nt">/&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;target</span> <span class="na">name=</span><span class="s">&quot;download-ivy&quot;</span> <span class="na">unless=</span><span class="s">&quot;offline&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${ivy.jar.dir}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>!-- download Ivy from web site so that it can be used even without --<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>-- any special installation --<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="ni">&amp;lt;</span>get src=&quot;http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>   dest=&quot;${ivy.jar.file}&quot;
</span><span class='line'>   usetimestamp=&quot;true&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/target&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>target name=&quot;init-ivy&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>    depends=&quot;download-ivy&quot;<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- try to load ivy here from ivy home, in case the user has not --</span>
</span><span class='line'><span class="c">  -- already dropped it into ant&#39;s lib dir (note that the latter copy --</span>
</span><span class='line'><span class="c">  -- will always take precedence). We will not fail as long as local --</span>
</span><span class='line'><span class="c">  -- lib dir exists (it may be empty) and ivy is in at least one of --</span>
</span><span class='line'><span class="c">  -- ant&#39;s lib dir or the local lib dir. --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;path</span> <span class="na">id=</span><span class="s">&quot;ivy.lib.path&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>fileset dir=&quot;${ivy.jar.dir}&quot;
</span><span class='line'>         includes=&quot;*.jar&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/path&gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>taskdef resource=&quot;org/apache/ivy/ant/antlib.xml&quot;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>       uri=&quot;antlib:org.apache.ivy.ant&quot;
</span><span class='line'>       classpathref=&quot;ivy.lib.path&quot;/<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If your build and test targets are set to depend on the <code>init-ivy</code>
task, the script will ensure that Ivy resolves itself and the
project's other dependencies correctly. Telling Travis how to build
and test a project is as simple as writing a few lines of YAML. For
example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ant resolve</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This tells Travis the project language (which comes with its own
<a href="http://about.travis-ci.org/docs/user/languages/">default settings</a>),
points to <code>ant resolve</code> as the command necessary to resolve
dependencies, and describes the target Java versions to test against.
But my builds failed with the following mysterious error:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ant resolve
</span><span class='line'>Buildfile: /home/travis/build/ecmendenhall/Java-TTT/build.xml&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  [mkdir] Created dir: /home/travis/build/ecmendenhall/Java-TTT/lib&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>check-ivy:
</span><span class='line'>  [echo] Checking for Ivy .jar in local directories.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>bootstrap-ivy:
</span><span class='line'>  [echo] Bootstrapping Ivy installation.
</span><span class='line'>  [mkdir] Created dir: /home/travis/.ant/lib
</span><span class='line'>  [get] Getting: http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar
</span><span class='line'>  [get] To: /home/travis/.ant/lib/ivy.jar&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>resolve:
</span><span class='line'>  [echo] Resolving project dependencies.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>BUILD FAILED
</span><span class='line'>/home/travis/build/ecmendenhall/Java-TTT/build.xml:52: Problem: failed
</span><span class='line'>to create task or type antlib:org.apache.ivy.ant:retrieve
</span><span class='line'>Cause: The name is undefined.
</span><span class='line'>Action: Check the spelling.
</span><span class='line'>Action: Check that any custom tasks/types have been declared.
</span><span class='line'>Action: Check that any &lt;presetdef>/&lt;macrodef> declarations have taken&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>    place.
</span><span class='line'>
</span><span class='line'>    No types or tasks have been defined in this namespace yet
</span><span class='line'>    This appears to be an antlib declaration.
</span><span class='line'>    Action: Check that the implementing library exists in one of:
</span><span class='line'>        -/usr/share/ant/lib
</span><span class='line'>        -/home/travis/.ant/lib
</span><span class='line'>        -a directory added on the command line with the -lib argument
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Even though ant was correctly downloading an ivy jarfile, the build
script failed to find it. The answers to my <a href="http://stackoverflow.com/questions/16673978/travis-ci-cant-find-ivy-jarfile">Stack Overflow question</a>
explained that this was related to the order in which jars are
loaded to the Java classpath. The easiest solution is to run ant
twice, once to download ivy, and again to build and test the
project.</p>

<p>Once the source of this error was cleared up, the solution was simple.
Adding a <code>before_install</code> script to my Travis build ensured that ivy
would be downloaded before trying to build the project. This meant
adding just one line to my <code>.travis.yml</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">before_install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ant init-ivy</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ant resolve</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are a number of other options to run scripts at different times
in the Travis lifecycle. Check out the rest of the docs
<a href="http://about.travis-ci.org/docs/user/build-configuration/#Build-Lifecycle">here</a>.</p>

<h1>Headless testing with xfvb</h1>

<p>My Travis builds worked nicely until I started adding a Swing view to
my Tic Tac Toe project. Although the tests would run and pass locally,
Travis threw a <code>java.awt.HeadlessException</code> as soon as it tried to run
the test suite. The <a href="http://about.travis-ci.org/docs/user/gui-and-headless-browsers/">Travis docs</a> explain using a tool called xvfb (X
Virtual Framebuffer) to simulate a windowing system and run headless
tests, but warn that "you need to tell your testing tool process"
exactly how to use it.</p>

<p>Exactly how to do this wasn't clear, but after fiddling with JVM startup arguments and
trying to shell out from inside ant, I discovered that the solution
was dead simple: just add the recommended arguments to <code>.travis.yml</code>,
and ant and JUnit will take care of the rest. Here's my final
<code>.travis.yml</code>, including the solutions to both problems.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">before_install</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ant init-ivy</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;export</span><span class="nv"> </span><span class="s">DISPLAY=:99.0&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;sh</span><span class="nv"> </span><span class="s">-e</span><span class="nv"> </span><span class="s">/etc/init.d/xvfb</span><span class="nv"> </span><span class="s">start&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ant resolve</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The joy of exceptions]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/19/the-joy-of-exceptions/"/>
    <updated>2013-05-19T21:31:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/19/the-joy-of-exceptions</id>
    <content type="html"><![CDATA[<p>One more recipe for the TDD cookbook before I move on to more
interesting things. You might have noticed a new <code>GameOverException</code>
and a try-catch block in the final example of my last post.</p>

<p>Before adding a game over exception, methods that checked for final
game states directly called <code>System.exit()</code>. Testing this proved
difficult, and I ended up importing a <a href="http://stefanbirkner.github.io/system-rules/">third-party library</a> of extra
JUnit rules. This week, I refactored them to throw a custom exception:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TerminalView.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TerminalView</span> <span class="kd">implements</span> <span class="n">View</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">endGame</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">GameOverException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">GameOverException</span><span class="o">(</span><span class="s">&quot;Game over.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This exception will bubble up until it's caught in <code>Main</code>, which calls
<code>System.exit()</code> on behalf of any method that throws a
<code>GameOverException</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Main.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TerminalView</span><span class="o">();</span>
</span><span class='line'>        <span class="n">GameController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameController</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>        <span class="n">controller</span><span class="o">.</span><span class="na">setUp</span><span class="o">();</span>
</span><span class='line'>        <span class="n">controller</span><span class="o">.</span><span class="na">startGame</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">GameOverException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is not only a <a href="http://stackoverflow.com/questions/6171265/best-way-to-exit-a-program-when-i-want-an-exception-to-be-thrown">better practice</a>,
but also provides a much better way to test methods that might detect
a completed game—just add a try/catch block to the tests!</p>

<p>Exceptions have come in handy elsewhere in my tests, too. Once the
controller starts a game, there's nothing to break the back-and-forth
game loop but a win, draw, or error. Figuring out how to test game
states without getting stuck in an infinite loop or loading up entire
games was a challenge. "If only there
were some special syntax for breaking normal control flow in special
situations," I wondered to myself more times than I'd like to admit.
Well, duh—use exceptions!  My mock view objects throw a <code>NoSuchElementException</code> when their input
queue runs empty. Catching this exception breaks the normal game flow
and allows me to access game state as soon as the fake input I'm
interested in has been sent to the controller. Here's an example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>GameControllerTest.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">controllerShouldPassErrorMessageToViewOnInvalidInput</span><span class="o">()</span><span class="kd">throws</span> <span class="n">GameOverException</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;invalid phrase&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputRecorder</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">playRound</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchElementException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">outputRecorder</span><span class="o">.</span><span class="na">discardFirstNStrings</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">output</span> <span class="o">=</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;That&#39;s not a valid board location.&quot;</span><span class="o">,</span> <span class="n">output</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'><span class="n">view</span><span class="o">.</span><span class="na">clearInput</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Normally, <code>Controller.playRound()</code> will continue querying players for
moves until the game ends. But once this test catches the empty queue
exception, it tests against the expected output, which should show an
error message. Exceptions have proved extremely handy so far—as long as I remember
that they're in my control flow toolbox, too.</p>
]]></content>
  </entry>
  
</feed>
