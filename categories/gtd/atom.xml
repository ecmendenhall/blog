<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GTD | Connor Mendenhall]]></title>
  <link href="http://ecmendenhall.github.io/blog/categories/gtd/atom.xml" rel="self"/>
  <link href="http://ecmendenhall.github.io/blog/"/>
  <updated>2013-06-17T01:15:22-05:00</updated>
  <id>http://ecmendenhall.github.io/blog/</id>
  <author>
    <name><![CDATA[Connor Mendenhall]]></name>
    <email><![CDATA[ecmendenhall@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GTD and TDD]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/02/gtd-and-tdd/"/>
    <updated>2013-05-02T00:29:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/02/gtd-and-tdd</id>
    <content type="html"><![CDATA[<p>My apprenticeship at 8th Light began with the <a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">Three Laws of TDD</a>:</p>

<blockquote><ul>
<li>Don't write any production code unless it makes a failing test pass.</li>
<li>Write the most minimal test that is sufficient to fail.</li>
<li>Don't write any more production code than <a href="http://plato.stanford.edu/entries/necessary-sufficient/">necessary and sufficient</a> to pass a failing test.</li>
</ul>
</blockquote>

<p>My first project obeying these new commandments is a rewrite of <a href="https://github.com/ecmendenhall/clojurescript-tic-tac-toe">Tic-Tac-Toe</a> in Java, a language completely new to me. Like all new projects, I began in a wilderness of error. IntelliJ was totally unfamiliar. Type declarations felt fussy and foreign. I just wanted to map over an array but had to settle for another for loop. And yet test by test, things slowly started to work.</p>

<p>After three days, I can't claim to know Java. But I can claim that I know <em>my</em> Java works.</p>

<p>The clarity and certainty that come from good tests are feelings I've experienced before. Over the past few years, the practices and principles of <a href="http://www.43folders.com/2004/09/08/getting-started-with-getting-things-done">Getting Things Done</a> have transformed the way I work, think, and act. (Have I told you about our church? Would you like to read some <a href="http://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0142000280">inspirational literature</a>?) Here is a formulation of the basic idea that might look familiar:</p>

<blockquote><ul>
<li>Don't spend time and effort on anything but a project's next incomplete action.</li>
<li>Choose the smallest <a href="http://www.43folders.com/2004/09/17/next-actions-both-physical-and-visible">next action</a> sufficient to accomplish something useful.</li>
<li>Don't spend more time or effort than necessary to finish an incomplete action.</li>
</ul>
</blockquote>

<p>To the uninitiated, writing tests and making lists might seem inflexible, <a href="https://en.wikipedia.org/wiki/Three_laws_of_robotics">robotic</a>, and a little dorky. But TODO lists and test suites are really tools that externalize uncertainty. The vague sense that I really should do that thing becomes a clear action that will be in my inbox later. The nagging fear that a method might misbehave becomes proof that it does and will always do exactly what I expect.</p>

<p>I skated through school and college on cleverness and a keen balance of terror. And it worked! I wrote code that seemed to do what I told it long before I started writing tests. (Tests aren't necessary for working code: they're sufficient to prove that code works). But to claim that other ways work just fine is to miss the point. GTD and TDD are systems that radically, ruthlessly eliminate uncertaintyâ€”not because the rules are necessary in the strictest sense, but because they are sufficient to get things done, make things work, and do it all with a clear mind.</p>
]]></content>
  </entry>
  
</feed>
