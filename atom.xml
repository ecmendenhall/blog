<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Connor Mendenhall]]></title>
  <link href="http://ecmendenhall.github.io/blog/atom.xml" rel="self"/>
  <link href="http://ecmendenhall.github.io/blog/"/>
  <updated>2013-08-14T09:26:42-05:00</updated>
  <id>http://ecmendenhall.github.io/blog/</id>
  <author>
    <name><![CDATA[Connor Mendenhall]]></name>
    <email><![CDATA[ecmendenhall@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seen and unseen value]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/08/14/seen-and-unseen-value/"/>
    <updated>2013-08-14T08:10:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/08/14/seen-and-unseen-value</id>
    <content type="html"><![CDATA[<p>The idea at the heart of agile development is really very simple: many
incremental, functional improvements create more value than one big,
centralized push. At 8th Light, we demo completed features to our
clients at the end of each weekly iteration. It&#8217;s a chance to show
clients that we&#8217;re making progress and creating tangible value.
Perhaps more important, it shortens the feedback loop between feature
ideas and implementation.</p>

<p>A good user story creates &#8220;business value.&#8221; But note the &#8220;business.&#8221;
There are many story-like tasks that create lots of value for
developers. Refactoring crufty code into something more stable and
extensible always extends its lifespan. Speeding up the test
suite might mean writing twice as fast. A new design pattern or
library behind the scenes can eliminate scores of future headaches.
And yet none of these improvements are visible, and none really create
business value. They all have second-order effects on business value,
usually on scales longer than one week, but the immediate effects are invisible.</p>

<p>It&#8217;s easy to spend a whole week on pseudostories with nothing visible
to show. (I&#8217;ve certainly done it!) And it&#8217;s easy to feel resentful
when lots of work looks like nothing new at all. But consider a
client&#8217;s perspective and invisible efficiencies start to look pretty
lame: imagine a carpenter showing off her rad new nailgun (<em>twice</em> as
fast as a hammer!) instead of the house she&#8217;s supposed to be building.</p>

<p>Unseen improvements are hugely helpful, but they don&#8217;t count if they
aren&#8217;t visible. That doesn&#8217;t mean they can&#8217;t be made to count.
It can require creativity, but it&#8217;s possible to make unseen
improvements more obvious&#8211;show, don&#8217;t tell, as the writer&#8217;s adage
goes. Show how using a repository makes it easy to swap in new data sources.
Show the new views that reuse carefully extracted components. Show a
new feature that Clojurescript made possible. Setting visible goals
along the way makes unseen value clear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DIY Gmail with sup]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/08/04/diy-gmail-with-sup/"/>
    <updated>2013-08-04T15:20:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/08/04/diy-gmail-with-sup</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been a Gmail user for my entire adult life. Ever since I
abandoned my old AOL inbox on the family PC, Gmail has simply <em>been</em>
email. I&#8217;ve never used folders, only labels. I&#8217;ve never deleted
old messages to save space, but archived everything. I&#8217;ve always
expected full-text search, aggressive spam filtering, and continuous
access from any device.</p>

<p>As I&#8217;ve archived year after year of new messages, I&#8217;ve become less
comfortable storing my entire indexed email history on someone else&#8217;s
servers, where they can be scanned and
<a href="https://ssd.eff.org/3rdparties/govt/stronger-protection">searched</a> at
will. And yet in practice , I&#8217;ve always traded off privacy against
<a href="https://www.youtube.com/watch?v=dBtmzY5gcO8">convention</a> and
<a href="https://www.schneier.com/blog/archives/2013/06/trading_privacy_1.html">convenience</a>.</p>

<p>In part, this is because it&#8217;s long been a discontinuous decision: even a
small amount of extra control or privacy required giving up all the
modern conveniences of webmail at once. No desktop client came close to the features of Gmail, so I never made the switch. But now that
I spend most of my time in a terminal, I&#8217;ve finally found a client
that provides a pretty good compromise: <a href="http://supmua.org/">sup</a>.</p>

<p>Sup is not something I&#8217;d set up for my Mom, but Rubyists and Unix
geeks will feel right at home. It&#8217;s a
<a href="https://en.wikipedia.org/wiki/Curses_(programming_library)">curses</a>
based mail client written in Ruby with excellent full text search out
of the box. In addition to offering archiving, labels, and search,
it&#8217;s built on top of extensible tools like offlineimap, msmtp, and gpg, and
scriptable in Ruby.</p>

<p>The official docs are very good (and thus don&#8217;t need to be repeated),
but these are the sections I found most helpful in order:</p>

<ul>
<li><a href="https://github.com/sup-heliotrope/sup/wiki/Mac-OSX">OS X
installation</a></li>
<li><a href="https://github.com/sup-heliotrope/sup/wiki/Mac-OSX">Gmail
configuration</a></li>
<li><a href="https://github.com/sup-heliotrope/sup/wiki/Adding-sources">Storing messages in Maildirs</a></li>
<li><a href="https://github.com/sup-heliotrope/sup/wiki/Securely-Store-Password">Secure password
storage</a></li>
<li><a href="https://github.com/sup-heliotrope/sup/wiki/gpg">GPG integration</a></li>
</ul>


<p>For now, sup doesn&#8217;t do two-way IMAP syncing, so messages I archive
stay on my machine. In my case this is a feature, not a bug: I now
have a permanent searchable archive stored locally that won&#8217;t change
if I delete messages from my Gmail account. I can keep the last few
weeks of mail on the Gmail server, accessible from my phone and the web (and seriously, when
was the last time you looked at an email more than a month old?), and
everything else securely archived on my own drive.</p>

<p>It would be a mistake to consider my sup setup much more private than
plain Gmail. My messages still travel across the internet in cleartext and pile up
in my correspondents&#8217; inboxes. (Sup integrates nicely with GPG for
ad hoc encryption). They&#8217;re probably still stored in <a href="https://www.quora.com/Gmail/Does-gmail-delete-the-deleted-emails-forever">Google
backups</a>
and no doubt snarfed and <a href="http://www.wired.com/threatlevel/2012/03/ff_nsadatacenter/">sent off to
Bluffdale</a>.
I am probably not paranoid enough, but I believe Google&#8217;s claims that they really do erase deleted
messages, and keeping my own archive raises the cost of compromising
or reconstructing my entire history by a little bit, without
sacrificing the features I&#8217;ve become so dependent upon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specljs Leiningen template]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/08/04/specljs-leiningen-template/"/>
    <updated>2013-08-04T14:19:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/08/04/specljs-leiningen-template</id>
    <content type="html"><![CDATA[<p>I&#8217;m very fond of <a href="http://speclj.com/">Speclj</a>, the simple, flexible Clojure spec runner we
use at 8th Light. Speclj now has a ClojureScript
<a href="https://clojars.org/specljs">counterpart</a>, but like many things
ClojureScript, it requires some classpath juggling and configuration
to get everything working nicely. To save my future self the hassle, I
put together a basic project template with Speclj and Specljs tests
and autorunners both preconfigured.</p>

<p>If you&#8217;re using Leiningen 2, it&#8217;s as easy as:</p>

<pre><code>$ lein new specljs &lt;your project name&gt;
</code></pre>

<p>Leiningen will download the template from Clojars automatically.</p>

<p>To start the Speclj autorunner from inside the project directory:</p>

<pre><code>$ lein spec -a
</code></pre>

<p>Specljs tests are configured to run whenever the ClojureScript
compiles. To watch for changes, rebuild and run tests automatically,
start the cljsbuild auto-compiler:</p>

<pre><code>$ lein cljsbuild auto
</code></pre>

<p>To run specljs tests once:</p>

<pre><code>$ lein cljsbuild test
</code></pre>

<p>If you&#8217;re using pre-2.0 Leiningen, you can find the template on
<a href="https://clojars.org/specljs/lein-template">Clojars</a> and the source on <a href="https://github.com/ecmendenhall/specljs-template">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open web security essentials]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/07/30/open-web-security-essentials/"/>
    <updated>2013-07-30T00:08:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/07/30/open-web-security-essentials</id>
    <content type="html"><![CDATA[<p>Over the past two weeks, I&#8217;ve been working through <a href="http://www.amazon.com/The-Web-Application-Hackers-Handbook/dp/1118026470">The Web Application
Hacker&#8217;s
Handbook</a>.
Although it&#8217;s not part of the 8th Light core curriculum, it ought to
be: it&#8217;s a comprehensive catalog of web security mistakes and a great
introduction to thinking about vulnerabilities from an attacker&#8217;s perspective. The only gripe I have
with the authors is their penchant for plugging expensive closed-source software
and online training. Fortunately, I&#8217;ve found plenty of free
alternatives. Here are a few of the essential tools I&#8217;ve found for
developers interested in web security.</p>

<h2>VirtualBox</h2>

<p>Every tool in my pentesting kit depends on
<a href="https://www.virtualbox.org/">VirtualBox</a>. Working in virtual machines
keeps my security tools separate from my development environment, and
allows me to practice attacking hideously vulnerable applications in
quarantine. VirtualBox includes excellent network configuration
options, including completely virtualized local networks that make it
easy to keep things compartmentalized.</p>

<h2>Kali Linux</h2>

<p><a href="http://www.kali.org/">Kali Linux</a>, formerly BackTrack, is a
specialized Debian distribution that includes hundreds of built in
security tools. I can&#8217;t begin to imagine the time I might have spent
with Homebrew installing and configuring everything included here. The tools included with Kali are many and powerful, and
I&#8217;ve discovered a new fuzzer, proxy, or scanner to try for every topic
in the book.</p>

<h2>Zed Attack Proxy</h2>

<p>The authors of WAHH frequently plug their own Burp Suite, a closed-source
intercepting proxy that costs $300 per user per year to do anything
useful. <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">Zed Attack
Proxy</a>,
developed by the <a href="https://www.owasp.org/index.php/Main_Page">Open Web Security
Project</a>, is completely free, Apache
licensed, and just as good an educational and testing tool.
(It&#8217;s included in Kali, along with the free
edition of Burp). Hacking tools are not always the most carefully
crafted software, but ZAP is an extremely stable, very pleasant
exception. <a href="https://www.owasp.org/index.php/WebScarab_Getting_Started">WebScarab</a>, also by OWASP, is another good free alternative.</p>

<h2>SQLMap</h2>

<p>I remember the joy of my first successful SQL injection like it was
last Thursday. (It <em>was</em> last Thursday, but that&#8217;s beside the point).
The thrill of breaking in with a well placed apostrophe and couple of
dashes takes a while to wear off, but diminishing returns are likely to
set in after 50 handcrafted variations on the same GET parameter.
Fortunately, there&#8217;s
<a href="https://github.com/sqlmapproject/sqlmap">SQLMap</a>, which almost makes
it too easy, automating the entire process of finding and exploiting SQL injection vulnerabilities.</p>

<p>All these tools are no fun without something to (safely, responsibly, legally)
attack. Browsing through WAHH, I was excited to see lots of links to
online interactive labs illustrating almost every concept. I was less
excited to discover that they&#8217;re completely proprietary and cost
$7/hour. Fortunately, there are plenty of open alternatives:</p>

<h2>Metasploitable</h2>

<p><a href="http://sourceforge.net/projects/metasploitable/files/Metasploitable2/">Metasploitable2</a>
is an intentionally vulnerable virtual machine configured to run
several vulnerable web applications on port 80 by default, including
<a href="http://www.dvwa.co.uk/">Damn Vulnerable Web App</a> and
<a href="https://www.owasp.org/index.php/OWASP_Mutillidae_2_Project">Mutillidae</a>.
Before booting it up, please make sure your network settings are
<a href="https://www.youtube.com/watch?v=e0vpBKRZPGc">configured
correctly</a>: it should
never ever be exposed to users on your network or the internet.</p>

<h2>RailsGoat</h2>

<p>I&#8217;m not reading WAHH to become a professional pentester. I&#8217;m doing it
to learn how to develop safe web applications, and we write lots of
them in Rails. <a href="https://github.com/OWASP/railsgoat">RailsGoat</a> (yet
another OWASP project) is a vulnerable Rails application with built-in
documentation and examples of the <a href="https://www.owasp.org/index.php/Top_10_2013-Top_10">top
10</a> web
vulnerabilities. Best of all, each one includes code samples, which
are especially useful for a developer like me trying to avoid writing
a goat of my own.</p>

<h2>OWASP</h2>

<p>Many of these resources come courtesy of OWASP, the <a href="https://www.owasp.org/index.php/Main_Page">Open Web
Application Security
Project</a>. In addition to
developing lots of free tools, they&#8217;re an excellent resource for
learning about web security.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prime factorization with core.logic]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/07/15/prime-factorization-with-core-dot-logic/"/>
    <updated>2013-07-15T00:31:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/07/15/prime-factorization-with-core-dot-logic</id>
    <content type="html"><![CDATA[<p>It&#8217;s time for my first <a href="http://blog.8thlight.com/micah-martin/2013/05/28/performing-code-katas.html">code
kata</a>,
and on Colin&#8217;s suggestion, I&#8217;m starting with a classic: <a href="http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata">prime
factorization</a>.
The problem description is simple: write a function that takes an
integer n and returns a list of its prime factors in ascending order.
That leaves lots of room for creativity, and in my few months at 8th
Light, I&#8217;ve seen several interesting solutions, including <a href="https://github.com/marosluuce/objective-c-PrimeFactors">Objective-C</a>
and
<a href="http://telladifferentstory.tumblr.com/post/49745640314/pattern-matching-re-visited-with-the-prime-factors-kata">Erlang</a>.
I&#8217;ve been meaning to learn Clojure&#8217;s <code>core.logic</code> library for a while,
so I decided to come up with a logic programming solution.</p>

<p>If you haven&#8217;t yet checked out <code>core.logic</code>, there are a growing
number of resources on the web. To get up to speed, I worked through David Nolen&#8217;s <a href="https://github.com/swannodette/logic-tutorial">logic tutorial</a>, the <a href="http://objectcommando.com/blog/2011/11/04/the-magical-island-of-kanren-core-logic-intro-part-1/">Magical Island of Kanren</a>, the
<a href="https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer">core.logic
Primer</a>,
and a few chapters of <a href="http://www.amazon.com/The-Reasoned-Schemer-Daniel-Friedman/dp/0262562146">The Reasoned
Schemer</a>.
Hopefully, following along with my test cases will explain the subset
of logic functions in my solution.</p>

<p>I&#8217;ll start with a basic <a href="https://github.com/slagyr/speclj">speclj</a>
test setup:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the production code, I&#8217;ll start with <code>core.logic</code> and three functions from the <a href="https://github.com/clojure/core.logic/wiki/Features#clpfd">finite domain</a> namespace.</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>On to the tests! The declarative aspect of logic programming feels
well-suited to a mathy problem like this. Instead of describing <em>how</em> to
factorize, I&#8217;ll write a few definitions and let the logic engine
handle the rest. The strategy I have in mind is the same simple one I learned in
8th grade algebra: start with a composite integer, and <a href="https://en.wikipedia.org/wiki/Prime_factorization#Prime_decomposition">decompose it</a>
into a factor tree whose leaves are prime factors.</p>

<p>To start, I&#8217;ll define &#8220;factor pairs&#8221;: a vector of two integers that
multiply to another. So, <code>[2 3]</code>  is a factor pair of 6, <code>[1 23]</code> a
factor pair of 23. Here&#8217;s the most general test I came up with:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">it</span> <span class="o">~@</span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">([</span><span class="nv">_0</span> <span class="nv">_1</span><span class="p">])</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a lot of syntax right off the bat, but this test isn&#8217;t as
confusing as it might look. So far, I&#8217;ve found it easiest to understand logic programming as
describing a set of constraints on a solution. This test describes the
first constraint: factor pairs are vectors of two elements.</p>

<p>Here, <code>_0</code> and <code>_1</code> represent <em>reified</em>, <em>unbound</em> logic variables: symbolic
representations of logic variables that can take on any value. (The
numbers at the end indicate that they&#8217;re two different variables: <code>_0</code>
and <code>_1</code> can take on different values). So this
test simply describes the most general constraint: the <code>factor-pairs</code>
function should take something as an argument and return a list of
vectors of two things&#8211;any two things!.</p>

<p>Here&#8217;s a function that does just that:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>run*</code> function is the, uh, <em>core</em> of <code>core.logic</code>, used to set up
problems for the logic engine to solve. It returns a list of all the
solutions that match the constraints defined inside. The <code>fresh</code> form
inside of <code>run*</code> is
analogous to <code>let</code>: a way to declare local logic variables. The first
two lines say &#8220;Find all
the solutions where pair, factor1, and factor2 meet these
constraints,&#8221; and the third describes the only constraint: &#8220;A pair is a
vector of two elements, factor1 and factor2&#8221;.</p>

<p>Note that I&#8217;m ignoring the <code>number</code> argument! At this point
<code>(factor-pairs 81)</code>, <code>(factor-pairs 72)</code>, and <code>(factor-pairs 23)</code> all
return the same result. For now, calling this function <code>factor-pairs</code>
is a little misleading, since it returns the equivalent of all
possible pairs of two things. But now that the tests pass, we can add
another constraint:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">it</span> <span class="o">~@</span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">high</span><span class="p">))</span> <span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, I&#8217;ll describe the next constraint: factor pairs should only be
defined between 2 and n. (Yes, a pair like <code>[1 23]</code> is technically a
pair of factors, but it&#8217;s not very useful for my prime factorization purposes).</p>

<p>I may be open to a little <a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">TDD legal trouble</a>
with this test update, but I&#8217;ve added a couple helper functions to
keep the tests as declarative as possible. <code>Should-all</code> asserts that a
predicate matches for every element in a collection. <code>In-interval?</code>
tests whether a pair is in the range <code>low</code> to <code>high</code>, inclusive.
Hopefully, <code>Two-elements?</code> explains itself. Since <code>factor-pairs</code> will
now return a list with many elements, I&#8217;ve generalized the original test.</p>

<p>It only takes one line to add the extra constraint:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new line declares that <code>factor1</code> and <code>factor2</code> must both be in the
finite interval 2-<code>number</code>. <code>Factor-pairs</code> is still something of a
misnomer: it now returns the Cartesian product of all numbers
2-<code>number</code>. But it&#8217;s a step closer. I&#8217;ll add one more constraint:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">it</span> <span class="o">~@</span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">high</span><span class="p">))</span> <span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Factor pairs contain two elements between 2 and n that equal n when
multiplied. That&#8217;s a complete definition of a factor pair, and adding
the third constraint completes the function:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">= </span><span class="nv">number</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">)))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>eq</code> converts an arithmetic expression into a constraint, as
long as the logic variables are defined over a finite domain. So the
final constraint simply says <code>number</code> must equal <code>factor1</code> times
<code>factor2</code>. If you&#8217;re not convinced by the tests, try it in a REPL:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)</span>
</span><span class='line'><span class="p">([</span><span class="mi">3</span> <span class="mi">27</span><span class="p">]</span> <span class="p">[</span><span class="mi">9</span> <span class="mi">9</span><span class="p">]</span> <span class="p">[</span><span class="mi">27</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">148</span><span class="p">)</span>
</span><span class='line'><span class="p">([</span><span class="mi">2</span> <span class="mi">74</span><span class="p">]</span> <span class="p">[</span><span class="mi">4</span> <span class="mi">37</span><span class="p">]</span> <span class="p">[</span><span class="mi">37</span> <span class="mi">4</span><span class="p">]</span> <span class="p">[</span><span class="mi">74</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">)</span>
</span><span class='line'><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some properties here that I&#8217;ll use to my advantage. First,
by default, factor pairs are ordered by the first factor, ascending.
Second, I&#8217;ve already created an implicit definition of primes: numbers
that return an empty list of factor pairs. I&#8217;ll add it as a test for
clarity:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">it</span> <span class="o">~@</span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">high</span><span class="p">))</span> <span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I&#8217;ll move on to decomposition. If you&#8217;ve watched a prime factors
kata before, you&#8217;ve probably seen a few standard tests: start by
testing 1, then 2, then 3, and then composites. Here&#8217;s where something
similar comes in:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">it</span> <span class="o">~@</span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">high</span><span class="p">))</span> <span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Decomposition&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 1 into itself&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, it&#8217;s easy to pass this one:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">= </span><span class="nv">number</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">)))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">decompose</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ll make it a little harder with the next bit of the definition.
Primes should decompose into themselves:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">it</span> <span class="o">~@</span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">high</span><span class="p">))</span> <span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Decomposition&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 1 into itself&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes primes into themselves&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">17</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">23</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ll get back to passing with a small tweak. Instead of returning
<code>'(1)</code>, <code>decompose</code> should check if a number has any
factor pairs. If not, return the number.</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">= </span><span class="nv">number</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">)))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">decompose</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">factorpair</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">factor-pairs</span> <span class="nv">number</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">factorpair</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="nv">number</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s the easy part, but what about composites? Well, two times a
prime should certainly decompose to 2 and the prime:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">it</span> <span class="o">~@</span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">high</span><span class="p">))</span> <span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Decomposition&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 1 into itself&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes primes into themselves&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">17</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">23</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 2 * a prime into 2 and itself&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">4</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Decompose</code> already includes the base case at the bottom of of the
prime factor tree. If I feed it a number that&#8217;s not prime, it should
decompose its factors until it runs into a prime. Concatenating the
results should return a nice list of prime factors:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.core.logic.fd</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">in</span> <span class="nv">interval</span> <span class="nv">eq</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">factor-pairs</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">fresh</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">in</span> <span class="nv">factor1</span> <span class="nv">factor2</span> <span class="p">(</span><span class="nf">interval</span> <span class="mi">2</span> <span class="nv">number</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">eq</span> <span class="p">(</span><span class="nb">= </span><span class="nv">number</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">)))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">== </span><span class="nv">pair</span> <span class="p">[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">decompose</span> <span class="p">[</span><span class="nv">number</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">factorpair</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">factor-pairs</span> <span class="nv">number</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">factorpair</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="nv">number</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">concat </span><span class="p">(</span><span class="nf">decompose</span> <span class="p">(</span><span class="nb">first </span><span class="nv">factorpair</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">decompose</span> <span class="p">(</span><span class="nb">second </span><span class="nv">factorpair</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it! Here&#8217;s a last set of test cases to confirm that it
works:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">prime-factors.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">prime-factors.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">they</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nf">it</span> <span class="o">~@</span><span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">should-all</span> <span class="p">[</span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">every? </span><span class="nv">predicate</span> <span class="nv">collection</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">in-interval?</span> <span class="p">[</span><span class="nv">low</span> <span class="nv">high</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">pair</span><span class="p">]</span> <span class="p">(</span><span class="nb">every? </span><span class="o">#</span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">%</span> <span class="nv">low</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">%</span> <span class="nv">high</span><span class="p">))</span> <span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">two-elements?</span> <span class="p">[</span><span class="nv">pair</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="mi">2</span> <span class="p">(</span><span class="nb">count </span><span class="nv">pair</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">multiply-to?</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">]]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="p">(</span><span class="nb">* </span><span class="nv">factor1</span> <span class="nv">factor2</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Factor pairs of n&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;contain two elements&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="nv">two-elements?</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;are defined between 2 and n&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">in-interval?</span> <span class="mi">2</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;equal n when multiplied&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should-all</span> <span class="p">(</span><span class="nf">multiply-to?</span> <span class="mi">81</span><span class="p">)</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">81</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Prime numbers&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">they</span> <span class="s">&quot;have no factor pairs&quot;</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">()</span> <span class="p">(</span><span class="nf">factor-pairs</span> <span class="mi">23</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;Decomposition&quot;</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 1 into itself&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes primes into themselves&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">17</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">17</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">23</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes 2 * a prime into 2 and itself&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;decomposes a composite into its prime factorization&quot;</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">8</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">30</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">11</span> <span class="mi">11</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="mi">242</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">5</span> <span class="mi">11</span> <span class="mi">23</span><span class="p">)</span> <span class="p">(</span><span class="nf">decompose</span> <span class="p">(</span><span class="nb">* </span><span class="mi">23</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">11</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&#8217;t the fastest way to find prime factors, but it&#8217;s no worse
than the typical trial division solution to the prime factors kata.
Using <code>core.logic</code> to declare definitions and constraints on the
solution feels uniquely concise, expressive, and clear, and the
exercise helped me get a more concrete handle on logic programming.
You can find the code from this post (and a few earlier iterations) <a href="https://gist.github.com/ecmendenhall/5970568">as
a Gist here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Rails from Virtualbox]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/07/14/accessing-rails-from-virtualbox/"/>
    <updated>2013-07-14T23:49:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/07/14/accessing-rails-from-virtualbox</id>
    <content type="html"><![CDATA[<p>My latest project involves adding a Flash fallback to replace an
HTML5-based feature in a Rails application. It&#8217;s the first time I&#8217;ve
tested in Internet Explorer over a virtual machine, and I spent a good
deal of time configuring everything. Here&#8217;s a summary of the process
for future VM novices.</p>

<h3>Get VirtualBox</h3>

<p>First, grab <a href="https://www.virtualbox.org/">VirtualBox</a>. It may be handy
for more than testing: in addition to
running Internet Explorer, you might want to try a new <a href="http://virtualboxes.org/images/">Linux
distro</a> or do some <a href="http://raidersec.blogspot.com/2013/03/installing-kali-linux-in-virtualbox.html">pen
testing</a>.</p>

<h3>Install an IE virtual machine</h3>

<p>Microsoft recently rolled out <a href="http://www.modern.ie/en-us/virtualization-tools#downloads">free virtual machine images</a> for IE
testing that greatly simplify the setup process. Download and extract the versions you&#8217;re interested in.
Some of these are distributed as full images, but most come as several <code>.rar</code> files and a
self-extracting archive. To extract from the command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod +x MacVirtualBox.part1.sfx
</span><span class='line'>$ ./MacVirtualBox.part1.sfx</span></code></pre></td></tr></table></div></figure>


<p>This should create a new <code>.ova</code> file in the same directory. Open VirtualBox and import it (File > Import Appliance on OS X).</p>

<p><img src="http://ecmendenhall.github.io/blog/images/vbox.png"></p>

<h3>Configure network settings</h3>

<p>Select the machine you&#8217;d like to connect from and choose Settings >
Network. Make sure the network adapter is enabled and attached to NAT.
(This should be the default setting).</p>

<p><img src="http://ecmendenhall.github.io/blog/images/nat.png"></p>

<p>You can access the host machine
from inside the VM at 10.0.2.2&#8211;e.g., if you access your Rails dev server at
localhost:3000, you can connect at 10.0.2.2:3000. Unfortunately,
running my Rails dev server from the host machine resulted in
occasional redirects to localhost. Fix this by editing the Windows
hosts file.</p>

<p>The Windows hosts file is available in
<code>C:\windows\system32\drivers\etc\</code>. In XP, you&#8217;ll be able to edit it
directly with Notepad. On a Vista VM, you&#8217;ll need admin priviliges.
Find Notepad in the start menu, right click, and choose &#8220;Run as
Administrator.&#8221; Then, edit the hosts file to direct localhost to
10.0.2.2, the default VirtualBox address for the host machine.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>10.0.2.2 localhost</span></code></pre></td></tr></table></div></figure>


<p>Run your Rails dev server on the host machine, and connect to
localhost:3000 as usual. Congratulations! You&#8217;re ready for the joy of
Internet Explorer. For bonus points, configure Capybara to <a href="http://www.johng.co.uk/2010/10/13/run_capybara_and_cucumber_features_in_internet_explorer_on_remote_windows/">run in IE</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure namespaces for Python programmers]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/07/14/clojure-namespaces-for-python-programmers/"/>
    <updated>2013-07-14T22:28:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/07/14/clojure-namespaces-for-python-programmers</id>
    <content type="html"><![CDATA[<p>My mentor <a href="https://twitter.com/trptcolin">Colin</a> wrote one of the most
popular posts on the <a href="http://blog.8thlight.com/">8th Light blog</a>, on
the somewhat complex process of <a href="http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html">requiring Clojure
libs</a>.
It&#8217;s not a stretch to give it some of the credit for my interest in
Clojure: I came close to giving up in frustration the first time I
tried to import a library in a Clojure REPL. It was <a href="http://xkcd.com/353/">so easy in
Python</a>, and there I was, suddenly dealing with
macros, keywords, quotes, and&#8211;heaven forfend!&#8211;all those parentheses.</p>

<p>For all the details on namespaces, <code>require</code>, and the <code>ns</code> macro, see
<a href="http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html">Colin&#8217;s
post</a>,
which is still the authoritative source. But if you&#8217;re a Python
programmer looking for a quick reference, here&#8217;s the Python-Clojure
Rosetta stone I went looking for the first time I deadpanned into my
Clojure REPL.</p>

<h2>Import a library</h2>

<figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">library</span>
</span><span class='line'>
</span><span class='line'><span class="n">library</span><span class="o">.</span><span class="n">dostuff</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="nv">library</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">library/dostuff</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">library</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">library</span><span class="o">.</span><span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;library</span><span class="p">)</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">library/dostuff</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff!&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Import everything without qualification</h2>

<p>(Note: This practice is usually as ill-advised in Clojure as it is in Python!)</p>

<figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">dostuff</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">dostuff</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dostuff</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff!&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Import specific functions</h2>

<figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span><span class="p">,</span> <span class="n">returnthings</span>
</span><span class='line'>
</span><span class='line'><span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="n">returnthings</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span> <span class="nv">returnthings</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">dostuff</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">returnthings</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span><span class="p">,</span> <span class="n">returnthings</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">returnthings</span><span class="p">()</span>
</span><span class='line'><span class="n">Out</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="p">{</span> <span class="s">&quot;foo&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;bar&quot;</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span> <span class="nv">returnthings</span><span class="p">]])</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">dostuff</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">returnthings</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="ss">:foo</span> <span class="mi">1</span> <span class="ss">:bar</span> <span class="mi">2</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Import and rename a library</h2>

<figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">library</span> <span class="kn">as</span> <span class="nn">lib</span>
</span><span class='line'>
</span><span class='line'><span class="n">lib</span><span class="o">.</span><span class="n">dostuff</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">library</span> <span class="ss">:as</span> <span class="nv">lib</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">lib/dostuff</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">library</span> <span class="kn">as</span> <span class="nn">lib</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span>  <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">lib</span><span class="o">.</span><span class="n">dostuff</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">library</span> <span class="ss">:as</span> <span class="nv">lib</span><span class="p">])</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">lib/dostuff</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Import and rename a function</h2>

<figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span> <span class="k">as</span> <span class="n">ds</span>
</span><span class='line'>
</span><span class='line'><span class="n">ds</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span><span class="p">]</span> <span class="ss">:rename</span> <span class="p">{</span><span class="nv">dostuff</span> <span class="nv">ds</span><span class="p">}]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ds</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>REPL </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span> <span class="k">as</span> <span class="n">ds</span>
</span><span class='line'>
</span><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">ds</span><span class="p">()</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span><span class="p">]</span> <span class="ss">:rename</span> <span class="p">{</span><span class="nv">dostuff</span> <span class="nv">ds</span><span class="p">}])</span>
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'>
</span><span class='line'><span class="nv">user=&gt;</span> <span class="p">(</span><span class="nf">ds</span><span class="p">)</span>
</span><span class='line'><span class="s">&quot;did stuff&quot;</span>
</span><span class='line'><span class="nv">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h2>All together, now!</h2>

<figure class='code'><figcaption><span>File </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">onelibrary</span><span class="o">,</span> <span class="nn">anotherlibrary</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">onemorelibrary</span> <span class="kn">as</span> <span class="nn">oml</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">returnthings</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">library</span> <span class="kn">import</span> <span class="n">dostuff</span> <span class="k">as</span> <span class="n">ds</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">yourproject.core</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">onelibrary</span>
</span><span class='line'>             <span class="nv">anotherlibrary</span>
</span><span class='line'>             <span class="p">[</span><span class="nv">onemorelibrary</span> <span class="ss">:as</span> <span class="nv">oml</span><span class="p">]</span>
</span><span class='line'>             <span class="p">[</span><span class="nv">library</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">dostuff</span> <span class="nv">returnthings</span><span class="p">]</span>
</span><span class='line'>                      <span class="ss">:rename</span> <span class="p">{</span><span class="nv">dostuff</span> <span class="nv">ds</span><span class="p">}]]))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breadth-first numbering: A solution]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-a-solution/"/>
    <updated>2013-06-24T12:00:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-a-solution</id>
    <content type="html"><![CDATA[<p>Now that we&#8217;ve built an <a href="blog/2013/06/24/breadth-first-numbering-a-lazy-functional-queue/">efficient functional
queue</a>,
we can finally put it to work in a breadth-first numbering solution.</p>

<p>First, let&#8217;s define a few trees up front for testing. The first is the
example given in the introduction of <a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">the
paper</a>.
The other two are a little trickier, and the twelve-node tree is not binary.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">example-tree</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                     <span class="s">&quot;leaf&quot;</span><span class="p">))</span>
</span><span class='line'>                           <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                            <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">five-nodes</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                   <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                              <span class="p">(</span><span class="s">&quot;E&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                   <span class="s">&quot;leaf&quot;</span><span class="p">))</span>
</span><span class='line'>                         <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                              <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">twelve-nodes</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="p">(</span><span class="s">&quot;F&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                          <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                     <span class="p">(</span><span class="s">&quot;G&quot;</span> <span class="p">(</span><span class="s">&quot;I&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                               <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                          <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                     <span class="p">(</span><span class="s">&quot;H&quot;</span> <span class="p">(</span><span class="s">&quot;J&quot;</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                               <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                               <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                          <span class="p">(</span><span class="s">&quot;K&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                          <span class="p">(</span><span class="s">&quot;L&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'>                                <span class="p">(</span><span class="s">&quot;E&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To calculate the visit order, we can perform a simple <a href="https://en.wikipedia.org/wiki/Breadth-first_search">breadth-first
traversal</a> of the
tree. Now that we have a queue, the solution is pretty close to the pseudocode: Start with the
root node in the queue, and assign it a number. Then recur with three
new parameters: A queue with this node&#8217;s children inserted, a list
with this node&#8217;s number consed on, and an incremented node number.
When the queue is empty, we&#8217;re done:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">visit-order</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tree</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">bfs-iter</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span> <span class="nv">visited</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">))</span> <span class="nv">visited</span>
</span><span class='line'>            <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">node</span>  <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">new-q</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">)))))</span>
</span><span class='line'>              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">equal? </span><span class="s">&quot;leaf&quot;</span> <span class="nv">node</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">bfs-iter</span> <span class="nv">new-q</span> <span class="nv">visited</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">bfs-iter</span> <span class="p">(</span><span class="nf">ins-items</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">node</span><span class="p">)</span> <span class="nv">new-q</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">node</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">visited</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">n</span><span class="p">)))))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">bfs-iter</span> <span class="p">(</span><span class="nf">ins</span> <span class="nv">tree</span> <span class="nv">empty-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span>  <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">example-tree</span><span class="p">)</span>
</span><span class='line'>              <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;C&quot;</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;B&quot;</span><span class="o">.</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="o">.</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>              <span class="s">&quot;Visit-order searches a tree breadth-first and returns a</span>
</span><span class='line'><span class="s">              list of nodes and their numbers.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span>  <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">five-nodes</span><span class="p">)</span>
</span><span class='line'>              <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;E&quot;</span> <span class="o">.</span> <span class="mi">5</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="o">.</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="o">.</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span>   <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">twelve-nodes</span><span class="p">)</span>
</span><span class='line'>               <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;L&quot;</span> <span class="o">.</span> <span class="mi">12</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;K&quot;</span> <span class="o">.</span> <span class="mi">11</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;J&quot;</span> <span class="o">.</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;I&quot;</span> <span class="o">.</span> <span class="mi">9</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;H&quot;</span> <span class="o">.</span> <span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;G&quot;</span> <span class="o">.</span> <span class="mi">7</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;F&quot;</span> <span class="o">.</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="s">&quot;E&quot;</span> <span class="o">.</span> <span class="mi">5</span><span class="p">)</span>  <span class="p">(</span><span class="s">&quot;D&quot;</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span>  <span class="p">(</span><span class="s">&quot;C&quot;</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span>  <span class="p">(</span><span class="s">&quot;B&quot;</span> <span class="o">.</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;A&quot;</span> <span class="o">.</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>               <span class="s">&quot;Visit-order works on non-binary trees.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s possible to map a visit queue back to a binary tree (check out
 Michael&#8217;s <a href="https://gist.github.com/MichaelBaker/5810053">concise Haskell
 solution</a>), but I
 wanted a solution that would work for all trees. In the end, I settled for performing a second <a href="https://en.wikipedia.org/wiki/Depth-first_search">depth-first
 traversal</a>
to label nodes. This <code>walk-map</code> function works like a recursive <code>map</code>,
 traversing a nested structure and applying a function to every
 element that&#8217;s not a list:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">walk-map</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">func</span> <span class="nv">items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">apply-or-map</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">item</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">null? </span><span class="nv">item</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">pair? </span><span class="nv">item</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">apply-or-map</span> <span class="nv">item</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">func</span> <span class="nv">item</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">map </span><span class="nv">apply-or-map</span> <span class="nv">items</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span>  <span class="p">(</span><span class="nf">walk-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span> <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="s">&quot;one&quot;</span><span class="p">)</span> <span class="p">((</span><span class="nb">= </span><span class="nv">i</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot;two&quot;</span><span class="p">)</span> <span class="p">((</span><span class="nb">= </span><span class="nv">i</span> <span class="mi">3</span><span class="p">)</span> <span class="s">&quot;three&quot;</span><span class="p">)</span> <span class="p">))</span>
</span><span class='line'>              <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="p">(</span><span class="mi">3</span> <span class="p">(</span><span class="mi">1</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">3</span><span class="p">))))</span>
</span><span class='line'>              <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="s">&quot;one&quot;</span> <span class="s">&quot;two&quot;</span> <span class="p">(</span><span class="s">&quot;three&quot;</span> <span class="p">(</span><span class="s">&quot;one&quot;</span> <span class="p">(</span><span class="s">&quot;two&quot;</span><span class="p">)</span><span class="s">&quot;two&quot;</span><span class="p">)</span> <span class="s">&quot;one&quot;</span> <span class="s">&quot;three&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a convenience function to store node order in a hash set:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">make-label-map</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">labels</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">label-map</span> <span class="p">(</span><span class="nf">make-hash</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">define </span><span class="nv">add-labels</span>
</span><span class='line'>        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">labels</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">labels</span><span class="p">)</span>
</span><span class='line'>              <span class="nv">label-map</span>
</span><span class='line'>              <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">node</span>   <span class="p">(</span><span class="nb">car </span> <span class="p">(</span><span class="nb">car </span><span class="nv">labels</span><span class="p">)))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">number</span> <span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nb">car </span><span class="nv">labels</span><span class="p">))))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">hash-set!</span> <span class="nv">label-map</span> <span class="nv">node</span> <span class="nv">number</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">add-labels</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">labels</span><span class="p">))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">add-labels</span> <span class="nv">labels</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">label-map</span> <span class="p">(</span><span class="nf">make-label-map</span> <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">example-tree</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="s">&quot;A&quot;</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="s">&quot;B&quot;</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="s">&quot;C&quot;</span><span class="p">)</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="s">&quot;D&quot;</span><span class="p">)</span> <span class="mi">3</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And at long last, a solution for breadth-first numbering: calculate
node order, then map over the tree to apply the labels:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">number-tree</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tree</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">label-map</span> <span class="p">(</span><span class="nf">make-label-map</span> <span class="p">(</span><span class="nf">visit-order</span> <span class="nv">tree</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">walk-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">node</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">equal? </span><span class="s">&quot;leaf&quot;</span> <span class="nv">node</span><span class="p">)</span>
</span><span class='line'>                                   <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                               <span class="p">(</span><span class="nf">hash-ref</span> <span class="nv">label-map</span> <span class="nv">node</span><span class="p">)))</span>
</span><span class='line'>                <span class="nv">tree</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">number-tree</span> <span class="nv">example-tree</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="p">(</span><span class="mi">2</span> <span class="s">&quot;leaf&quot;</span> <span class="p">(</span><span class="mi">4</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">))</span> <span class="p">(</span><span class="mi">3</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">number-tree</span> <span class="nv">five-nodes</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="p">(</span><span class="mi">2</span> <span class="p">(</span><span class="mi">4</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)</span> <span class="p">(</span><span class="mi">5</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">))</span> <span class="p">(</span><span class="mi">3</span> <span class="s">&quot;leaf&quot;</span> <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">number-tree</span> <span class="nv">twelve-nodes</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span>
</span><span class='line'>                                           <span class="p">(</span><span class="mi">2</span> <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                           <span class="p">(</span><span class="mi">3</span>
</span><span class='line'>                                              <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                              <span class="p">(</span><span class="mi">4</span>
</span><span class='line'>                                                <span class="p">(</span><span class="mi">6</span> <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                                   <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                                <span class="p">(</span><span class="mi">7</span> <span class="p">(</span><span class="mi">9</span>     <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                                          <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                                   <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                                <span class="p">(</span><span class="mi">8</span> <span class="p">(</span><span class="mi">10</span>    <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                                          <span class="s">&quot;leaf&quot;</span>
</span><span class='line'>                                                          <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                                   <span class="p">(</span><span class="mi">11</span>    <span class="s">&quot;leaf&quot;</span><span class="p">)</span>
</span><span class='line'>                                                   <span class="p">(</span><span class="mi">12</span>    <span class="s">&quot;leaf&quot;</span><span class="p">)))</span>
</span><span class='line'>                                              <span class="p">(</span><span class="mi">5</span>   <span class="s">&quot;leaf&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the plus side, this solution generalizes to non-binary trees, and
is built almost entirely out of Scheme primitives. It&#8217;s not as concise
or efficient as I&#8217;d like, but I&#8217;m happy with my lazy lists and
functional queue, even if the implementation is a little long. You can
find an edited version of my solution
<a href="https://gist.github.com/ecmendenhall/5847792">here</a>, and all the code
from these posts as a Gist <a href="https://gist.github.com/ecmendenhall/5847793">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breadth-first numbering: A lazy functional queue]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-a-lazy-functional-queue/"/>
    <updated>2013-06-24T00:22:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-a-lazy-functional-queue</id>
    <content type="html"><![CDATA[<p>On the way to a <a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">breadth-first
numbering</a>
solution, I&#8217;ve built a simple functional queue and <a href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-lazy-lists/">created lazy
lists</a>
from Scheme primitives (and a couple handy macros). In this post,
I&#8217;ll bring the pieces together to create an improved queue. (And yes,
I promise I&#8217;ll actually start numbering trees sometime soon).</p>

<p>Our simple queue consisted of two lists: one for the head of the
queue, and a reversed one for the tail:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">5</span> <span class="mi">4</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our improved queue makes two changes: lazy lists and incremental
reversal. It will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="o">&#39;</span><span class="p">(((</span><span class="mi">1</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&lt;procedure:</span><span class="o">...</span><span class="nv">me/bfs/queue</span><span class="o">.</span><span class="nv">scm:106:6&gt;</span><span class="p">)</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>  <span class="p">((</span><span class="mi">5</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&lt;procedure:</span><span class="o">...</span><span class="nv">me/bfs/queue</span><span class="o">.</span><span class="nv">scm:106:6&gt;</span><span class="p">)</span> <span class="o">.</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks a little complicated, but just like the simple queue, it&#8217;s also a list of a head and
reversed tail, with each side storing the length of the associated
list. This equivalent is a little simpler:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="o">&#39;</span><span class="p">((</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span> <span class="o">.</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">5</span> <span class="mi">4</span><span class="p">))</span> <span class="o">.</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To start implementing the improvements, we need to update the
selectors to get the lists and lengths from both sides:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">empty-q</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="o">&#39;</span><span class="p">()</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="o">&#39;</span><span class="p">()</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">five-items</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span><span class="p">))</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))</span> <span class="mi">3</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lhs-len</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">lhs-len</span> <span class="nv">five-items</span><span class="p">)</span> <span class="mi">2</span>
</span><span class='line'>              <span class="s">&quot;Our lazy queue stores the length of the lists on each side.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rhs-len</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">rhs-len</span> <span class="nv">five-items</span><span class="p">)</span> <span class="mi">3</span>
</span><span class='line'>              <span class="s">&quot;Our lazy queue stores the length of the lists on each side.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lhs-list</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">five-items</span><span class="p">))</span> <span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rhs-list</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">five-items</span><span class="p">))</span> <span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can write an updated insert function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">ins</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">item</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">lcons</span> <span class="nv">item</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nf">rhs-len</span> <span class="nv">queue</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">three-items</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">six-items</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">6</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">5</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">three-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">six-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                    <span class="s">&quot;Ins adds elements to the right side.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remove is a little more complicated. In the simple queue, we simply
swapped and reversed the right side. We want our improved queue to
avoid reversing long right side lists. The solution is <em>incremental
reversal</em>: rebalance the queue every time an element is removed.</p>

<p>In <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.8825">Okasaki&#8217;s implementation</a>,
this is done with functions called <code>make-queue</code> and <code>rotate</code>. Below
are my Scheme translations.</p>

<p><code>Rotate</code> reverses the right side list and concatenates it to the left.
 It&#8217;s similar to the simple queue implementation, but it uses lazy
 list operators and it&#8217;s designed to work incrementally:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rotate</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">left</span> <span class="nv">right</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">rotate-recur</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">left</span> <span class="nv">right</span> <span class="nv">accumulator</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">left</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">lcar</span> <span class="nv">right</span><span class="p">)</span> <span class="nv">accumulator</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">lcar</span> <span class="nv">left</span><span class="p">)</span> <span class="p">(</span><span class="nf">rotate-recur</span> <span class="p">(</span><span class="nf">lcdr</span> <span class="nv">left</span><span class="p">)</span>
</span><span class='line'>                                             <span class="p">(</span><span class="nf">lcdr</span> <span class="nv">right</span><span class="p">)</span>
</span><span class='line'>                                             <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">lcar</span> <span class="nv">right</span><span class="p">)</span> <span class="nv">accumulator</span><span class="p">))))))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">rotate-recur</span> <span class="nv">left</span> <span class="nv">right</span> <span class="o">&#39;</span><span class="p">())))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rotated</span> <span class="p">(</span><span class="nf">rotate</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">five-items</span><span class="p">)</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">five-items</span><span class="p">))))</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">5</span> <span class="nv">rotated</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                    <span class="s">&quot;Rotate reverses the right side list and concatenates it to the left.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Make-queue</code> implements the incremental reversal logic. Now, we no
longer wait until the head list is empty to swap and reverse. Instead,
we rotate the queue as soon as the tail list contains one more element
than the head. This keeps the queue balanced, and ensures that we
won&#8217;t run into an expensive reversal:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">make-queue</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">left</span> <span class="nv">right</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">right</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">left</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">list </span><span class="nv">left</span> <span class="nv">right</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">rotate</span> <span class="p">(</span><span class="nb">car </span><span class="nv">left</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nb">car </span><span class="nv">right</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">left</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">right</span><span class="p">)))</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">cons </span><span class="o">&#39;</span><span class="p">()</span> <span class="mi">0</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rebalanced</span> <span class="p">(</span><span class="nf">make-queue</span> <span class="p">(</span><span class="nf">left-side</span> <span class="nv">five-items</span><span class="p">)</span>
</span><span class='line'>                              <span class="p">(</span><span class="nf">right-side</span> <span class="nv">five-items</span><span class="p">))))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">5</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">rebalanced</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'> <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">rebalanced</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()</span>
</span><span class='line'>               <span class="s">&quot;Make-queue rebalances the queue when the right side is longer than the left.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To maintain a balanced queue, we&#8217;ll want to call <code>make-queue</code> on
insertion and removal. Here&#8217;s an improved insert, and a new remove:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">ins</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">item</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">make-queue</span> <span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">lcons</span> <span class="nv">item</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nf">rhs-len</span> <span class="nv">queue</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">three-items</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">six-items</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">6</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">5</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">))))))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">three-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">six-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">six-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                <span class="s">&quot;Ins adds elements to the right side and </span>
</span><span class='line'><span class="s">                 rebalances if it&#39;s longer than the left.&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rem</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">queue</span><span class="p">))</span> <span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nf">rhs-list</span> <span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>        <span class="o">&#39;</span><span class="p">()</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">lcar</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">make-queue</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">lcdr</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>                                      <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">lhs-len</span> <span class="nv">queue</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>                          <span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">removed</span> <span class="p">(</span><span class="nf">rem</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">ins</span> <span class="mi">1</span> <span class="nv">empty-q</span><span class="p">)))))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">removed</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">removed</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">rhs-list</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">removed</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>                <span class="s">&quot;Rem returns a pair: the element removed</span>
</span><span class='line'><span class="s">                 from the queue and the new queue.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, let&#8217;s add a couple convenience functions to insert and remove
multiple items:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">ins-items</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">items</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">items</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">queue</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">ins-items</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">)</span> <span class="p">(</span><span class="nf">ins</span> <span class="p">(</span><span class="nb">car </span><span class="nv">items</span><span class="p">)</span> <span class="nv">queue</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">seven-items</span> <span class="p">(</span><span class="nf">ins-items</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span><span class="p">)</span> <span class="nv">empty-q</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">7</span> <span class="p">(</span><span class="nf">lhs-list</span> <span class="nv">seven-items</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>                <span class="s">&quot;Ins-items adds multiple items to the queue.&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rem-n</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">rem-n-iter</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">queue</span> <span class="nv">items</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">reverse </span><span class="nv">items</span><span class="p">)</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">rem-n-iter</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">car </span> <span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">rem</span> <span class="nv">queue</span><span class="p">))</span> <span class="nv">items</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">rem-n-iter</span> <span class="nv">n</span> <span class="nv">queue</span> <span class="o">&#39;</span><span class="p">())))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">remove-four</span> <span class="p">(</span><span class="nf">rem-n</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">ins-items</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span><span class="p">)</span> <span class="nv">empty-q</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">remove-four</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">lhs-len</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">remove-four</span><span class="p">))</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">rhs-len</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">remove-four</span><span class="p">)))</span> <span class="mi">3</span>
</span><span class='line'>                <span class="s">&quot;Rem-n returns a list of removed items and the new queue.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next time, we&#8217;ll finally bring everything together to solve the
breadth-first numbering problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breadth-first numbering: Lazy lists]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-lazy-lists/"/>
    <updated>2013-06-24T00:15:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-lazy-lists</id>
    <content type="html"><![CDATA[<p>In my <a href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-functional-queues/">last
post</a>,
I wrote a simple functional queue as a stepping stone towards a
<a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">breadth-first-numbering</a>
solution. By using an ordered and reversed list to represent the front
and back of the queue, it&#8217;s cheap and easy to enqueue and dequeue
items. A simple queue is fine for this toy example, but it&#8217;s
inefficient, since it requires reversing the tail list whenever the
head list is empty. We can do better with two improvements: lazy lists
and incremental reversal.</p>

<p>Clojure&#8217;s lazy seqs seemed powerful and mysterious until I read
through <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5">chapter
3</a>
of SICP. Building a lazy list is based on two simple operations,
<code>delay</code> and <code>force</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">delay</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
</span><span class='line'>    <span class="p">((</span><span class="k">delay </span><span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="nv">form</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">force</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">delayed</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">delayed</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">add-ones</span> <span class="p">(</span><span class="k">delay </span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-pred</span> <span class="nv">procedure?</span> <span class="nv">add-ones</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">force </span><span class="nv">add-ones</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Delay</code> wraps a form in an anonymous function of no arguments. It can
be stored and passed around like any other list, but won&#8217;t perform the
computation &#8220;stored&#8221; inside until it&#8217;s evaluated. <code>Force</code> is the
opposite of delay, forcing a delayed form to evaluate. From these two
basics, we can build a lazy versions of <code>cons</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">lcons</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
</span><span class='line'>    <span class="p">((</span><span class="nf">lcons</span> <span class="nv">item</span> <span class="nv">items</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">item</span> <span class="p">(</span><span class="k">delay </span><span class="nv">items</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Racket&#8217;s macro system uses <a href="http://blog.racket-lang.org/2011/04/writing-syntax-case-macros.html">syntax-case
 macros</a>,
which are a little different from the comma-spliced <code>defmacro</code> beasts you know
 and love from Common Lisp and Clojure. In addition to enforcing <a href="https://en.wikipedia.org/wiki/Hygienic_macros">good
 hygiene</a>,
the syntax-case macro system works by pattern matching against syntax
 objects. In <code>lcons</code>, any form that matches the pattern <code>(lcons item
 items)</code> is mapped to <code>(cons item (delay items))</code>. In the <code>delay</code>
 macro above, anything matching <code>(delay form)</code> maps to <code>(lambda ()
 form)</code>. We&#8217;re still defining the ways we want to
 change the syntax of our program, but the transformation is applied
 at a different level: to syntax objects instead of raw s-expressions.</p>

<p>With <code>lcons</code> finished, it&#8217;s easy to create lazy lists:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">llist</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="nv">items</span><span class="p">)</span>
</span><span class='line'>        <span class="o">&#39;</span><span class="p">()</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">car </span><span class="nv">items</span><span class="p">)</span> <span class="p">(</span><span class="nf">llist</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lazy</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-pred</span> <span class="nv">pair?</span> <span class="nv">lazy</span>
</span><span class='line'>            <span class="s">&quot;A lazy list is a pair: the head of the list and a delayed</span>
</span><span class='line'><span class="s">            function.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lazy</span><span class="p">)</span> <span class="mi">1</span>
</span><span class='line'>               <span class="s">&quot;A lazy list stores its head as the first item of a</span>
</span><span class='line'><span class="s">               pair.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-pred</span> <span class="nv">procedure?</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lazy</span><span class="p">)</span>
</span><span class='line'>            <span class="s">&quot;A lazy list stores a delayed function as the second item</span>
</span><span class='line'><span class="s">            of a pair.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="p">((</span><span class="nb">cdr </span><span class="nv">lazy</span><span class="p">)))</span> <span class="mi">2</span>
</span><span class='line'>               <span class="s">&quot;Evaluating the delayed function returns the next item</span>
</span><span class='line'><span class="s">               in the list.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as eager lists are composed of nested pairs, lazy lists are
composed of nested, <em>delayed</em> pairs:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">eager-list</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">2</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">3</span> <span class="p">(</span><span class="nb">cons </span><span class="mi">4</span> <span class="o">&#39;</span><span class="p">())))))</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="nv">eager-list</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lazy-list</span> <span class="p">(</span><span class="nf">lcons</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">lcons</span> <span class="mi">2</span> <span class="p">(</span><span class="nf">lcons</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">lcons</span> <span class="mi">4</span> <span class="o">&#39;</span><span class="p">())))))</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&lt;procedure:</span><span class="o">...</span><span class="nv">me/bfs/queue</span><span class="o">.</span><span class="nv">scm:106:6&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like a normal list, the <code>car</code> of each pair is the list item, and the
  <code>cdr</code> represents the rest of the list. But it doesn&#8217;t return the
  next pair until it&#8217;s evaluated:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lazy-list</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lazy-list</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="nv">&lt;procedure:</span><span class="o">...</span><span class="nv">queue</span><span class="o">.</span><span class="nv">scm:106:6&gt;</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">((</span><span class="nb">cdr </span><span class="nv">lazy-list</span><span class="p">))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&lt;procedure:</span><span class="o">...</span><span class="nv">queue</span><span class="o">.</span><span class="nv">scm:106:6&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this behavior in mind, we can write lazy <code>car</code> and lazy <code>cdr</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lcar</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">llist</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">car </span><span class="nv">llist</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">lcar</span> <span class="nv">lazy</span><span class="p">)</span> <span class="mi">1</span>
</span><span class='line'>              <span class="s">&quot;Lazy-car is just like regular car!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">lcdr</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">llist</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">force </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">llist</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">lcdr</span> <span class="nv">lazy</span><span class="p">))</span> <span class="mi">2</span>
</span><span class='line'>              <span class="s">&quot;Lazy-cdr forces evaluation of the next list element.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A <code>take-n</code> function is also handy for converting lazy lists back to
eager ones:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">take-n</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">lazy-list</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">n</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">lcar</span> <span class="nv">lazy-list</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">take-n</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">lcdr</span> <span class="nv">lazy-list</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">take-n</span> <span class="mi">4</span> <span class="p">(</span><span class="nf">llist</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>              <span class="s">&quot;Take-n returns the first n elements of a lazy list.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it! We&#8217;ve written all the basics necessary for lazy lists.
(For a few more lazy-fied list operations, see <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5.1">section 3.5.1</a>
of SICP).</p>

<p>Finally, we should make one important optimization. Over the course of
list operations like <code>lcdr</code>, the same delayed form can be called many
times. If the delayed computation is simple, this won&#8217;t be noticeably
inefficient. In our case, we&#8217;re just storing values that are
immediately returned (integers in these examples, and eventually some
node representation in our numbering solution). But there&#8217;s no
guarantee that delayed computations will be cheap! We could put
functions in a lazy list just as easily:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&lt;procedure:</span><span class="o">...</span><span class="nv">queue</span><span class="o">.</span><span class="nv">scm:106:6&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And those functions could require a lot of work:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">read-book</span> <span class="s">&quot;Finnegans Wake&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">read-book</span> <span class="s">&quot;In Search of Lost Time&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">lcons</span> <span class="p">(</span><span class="nf">read-book</span> <span class="s">&quot;Gravity&#39;s Rainbow&quot;</span><span class="p">))))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;riverrun, past Eve and Adam&#39;s...&quot;</span> <span class="o">.</span> <span class="o">#</span><span class="nv">&lt;procedure:</span><span class="o">...</span><span class="nv">read</span><span class="o">.</span><span class="nv">scm:10:5&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In practice, we should memoize lazy computations, so subsequent calls
look up their previously computed values. It&#8217;s an easy fix:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">memoize</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">func</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">already-run?</span> <span class="no">#f</span><span class="p">)</span> <span class="p">(</span><span class="nf">result</span> <span class="no">#f</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="nv">already-run?</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="k">begin </span><span class="p">(</span><span class="k">set! </span><span class="nv">result</span> <span class="p">(</span><span class="nf">func</span><span class="p">))</span>
</span><span class='line'>                   <span class="p">(</span><span class="k">set! </span><span class="nv">already-run?</span> <span class="no">#t</span><span class="p">)</span>
</span><span class='line'>                   <span class="nv">result</span><span class="p">)</span>
</span><span class='line'>             <span class="nv">result</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">delay</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
</span><span class='line'>    <span class="p">((</span><span class="k">delay </span><span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nf">memoize</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="nv">form</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we&#8217;ve written lazy lists, we can use them to build an
efficient functional queue for the breadth-first numbering problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breadth-first numbering: Functional queues]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-functional-queues/"/>
    <updated>2013-06-24T00:14:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/24/breadth-first-numbering-functional-queues</id>
    <content type="html"><![CDATA[<p>I spent some time this weekend (okay fine, most of Saturday and
Sunday afternoon) on an exercise <a href="https://twitter.com/Twernmilt">Michael
Baker</a> shared on our &#8220;geeks&#8221; mailing
list. The problem is a <a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">functional
pearl</a>
from Chris Okasaki: given a binary tree, reproduce a structurally
identical tree with its nodes numbered in breadth-first order.</p>

<p>For example, numbering this tree:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_       a
</span><span class='line'>       / \
</span><span class='line'>      /   \
</span><span class='line'>    b       d
</span><span class='line'>   / \     / \
</span><span class='line'>  .   c   .   .
</span><span class='line'>     / \
</span><span class='line'>    .   .</span></code></pre></td></tr></table></div></figure>


<p>Should yield this tree:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_       1
</span><span class='line'>       / \
</span><span class='line'>      /   \
</span><span class='line'>    2       3
</span><span class='line'>   / \     / \
</span><span class='line'>  .   4   .   .
</span><span class='line'>     / \
</span><span class='line'>    .   .</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;ve ever solved a search problem, this might sound stupid easy.
But getting the details of a functional solution right can be a challenge. As Okasaki
puts it in <a href="http://www.cs.tufts.edu/~nr/cs257/archive/chris-okasaki/breadth-first.pdf">the paper</a>:</p>

<blockquote><p>…I presented the problem to many other
functional programmers and was continually amazed at the
baroque solutions I received in reply. With only a single
exception, everyone who came near a workable answer went
in a very different direction from my solution right from the
very beginning of the design process. I gradually realized
that I was witnessing some sort of mass mental block, a
communal blind spot, that was steering programmers away
from what seemed to be a very natural solution.</p></blockquote>

<p>Before you read my baroque solution, you might want to try for
yourself. I&#8217;ll wait.</p>

<p>Although I love Clojure, using built-in <a href="http://stackoverflow.com/questions/2493996/hidden-features-of-clojure">queues</a>
and <a href="http://clojure.org/lazy">lazy seqs</a> felt like cheating. So I chose
to use <a href="http://racket-lang.org/">Racket</a> with
<a href="http://docs.racket-lang.org/rackunit/api.html#%28part._.Checks%29">Rackunit</a>,
and tried to use as many primitives as possible.</p>

<p>Breadth-first traversal is easy with a queue, but an efficient
functional queue can be tricky. Consing an element to the front of a
Scheme list is cheap, but appending is expensive—it requires &#8220;cdring
down&#8221; over all the elements. One solution (cribbed from <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.8825">Okasaki
himself</a>)
is to represent a queue as a pair of lists. The list on the left is
the head of the queue, so elements can be popped of in O(1) time. The
right side represents the rest of the elements <em>in reverse</em>, so
elements can be pushed on to the end in constant time. Here are the first
steps towards an implementation: an empty queue with left and right selectors.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">simple-q</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">empty-queue</span> <span class="o">&#39;</span><span class="p">(()()))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="nv">empty-queue</span> <span class="o">&#39;</span><span class="p">(()</span> <span class="p">())</span>
</span><span class='line'>              <span class="s">&quot;An empty queue is a list containing two empty lists.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">right-side</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">right-side</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>              <span class="s">&quot;The right side of a queue is the second list.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">left-side</span> <span class="p">(</span><span class="k">lambda </span> <span class="p">(</span><span class="nf">queue</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">queue</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">left-side</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>              <span class="s">&quot;The left side of a queue is the first list.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inserting an item conses it on to the right-side list:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">insert</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">item</span> <span class="nv">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">item</span> <span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">insert</span> <span class="mi">7</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">7</span> <span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>              <span class="s">&quot;Inserting an element adds it to the beginning of the</span>
</span><span class='line'><span class="s">              right side list.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To dequeue an item, &#8220;remove&#8221; it from the left side with <code>car</code>, and
return a new queue, with the <code>cdr</code> of the left side list:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">remove</span>
</span><span class='line'> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span> <span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">remove</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="p">((</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'>              <span class="s">&quot;Removing an element returns a pair: the removed</span>
</span><span class='line'><span class="s">               element and the new queue.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the left side is out of elements, reverse the right side list,
and swap it with the left. Here&#8217;s the buildup to <code>swap-and-reverse-car</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">swap</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">)</span> <span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">swap</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'>              <span class="s">&quot;The right side and left side can be swapped.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">reverse</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">items</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="nv">items</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nf">right-side</span> <span class="nv">simple-q</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>              <span class="s">&quot;A list&#39;s elements can be reversed.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">reverse-car</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">items</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">car </span><span class="nv">items</span><span class="p">))</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">items</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">reverse-car</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="mi">3</span> <span class="mi">4</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">2</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="mi">3</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>              <span class="s">&quot;The first item in a list can be reversed.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">swap-and-reverse-car</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span> <span class="p">(</span><span class="nf">reverse-car</span> <span class="p">(</span><span class="nf">swap</span> <span class="nv">queue</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">swap-and-reverse-car</span> <span class="o">&#39;</span><span class="p">(()</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">)</span> <span class="p">())</span>
</span><span class='line'>              <span class="s">&quot;Swap and reverse-car can be composed to swap sides,</span>
</span><span class='line'><span class="s">              then reverse the left.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can write a dequeue function that really works:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">remove</span>
</span><span class='line'>   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">queue</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">remove</span> <span class="p">(</span><span class="nf">swap-and-reverse-car</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cdr </span><span class="p">(</span><span class="nf">left-side</span> <span class="nv">queue</span><span class="p">))</span> <span class="p">(</span><span class="nf">right-side</span> <span class="nv">queue</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">remove</span> <span class="o">&#39;</span><span class="p">(()</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span> <span class="p">((</span><span class="mi">5</span> <span class="mi">6</span><span class="p">)</span> <span class="p">()))</span>
</span><span class='line'>              <span class="s">&quot;To remove an element when the left side is empty, swap</span>
</span><span class='line'><span class="s">              and reverse, then try again.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">check-equal?</span> <span class="p">(</span><span class="nf">remove</span> <span class="nv">simple-q</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="p">((</span><span class="mi">2</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="mi">6</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">)))</span>
</span><span class='line'>              <span class="s">&quot;Removing an element returns a pair: the removed element</span>
</span><span class='line'><span class="s">              and the new queue.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all it takes to build a simple functional queue. Unfortunately,
it&#8217;s not very efficient. Reversing a list is the kind of O(n)
operation we built our queue to avoid in the first place, but if many
more items are inserted than removed, we&#8217;ll end up reversing and
swapping a lot. We can do better—and I&#8217;ll explain how in my next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quieter Cascalog]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/19/quieter-cascalog/"/>
    <updated>2013-06-19T21:23:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/19/quieter-cascalog</id>
    <content type="html"><![CDATA[<p>Tonight I attended a meetup on <a href="http://cascalog.org/">Cascalog</a>, a clojure DSL built on top of the <a href="https://en.wikipedia.org/wiki/Hadoop">Hadoop</a> map-reduce framework. (Slides <a href="https://docs.google.com/presentation/d/1DPD1v2sDwJ0G1LkvDwSzg9H4y26ce6j1l1zeu8t1FLo/edit?pli=1#slide=id.geccfa070_076">here</a> and code <a href="https://github.com/chairmanK/cascalog-workshop">here</a> if you&#8217;d like to check it out yourself).</p>

<p>Running huge, complicated queries with a few lines of code was
awesome, but my Hadoop installation made a lot of noise whenever I
tried a query in the REPL using the <code>?&lt;-</code> query executor, printing
lots of unwanted log info to
stdout. (I was using Hadoop
installed over homebrew
instead of the
<a href="https://github.com/chairmanK/cascalog-workshop">readme</a>
recommendation).
Fortunately, it&#8217;s easy to
hush the logger a little by
running queries inside
<code>cascalog.io/with-log-level</code>.
Here&#8217;s a quick two-line
macro that wraps calls to
<code>?&lt;-</code> in <code>with-log-level</code> to
quiet down Hadoop:</p>

<pre><code>  (require '[cascalog.io :refer [with-log-level]])
  (defmacro ?&lt;-- [&amp; forms] `(with-log-level :fatal (?&lt;- ~@forms)))
</code></pre>

<p>For future reference, you can find a gist <a href="https://gist.github.com/ecmendenhall/5819322">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why does that exist?]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/17/why-does-that-exist/"/>
    <updated>2013-06-17T00:30:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/17/why-does-that-exist</id>
    <content type="html"><![CDATA[<p>I was puzzled. Reading raw POST requests across a network socket
returned headers, but never body content. When I mentioned it to Colin
and showed him the method I suspected was misbehaving, he asked me a
question: &#8220;Why does that exist? Which test brought that line of code
into being?&#8221;</p>

<p>In a perfect TDD world, this question always has a good answer. In my
case, it didn&#8217;t: this was a complicated line that was
twice removed from the test that &#8220;created&#8221; it. But the path forward
was clear right away: write a test for this line, in isolation, the
way I should have done from the start.</p>

<p>Good test-driven development requires a lot of restraint and self-discipline, and lines
like my faulty byte reader are guaranteed to sneak in if I break one
of the laws of TDD—even if it&#8217;s only a couple lines of
support code that aren&#8217;t written just to pass a test, or a test that
looks comprehensive really trying to cover too much at once. This
question is a great way to hunt them down and fix them: ask every line
of code you write to justify its existence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making scope explicit]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/16/making-scope-explicit/"/>
    <updated>2013-06-16T23:37:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/16/making-scope-explicit</id>
    <content type="html"><![CDATA[<blockquote><p>As a young software engineer, I learned three variables by which to
manage projects: speed, quality, and price. The sponsor gets to fix
two of these variables and the team gets to estimate the third. If the
plan is unacceptable, the negotiating starts.
This model doesn&#8217;t work well in practice. Time and costs are
generally set outside the project. That leaves quality as the only
variable you can manipulate. Lowering the quality of your work doesn&#8217;t
eliminate work, it just shifts it later so delays are not clearly your
responsibility. You can create the illusion of progress this way, but
you pay in reduced satisfaction and damaged relationships.
Satisfaction comes from doing quality work.
The variable left out of this model is scope. If we make scope explicit, then we have a safe
way to adapt, we have a safe way to negotiate, we have a limit to
ridiculous and unnecessary demands.</p></blockquote>

<p>—Kent Beck, <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Edition/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1371444145&amp;sr=8-1&amp;keywords=extreme+programming">Extreme Programming
Explained</a></p>

<p>I spent all last week working on my <a href="https://github.com/ecmendenhall/schtitt">web
server</a>. It&#8217;s a fun project
so far, filled with the joy of taking something apart and looking
inside to see how it works, but it&#8217;s also been a challenge: I had a
long checklist of features to implement and only a week to get them
all working.</p>

<p>Even though I was still frantically coding on the train to work the
day of my demo, I managed to check off all the boxes. Like the 100% test
coverage my project reported, 100% box coverage felt great—like the
satisfaction of crossing the last item off a long to-do list. But as
any test-driven developer knows, even 100% test coverage can&#8217;t
guarantee that a project will work. This week I learned that box coverage is the same: ticking
off features is no guarantee of quality.</p>

<p>Sure, my server met the requirements, but much of the code wasn&#8217;t
pretty, and I knew it. And though I was proud of the progress I made and looking
forward to showing off my work, the demo went
off the rails early on, when the server hung and crashed trying to handle
concurrent connections. (If you&#8217;re thinking of using <code>Thread.run()</code>,
you probably want <code>Thread.start()</code>, by the way). In an instant, all
the little details I&#8217;d put effort into—nice looking directory pages,
support for extra headers and obscure content types, clean request
parsing under the hood— were outweighed by one big defect.</p>

<p>The attitude towards quality at 8th Light is clear: quality is
non-negotiable, we will never ship software with known defects, and
when an unknown one slips by, we&#8217;ll fix it for free. That leaves scope
as the only free variable in the planning and development process.
Although the scope of my web server project was already explicit, I
didn&#8217;t do a good job negotiating. In retrospect, it&#8217;s clear that
showing a clean, stable server that only handles GET requests is a
greater accomplishment than one with extra bells and whistles that&#8217;s
prone to random catastrophic failure. But it sure felt good to check
  off all those boxes.</p>

<p>I&#8217;ve learned two lessons over the last week: first, quality and stability matter most. Never sacrifice
quality, and never ever tolerate unstable code. Second, renegotiating
and giving feedback is part of making scope explicit. Trading off
  quality for features is guaranteed to be a bad bargain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstraction barriers big and small]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/10/abstraction-barriers-big-and-small/"/>
    <updated>2013-06-10T01:37:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/10/abstraction-barriers-big-and-small</id>
    <content type="html"><![CDATA[<p>Working on my HTTP server has required me to learn a little more about
the technology that makes the web work. At the outset, I had only the vaguest notion
of what a socket was, but once I saw a diagram of the TCP/IP <a href="http://www.sis.pitt.edu/~icucart/networking_basics/4LayersofTCPIPModel.html">layer
model</a>,
it was clear—a socket is an abstraction. (More on the model
<a href="https://en.wikipedia.org/wiki/Internet_Protocol_Suite#Layers_in_the_Internet_protocol_suite">here</a>).</p>

<p>I was reminded right away of the diagram in <a href="http://ecmendenhall.github.io/sicpclojure/pages/14.html#sec_2.1.2">Chapter
2.1</a>
of <a href="https://mitpress.mit.edu/sicp/">SICP</a> (the section on building
a rational number arithmetic system). It&#8217;s not a coincidence:
enforcing abstraction between layers is one reason the Internet and
TCP/IP are such powerful tools. Any system that does anything
interesting is necessarily composed of smaller
parts. Whether they&#8217;re functions, objects, or
<a href="https://en.wikipedia.org/wiki/Logic_programming">sentences</a>, the way
they&#8217;re put together
<a href="http://ecmendenhall.github.io/blog/blog/2013/05/10/enforcing-bottom-up-design/">matters</a>.
But equally important is the way they interact, and how they&#8217;re separated.
(Network protocols give <a href="https://en.wikipedia.org/wiki/Robustness_Principle">good
advice</a> on this,
too.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shitty first drafts]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/10/shitty-first-drafts/"/>
    <updated>2013-06-10T01:03:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/10/shitty-first-drafts</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;Very few writers really know what they are doing until they&#8217;ve done it. Nor do
they go about their business feeling dewy and thrilled. They do not type a few stiff
warm-up sentences and then find themselves bounding along like huskies across the
snow. One writer I know tells me that he sits down every morning and says to
himself nicely, &#8220;It&#8217;s not like you don&#8217;t have a choice, because you do &#8211; you can
either type, or kill yourself.&#8221; We all often feel like we are pulling teeth, even those
writers whose prose ends up being the most natural and fluid. The right words and
sentences just do not come pouring out like ticker tape most of the time. […] For me and
most of the other writers I know, writing is not rapturous. In fact, the only way I can get
anything written at all is to write really, really shitty first drafts.&#8221;</p></blockquote>

<p>–Anne Lamott on <a href="http://wrd.as.uky.edu/sites/default/files/1-Shitty%20First%20Drafts.pdf">shitty first drafts</a>, from <a href="http://www.amazon.com/Bird-Some-Instructions-Writing-Life/dp/0385480016/ref=sr_1_1?ie=UTF8&amp;qid=1370844305&amp;sr=8-1&amp;keywords=bird+by+bird"><em>Bird By Bird</em></a></p>

<p>This is supposed to be a professional blog, but I hope you&#8217;ll pardon
this bit of language, which comes with some of the best and dearest
 advice on professionalism I&#8217;ve read.</p>

<p>At the end of last week, I moved on to the second project of my
  apprenticeship: writing a simple HTTP server from scratch.
  Starting the project was not rapturous. I knew the basics—model the
  filesystem, connect over a socket, and transfer specially-formatted
  text back and forth—but had no idea where to start or what test to
  write first. I read up on sockets, browsed through the HTTP spec,
  and stared dumbly into IntelliJ for a while, and at long last, I
  started typing. What Anne Lamott calls &#8220;shitty first drafts&#8221; the TDD
  world calls
  <a href="http://stackoverflow.com/questions/249969/why-are-tdd-spikes-called-spikes">&#8220;spikes&#8221;</a>—short
  experiments, sometimes without tests, to figure out what to work on
  next. A spike is like a &#8220;child&#8217;s draft,&#8221; allowed to run wild and
  break things on condition that it will be thrown out and replaced
  with something decent (and well-tested).</p>

<p>Of course, as soon as I had a few lines of code down, the ideas
  started to flow (I started by parsing headers, by the way), and
  within an hour I had a feature-complete <a href="https://en.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol">HTCPCP server</a> (HTTP is still a work in progress). Another reminder that programming is craft, and writing code really is a creative act.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The N-Taps problem]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/10/the-n-taps-problem/"/>
    <updated>2013-06-10T00:20:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/10/the-n-taps-problem</id>
    <content type="html"><![CDATA[<p>This week, I was introduced to Hopleaf, a craft beer bar in Chicago with 60 rotating taps. One of my favorite bars in Tucson, 1702, was similar. But every time I visited, I would face a dilemma: I usually only visit twice a month, and drink 3±1 beers each time. As a reformed economist, I insist on optimizing every decision I make, and with each beer I order, I face a trade-off between tasting a new beer of uncertain quality or choosing my favorite so far. If I want to maximize expected utility for each month&#8217;s visits, what is my best strategy? How many beers should I spend exploring for better ones, and how many should I spend enjoying my favorite?</p>

<p>Richard Feynman posed <a href="http://www.feynmanlectures.info/exercises/Feynmans_restaurant_problem.html">this problem</a> in the context of finding the best dish at a new restaurant. (But beers are way more interesting). The <a href="http://www.feynmanlectures.info/solutions/restaurant_problem_sol_1.html">solution</a> makes sense (and come on, it&#8217;s Richard Feynman), but I wanted to check his work with a simulation.</p>

<p>You can find the results (and the rest of this post) in <a href="http://nbviewer.ipython.org/5229689">this iPython notebook</a>. There&#8217;s much more there, including an interesting result!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Long methods]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-long-methods/"/>
    <updated>2013-06-03T01:28:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-long-methods</id>
    <content type="html"><![CDATA[<p>Martin Fowler identifies long methods as another common code smell, fixable by breaking one long method into several smaller ones and composing them together. Since <em>Clean Code</em> emphasized writing short, meaningful methods, I had to look a bit to find one. But I&#8217;m not very happy with the board coordinate constructor:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">UniversalBoardCoordinate</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">noParens</span> <span class="o">=</span> <span class="n">locationPhrase</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;(&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="n">noParens</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">coordinates</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidCoordinateException</span><span class="o">(</span><span class="s">&quot;That&#39;s not a valid board location.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">row</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'><span class="err">        </span><span class="n">column</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an easy refactor: think about what each line of code does, group the related ones in their own methods, and replace them. In fact, I&#8217;d already separated each group with a line break. The first two trim the input string and split it in two:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Integer</span><span class="o">[]</span> <span class="nf">parseString</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">noParens</span> <span class="o">=</span> <span class="n">locationPhrase</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;(&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="n">noParens</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">checkValidity</span><span class="o">(</span><span class="n">coordinates</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="n">parseCoordinates</span><span class="o">(</span><span class="n">coordinates</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next two check whether the result is valid:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkValidity</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">coordinates</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidCoordinateException</span><span class="o">(</span><span class="s">&quot;That&#39;s not a valid board location.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">And</span> <span class="n">the</span> <span class="n">last</span> <span class="n">two</span> <span class="n">convert</span> <span class="n">the</span> <span class="n">strings</span> <span class="n">to</span> <span class="nl">integers:</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Integer</span><span class="o">[]</span> <span class="nf">parseCoordinates</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">trim</span><span class="o">()),</span>
</span><span class='line'><span class="err">                               </span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">trim</span><span class="o">())</span> <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the details of string manipulation are hidden in helper methods, the complicated constructor looks trivial:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">UniversalBoardCoordinate</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Integer</span><span class="o">[]</span> <span class="n">orderedPair</span> <span class="o">=</span> <span class="n">parseString</span><span class="o">(</span><span class="n">locationPhrase</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">row</span> <span class="o">=</span> <span class="n">orderedPair</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="err">        </span><span class="n">column</span> <span class="o">=</span> <span class="n">orderedPair</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Refused-ish bequest]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-refused-ish-bequest/"/>
    <updated>2013-06-03T01:04:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-refused-ish-bequest</id>
    <content type="html"><![CDATA[<p>Before finishing up the first version of my terminal view game, I moved strings like the welcome message and player prompts to a <a href="http://docs.oracle.com/javase/tutorial/essential/environment/properties.html">properties file</a>. This requires reading and storing the strings before using them in the view, but has two big advantages. First, tests no longer break when I edit a string (at least, as long as my tests are using the same properties). Second, if I wanted to translate my program into another language, it&#8217;s as easy as swapping out the properties file.</p>

<p>Unfortunately, loading strings got ugly fast. Here&#8217;s an example from the <code>GameController</code> class:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameController</span> <span class="kd">implements</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">welcome</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">yourMove</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">yourMoveThreeSquares</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">gameOverDraw</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">gameOverWin</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">xWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">oWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">boardSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">GameController</span><span class="o">(</span><span class="n">View</span> <span class="n">gameView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">view</span> <span class="o">=</span> <span class="n">gameView</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameBoard</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p> 
 It gets worse. When I started writing my Swing view, I needed to ignore certain strings, like those that prompt for keyboard input. A good idea: avoid creating a brand new SwingController class, but somehow filter out unneeded strings. A bad idea: do it by checking and ignoring certain strings from the controller. This is logic that really shouldn&#8217;t be in the view, implemented in a very fragile way. In fact, it undoes all the abstraction of the properties file—as soon as a string changes, <code>displayMessage()</code> will probably break. Plus, there&#8217;s plenty of duplicated code.</p>

<p> </p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err"> </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwingView</span> <span class="kd">extends</span> <span class="n">JFrame</span> <span class="kd">implements</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">boardSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ignoreThese</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">SwingView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">divider</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">playAgain</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">choosePlayerOne</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">choosePlayerTwo</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">boardSize</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">displayMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;move&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="kt">int</span> <span class="n">endStart</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;player&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="mi">6</span><span class="o">;</span>
</span><span class='line'><span class="err">            </span><span class="n">String</span> <span class="n">ending</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">endStart</span><span class="o">);</span>
</span><span class='line'><span class="err">            </span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;Your move, player&quot;</span> <span class="o">+</span> <span class="n">ending</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">return</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">        </span><span class="n">JLabel</span> <span class="n">messageLabel</span> <span class="o">=</span> <span class="n">messagePanel</span><span class="o">.</span><span class="na">getLabel</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">messageLabel</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="err"> </span>  <span class="o">}</span><span class="err">   </span>
</span><span class='line'><span class="err"> </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p> 
 This is similar, though not identical to Fowler&#8217;s &#8220;Refused bequest,&#8221; where a subclass inherits lots of methods and then ignores them. Here&#8217; I&#8217;m loading lots of strings, then ignoring them.
 
 Refused bequest is fixed with a refactor called &#8220;Replace inheritance with delegation:&#8221; put the superclass in a field on the old subclass, remove the inheritance, and simply delegate to the superclass methods when needed. Here, I haven&#8217;t even shared code through inheritance, but by good old copy-and-paste (so it&#8217;s also part of the duplicated code stink parade).
 
 The cleanup strategy here is similar too: create a separate class to handle loading properties, and use it in place of the duplicated methods. I&#8217;ll start by creating a <code>StringLoader</code> class that includes the duplicated fields and methods:
 
 </p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err"> </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">welcome</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">yourMove</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">yourMoveThreeSquares</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">gameOverDraw</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">gameOverWin</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">xWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">oWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">boardSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="kc">null</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of all these fields, storing strings in a map is much cleaner:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The repeated calls to <code>viewStrings.getProperty()</code> are still pretty ugly and very difficult to read. One solution is to extract a <code>load()</code> method, then iterate over an array of the property names:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">Properties</span> <span class="n">viewStringProperties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">load</span><span class="o">(</span><span class="n">String</span> <span class="n">propertyName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">propertyString</span> <span class="o">=</span> <span class="n">viewStringProperties</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">propertyName</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">propertyName</span><span class="o">,</span> <span class="n">propertyString</span><span class="o">)</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStringProperties</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">exception</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">properties</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;welcome&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;divider&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;yourmove&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;playagain&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;gameoverwin&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;xwins&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;owins&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;boardsize&quot;</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">property</span> <span class="o">:</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">load</span><span class="o">(</span><span class="n">property</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, let&#8217;s replace the hardcoded filepath by passing a path to the view constructor (and on to the <code>loadViewStrings()</code> method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">StringLoader</span><span class="o">(</span><span class="n">String</span> <span class="n">filepath</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">      </span><span class="n">loadViewStrings</span><span class="o">(</span><span class="n">filepath</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, reading in strings from the properties file looks like this, instead of the forty-line monster we started with:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameController</span> <span class="kd">implements</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=</span>
</span><span class='line'><span class="err">    </span>  <span class="k">new</span> <span class="n">StringLoader</span><span class="o">().</span><span class="na">getViewStrings</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use a string, I can just get it from the map:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">viewStrings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This requires trading off a little clarity, but on balance it&#8217;s much cleaner. Best of all, now I can use properties as they were intended. Preventing my view from displaying certain strings just requires creating a new properties file and removing the content from the unneeded messages—another win for decoupling and abstraction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Duplicated code]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/02/refactoring-examples-duplicated-code/"/>
    <updated>2013-06-02T20:56:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/02/refactoring-examples-duplicated-code</id>
    <content type="html"><![CDATA[<p>I&#8217;ve spent the last couple weeks working through <a href="http://martinfowler.com/">Martin Fowler&#8217;s</a> <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1370238910&amp;sr=8-1&amp;keywords=refactoring"><em>Refactoring</em></a>, which includes a taxonomy of useful solutions to common code smells. It&#8217;s an excellent book, but I found it hard to recognize and remember some of the patterns without digging into my own  code. Over the next few posts, I&#8217;ll describe some of the smells and refactors I found in my Tic Tac Toe game (as much to commit them to my own memory as to share them with others). First up, the most common code smell of all: duplication.</p>

<p>Despite using a <a href="https://github.com/ecmendenhall/Java-TTT/blob/master/test/com/cmendenhall/tests/TicTacToeTest.java">superclass</a> to store static methods and data
used by all my tests, I wasn&#8217;t using inheritance to create universal setup and teardown methods. Although many of my tests used a similar pattern to capture output, none were quite alike, and all of them were pretty messy. Here&#8217;s an example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JUnit4</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">MockTerminalView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MockTerminalView</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">GameController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameController</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kd">final</span> <span class="n">PrintStream</span> <span class="n">stdout</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kd">final</span> <span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">PrintStream</span> <span class="n">outputStream</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">OutputRecorder</span> <span class="n">outputRecorder</span><span class="o">;</span>
</span><span class='line'><span class="err">  </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Before</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">outputRecorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">Player</span> <span class="n">playerOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HumanPlayer</span><span class="o">(</span><span class="n">X</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">Player</span> <span class="n">playerTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MinimaxPlayer</span><span class="o">(</span><span class="n">O</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerOne</span><span class="o">(</span><span class="n">playerOne</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerTwo</span><span class="o">(</span><span class="n">playerTwo</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="nd">@Test</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">controllerShouldStartNewGame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputRecorder</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">welcome</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">divider</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="n">GameOverException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">controllerShouldEndGameOnRestartIfInputIsNo</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">GameOverException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputStream</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;n&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">restartGame</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">playAgain</span><span class="o">,</span> <span class="n">output</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>These tests use both a plain <code>PrintStream</code> and my custom <code>OutputRecorder</code>, though they don&#8217;t really need to. Some setup is done in the fields, and some during <code>setUp()</code>, though there&#8217;s no clear reason why. And the same lines setting up and tearing down the recorder are repeated across lots of tests. The smell here is duplicated code, which Fowler calls &#8220;number one in the stink parade.&#8221; To solve it, I&#8217;ll start by extracting a method, and then extracting a superclass.</p>

<p>First, I&#8217;ll create an empty <code>TicTacToeTest</code> class with empty setup and teardown methods.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JUnit4</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TicTacToeTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Before</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@After</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cleanUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, extract a <code>setUpRecorder()</code> method including all the setup-related lines:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>            <span class="kd">private</span> <span class="n">OutputRecorder</span> <span class="n">recorder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setUpRecorder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>            <span class="err">        </span><span class="n">PrintStream</span> <span class="n">stdout</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>            <span class="err">        </span><span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>            <span class="err">        </span><span class="n">recorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Then, a <code>startRecorder()</code> method to replace calls to <code>System.setOut()</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>            <span class="kd">private</span><span class="err"> </span><span class="kt">void</span><span class="err"> </span><span class="n">startRecorder</span><span class="o">()</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">recorder</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This method might seem short, but I find <code>startRecorder()</code> much easier to read. Now that these methods are implemented, I can plug them into the tests:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>              <span class="nd">@Before</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>              <span class="err">    </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'>              <span class="err">    </span>
</span><span class='line'>              <span class="err">    </span><span class="n">setUpRecorder</span><span class="o">();</span>
</span><span class='line'>              <span class="err">    </span>
</span><span class='line'>              <span class="err">    </span><span class="n">Player</span> <span class="n">playerOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HumanPlayer</span><span class="o">(</span><span class="n">X</span><span class="o">);</span>
</span><span class='line'>              <span class="err">    </span><span class="n">Player</span> <span class="n">playerTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MinimaxPlayer</span><span class="o">(</span><span class="n">O</span><span class="o">);</span>
</span><span class='line'>              <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerOne</span><span class="o">(</span><span class="n">playerOne</span><span class="o">);</span>
</span><span class='line'>              <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerTwo</span><span class="o">(</span><span class="n">playerTwo</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="nd">@Test</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">controllerShouldStartNewGame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">startRecorder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">welcome</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'>                  <span class="err">    </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">divider</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The last line of the second test was meant as a mini-teardown, to reset stdout before the next test. I wrote it before I understood JUnit execution, in which each test runs in its own environment. It survived around 80 commits, but it doesn&#8217;t actually do anything, so I can safely delete it. (I know because none of the tests fail afterwards). In fact, this whole refactor should be possible while keeping the tests green.</p>

<p>After searching for usages of the old pattern and replacing them with the new methods, there&#8217;s just one thing left: pull up the new methods to a Test superclass. Here&#8217;s the result:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>                  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TicTacToeTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="kd">protected</span> <span class="n">OutputRecorder</span> <span class="n">recorder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">setUpRecorder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>                  <span class="err">        </span><span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>                  <span class="err">        </span><span class="n">recorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">startRecorder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">recorder</span><span class="o">);</span>
</span><span class='line'>                  <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="nd">@Before</span>
</span><span class='line'>                  <span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">recorderSetUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>                  <span class="err">        </span><span class="n">setUpRecorder</span><span class="o">();</span>
</span><span class='line'>                  <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This looks like a simple refactor, but my tests are now much cleaner. More important, if I need to make a change to the <code>OutputRecorder</code> class, it will propagate through all tests.</p>
]]></content>
  </entry>
  
</feed>
