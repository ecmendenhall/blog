<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Connor Mendenhall]]></title>
  <link href="http://ecmendenhall.github.io/blog/atom.xml" rel="self"/>
  <link href="http://ecmendenhall.github.io/blog/"/>
  <updated>2013-06-17T01:15:22-05:00</updated>
  <id>http://ecmendenhall.github.io/blog/</id>
  <author>
    <name><![CDATA[Connor Mendenhall]]></name>
    <email><![CDATA[ecmendenhall@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why does that exist?]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/17/why-does-that-exist/"/>
    <updated>2013-06-17T00:30:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/17/why-does-that-exist</id>
    <content type="html"><![CDATA[<p>I was puzzled. Reading raw POST requests across a network socket
returned headers, but never body content. When I mentioned it to Colin
and showed him the method I suspected was misbehaving, he asked me a
question: &#8220;Why does that exist? Which test brought that line of code
into being?&#8221;</p>

<p>In a perfect TDD world, this question always has a good answer. In my
case, it didn&#8217;t: this was a complicated line that was
twice removed from the test that &#8220;created&#8221; it. But the path forward
was clear right away: write a test for this line, in isolation, the
way I should have done from the start.</p>

<p>Good test-driven development requires a lot of restraint and self-discipline, and lines
like my faulty byte reader are guaranteed to sneak in if I break one
of the laws of TDD—even if it&#8217;s only a couple lines of
support code that aren&#8217;t written just to pass a test, or a test that
looks comprehensive really trying to cover too much at once. This
question is a great way to hunt them down and fix them: ask every line
of code you write to justify its existence.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making scope explicit]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/16/making-scope-explicit/"/>
    <updated>2013-06-16T23:37:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/16/making-scope-explicit</id>
    <content type="html"><![CDATA[<blockquote><p>As a young software engineer, I learned three variables by which to
manage projects: speed, quality, and price. The sponsor gets to fix
two of these variables and the team gets to estimate the third. If the
plan is unacceptable, the negotiating starts.
This model doesn&#8217;t work well in practice. Time and costs are
generally set outside the project. That leaves quality as the only
variable you can manipulate. Lowering the quality of your work doesn&#8217;t
eliminate work, it just shifts it later so delays are not clearly your
responsibility. You can create the illusion of progress this way, but
you pay in reduced satisfaction and damaged relationships.
Satisfaction comes from doing quality work.
The variable left out of this model is scope. If we make scope explicit, then we have a safe
way to adapt, we have a safe way to negotiate, we have a limit to
ridiculous and unnecessary demands.</p></blockquote>

<p>—Kent Beck, <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Edition/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1371444145&amp;sr=8-1&amp;keywords=extreme+programming">Extreme Programming
Explained</a></p>

<p>I spent all last week working on my <a href="https://github.com/ecmendenhall/schtitt">web
server</a>. It&#8217;s a fun project
so far, filled with the joy of taking something apart and looking
inside to see how it works, but it&#8217;s also been a challenge: I had a
long checklist of features to implement and only a week to get them
all working.</p>

<p>Even though I was still frantically coding on the train to work the
day of my demo, I managed to check off all the boxes. Like the 100% test
coverage my project reported, 100% box coverage felt great—like the
satisfaction of crossing the last item off a long to-do list. But as
any test-driven developer knows, even 100% test coverage can&#8217;t
guarantee that a project will work. This week I learned that box coverage is the same: ticking
off features is no guarantee of quality.</p>

<p>Sure, my server met the requirements, but much of the code wasn&#8217;t
pretty, and I knew it. And though I was proud of the progress I made and looking
forward to showing off my work, the demo went
off the rails early on, when the server hung and crashed trying to handle
concurrent connections. (If you&#8217;re thinking of using <code>Thread.run()</code>,
you probably want <code>Thread.start()</code>, by the way). In an instant, all
the little details I&#8217;d put effort into—nice looking directory pages,
support for extra headers and obscure content types, clean request
parsing under the hood— were outweighed by one big defect.</p>

<p>The attitude towards quality at 8th Light is clear: quality is
non-negotiable, we will never ship software with known defects, and
when an unknown one slips by, we&#8217;ll fix it for free. That leaves scope
as the only free variable in the planning and development process.
Although the scope of my web server project was already explicit, I
didn&#8217;t do a good job negotiating. In retrospect, it&#8217;s clear that
showing a clean, stable server that only handles GET requests is a
greater accomplishment than one with extra bells and whistles that&#8217;s
prone to random catastrophic failure. But it sure felt good to check
  off all those boxes.</p>

<p>I&#8217;ve learned two lessons over the last week: first, quality and stability matter most. Never sacrifice
quality, and never ever tolerate unstable code. Second, renegotiating
and giving feedback is part of making scope explicit. Trading off
  quality for features is guaranteed to be a bad bargain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstraction barriers big and small]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/10/abstraction-barriers-big-and-small/"/>
    <updated>2013-06-10T01:37:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/10/abstraction-barriers-big-and-small</id>
    <content type="html"><![CDATA[<p>Working on my HTTP server has required me to learn a little more about
the technology that makes the web work. At the outset, I had only the vaguest notion
of what a socket was, but once I saw a diagram of the TCP/IP <a href="http://www.sis.pitt.edu/~icucart/networking_basics/4LayersofTCPIPModel.html">layer
model</a>,
it was clear—a socket is an abstraction. (More on the model
<a href="https://en.wikipedia.org/wiki/Internet_Protocol_Suite#Layers_in_the_Internet_protocol_suite">here</a>).</p>

<p>I was reminded right away of the diagram in <a href="http://ecmendenhall.github.io/sicpclojure/pages/14.html#sec_2.1.2">Chapter
2.1</a>
of <a href="https://mitpress.mit.edu/sicp/">SICP</a> (the section on building
a rational number arithmetic system). It&#8217;s not a coincidence:
enforcing abstraction between layers is one reason the Internet and
TCP/IP are such powerful tools. Any system that does anything
interesting is necessarily composed of smaller
parts. Whether they&#8217;re functions, objects, or
<a href="https://en.wikipedia.org/wiki/Logic_programming">sentences</a>, the way
they&#8217;re put together
<a href="http://ecmendenhall.github.io/blog/blog/2013/05/10/enforcing-bottom-up-design/">matters</a>.
But equally important is the way they interact, and how they&#8217;re separated.
(Network protocols give <a href="https://en.wikipedia.org/wiki/Robustness_Principle">good
advice</a> on this,
too.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shitty first drafts]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/10/shitty-first-drafts/"/>
    <updated>2013-06-10T01:03:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/10/shitty-first-drafts</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;Very few writers really know what they are doing until they&#8217;ve done it. Nor do
they go about their business feeling dewy and thrilled. They do not type a few stiff
warm-up sentences and then find themselves bounding along like huskies across the
snow. One writer I know tells me that he sits down every morning and says to
himself nicely, &#8220;It&#8217;s not like you don&#8217;t have a choice, because you do &#8211; you can
either type, or kill yourself.&#8221; We all often feel like we are pulling teeth, even those
writers whose prose ends up being the most natural and fluid. The right words and
sentences just do not come pouring out like ticker tape most of the time. […] For me and
most of the other writers I know, writing is not rapturous. In fact, the only way I can get
anything written at all is to write really, really shitty first drafts.&#8221;</p></blockquote>

<p>–Anne Lamott on <a href="http://wrd.as.uky.edu/sites/default/files/1-Shitty%20First%20Drafts.pdf">shitty first drafts</a>, from <a href="http://www.amazon.com/Bird-Some-Instructions-Writing-Life/dp/0385480016/ref=sr_1_1?ie=UTF8&amp;qid=1370844305&amp;sr=8-1&amp;keywords=bird+by+bird"><em>Bird By Bird</em></a></p>

<p>This is supposed to be a professional blog, but I hope you&#8217;ll pardon
this bit of language, which comes with some of the best and dearest
 advice on professionalism I&#8217;ve read.</p>

<p>At the end of last week, I moved on to the second project of my
  apprenticeship: writing a simple HTTP server from scratch.
  Starting the project was not rapturous. I knew the basics—model the
  filesystem, connect over a socket, and transfer specially-formatted
  text back and forth—but had no idea where to start or what test to
  write first. I read up on sockets, browsed through the HTTP spec,
  and stared dumbly into IntelliJ for a while, and at long last, I
  started typing. What Anne Lamott calls &#8220;shitty first drafts&#8221; the TDD
  world calls
  <a href="http://stackoverflow.com/questions/249969/why-are-tdd-spikes-called-spikes">&#8220;spikes&#8221;</a>—short
  experiments, sometimes without tests, to figure out what to work on
  next. A spike is like a &#8220;child&#8217;s draft,&#8221; allowed to run wild and
  break things on condition that it will be thrown out and replaced
  with something decent (and well-tested).</p>

<p>Of course, as soon as I had a few lines of code down, the ideas
  started to flow (I started by parsing headers, by the way), and
  within an hour I had a feature-complete <a href="https://en.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol">HTCPCP server</a> (HTTP is still a work in progress). Another reminder that programming is craft, and writing code really is a creative act.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The N-Taps problem]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/10/the-n-taps-problem/"/>
    <updated>2013-06-10T00:20:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/10/the-n-taps-problem</id>
    <content type="html"><![CDATA[<p>This week, I was introduced to Hopleaf, a craft beer bar in Chicago with 60 rotating taps. One of my favorite bars in Tucson, 1702, was similar. But every time I visited, I would face a dilemma: I usually only visit twice a month, and drink 3±1 beers each time. As a reformed economist, I insist on optimizing every decision I make, and with each beer I order, I face a trade-off between tasting a new beer of uncertain quality or choosing my favorite so far. If I want to maximize expected utility for each month&#8217;s visits, what is my best strategy? How many beers should I spend exploring for better ones, and how many should I spend enjoying my favorite?</p>

<p>Richard Feynman posed <a href="http://www.feynmanlectures.info/exercises/Feynmans_restaurant_problem.html">this problem</a> in the context of finding the best dish at a new restaurant. (But beers are way more interesting). The <a href="http://www.feynmanlectures.info/solutions/restaurant_problem_sol_1.html">solution</a> makes sense (and come on, it&#8217;s Richard Feynman), but I wanted to check his work with a simulation.</p>

<p>You can find the results (and the rest of this post) in <a href="http://nbviewer.ipython.org/5229689">this iPython notebook</a>. There&#8217;s much more there, including an interesting result!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Long methods]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-long-methods/"/>
    <updated>2013-06-03T01:28:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-long-methods</id>
    <content type="html"><![CDATA[<p>Martin Fowler identifies long methods as another common code smell, fixable by breaking one long method into several smaller ones and composing them together. Since <em>Clean Code</em> emphasized writing short, meaningful methods, I had to look a bit to find one. But I&#8217;m not very happy with the board coordinate constructor:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">UniversalBoardCoordinate</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">noParens</span> <span class="o">=</span> <span class="n">locationPhrase</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;(&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="n">noParens</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">coordinates</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidCoordinateException</span><span class="o">(</span><span class="s">&quot;That&#39;s not a valid board location.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">row</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'><span class="err">        </span><span class="n">column</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">trim</span><span class="o">());</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an easy refactor: think about what each line of code does, group the related ones in their own methods, and replace them. In fact, I&#8217;d already separated each group with a line break. The first two trim the input string and split it in two:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Integer</span><span class="o">[]</span> <span class="nf">parseString</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">noParens</span> <span class="o">=</span> <span class="n">locationPhrase</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;(&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="sc">&#39; &#39;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span> <span class="o">=</span> <span class="n">noParens</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">checkValidity</span><span class="o">(</span><span class="n">coordinates</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="n">parseCoordinates</span><span class="o">(</span><span class="n">coordinates</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next two check whether the result is valid:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">checkValidity</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">coordinates</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">throw</span> <span class="k">new</span> <span class="n">InvalidCoordinateException</span><span class="o">(</span><span class="s">&quot;That&#39;s not a valid board location.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">And</span> <span class="n">the</span> <span class="n">last</span> <span class="n">two</span> <span class="n">convert</span> <span class="n">the</span> <span class="n">strings</span> <span class="n">to</span> <span class="nl">integers:</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Integer</span><span class="o">[]</span> <span class="nf">parseCoordinates</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">coordinates</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">trim</span><span class="o">()),</span>
</span><span class='line'><span class="err">                               </span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">coordinates</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">trim</span><span class="o">())</span> <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the details of string manipulation are hidden in helper methods, the complicated constructor looks trivial:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">UniversalBoardCoordinate</span><span class="o">(</span><span class="n">String</span> <span class="n">locationPhrase</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InvalidCoordinateException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Integer</span><span class="o">[]</span> <span class="n">orderedPair</span> <span class="o">=</span> <span class="n">parseString</span><span class="o">(</span><span class="n">locationPhrase</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">row</span> <span class="o">=</span> <span class="n">orderedPair</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="err">        </span><span class="n">column</span> <span class="o">=</span> <span class="n">orderedPair</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Refused-ish bequest]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-refused-ish-bequest/"/>
    <updated>2013-06-03T01:04:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/03/refactoring-examples-refused-ish-bequest</id>
    <content type="html"><![CDATA[<p>Before finishing up the first version of my terminal view game, I moved strings like the welcome message and player prompts to a <a href="http://docs.oracle.com/javase/tutorial/essential/environment/properties.html">properties file</a>. This requires reading and storing the strings before using them in the view, but has two big advantages. First, tests no longer break when I edit a string (at least, as long as my tests are using the same properties). Second, if I wanted to translate my program into another language, it&#8217;s as easy as swapping out the properties file.</p>

<p>Unfortunately, loading strings got ugly fast. Here&#8217;s an example from the <code>GameController</code> class:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameController</span> <span class="kd">implements</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">welcome</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">yourMove</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">yourMoveThreeSquares</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">gameOverDraw</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">gameOverWin</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">xWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">oWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">boardSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">GameController</span><span class="o">(</span><span class="n">View</span> <span class="n">gameView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">view</span> <span class="o">=</span> <span class="n">gameView</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameBoard</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p> 
 It gets worse. When I started writing my Swing view, I needed to ignore certain strings, like those that prompt for keyboard input. A good idea: avoid creating a brand new SwingController class, but somehow filter out unneeded strings. A bad idea: do it by checking and ignoring certain strings from the controller. This is logic that really shouldn&#8217;t be in the view, implemented in a very fragile way. In fact, it undoes all the abstraction of the properties file—as soon as a string changes, <code>displayMessage()</code> will probably break. Plus, there&#8217;s plenty of duplicated code.</p>

<p> </p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err"> </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwingView</span> <span class="kd">extends</span> <span class="n">JFrame</span> <span class="kd">implements</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">String</span> <span class="n">boardSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ignoreThese</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">SwingView</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">divider</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">playAgain</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">choosePlayerOne</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">choosePlayerTwo</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">boardSize</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">displayMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;move&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="kt">int</span> <span class="n">endStart</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">&quot;player&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="mi">6</span><span class="o">;</span>
</span><span class='line'><span class="err">            </span><span class="n">String</span> <span class="n">ending</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">endStart</span><span class="o">);</span>
</span><span class='line'><span class="err">            </span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;Your move, player&quot;</span> <span class="o">+</span> <span class="n">ending</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ignoreThese</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">message</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">return</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">        </span><span class="n">JLabel</span> <span class="n">messageLabel</span> <span class="o">=</span> <span class="n">messagePanel</span><span class="o">.</span><span class="na">getLabel</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">messageLabel</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'><span class="err"> </span>  <span class="o">}</span><span class="err">   </span>
</span><span class='line'><span class="err"> </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p> 
 This is similar, though not identical to Fowler&#8217;s &#8220;Refused bequest,&#8221; where a subclass inherits lots of methods and then ignores them. Here&#8217; I&#8217;m loading lots of strings, then ignoring them.
 
 Refused bequest is fixed with a refactor called &#8220;Replace inheritance with delegation:&#8221; put the superclass in a field on the old subclass, remove the inheritance, and simply delegate to the superclass methods when needed. Here, I haven&#8217;t even shared code through inheritance, but by good old copy-and-paste (so it&#8217;s also part of the duplicated code stink parade).
 
 The cleanup strategy here is similar too: create a separate class to handle loading properties, and use it in place of the duplicated methods. I&#8217;ll start by creating a <code>StringLoader</code> class that includes the duplicated fields and methods:
 
 </p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="err"> </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">welcome</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">divider</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">yourMove</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">yourMoveThreeSquares</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">playAgain</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">gameOverDraw</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">gameOverWin</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">xWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">oWins</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">choosePlayerOne</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">choosePlayerTwo</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="n">String</span> <span class="n">boardSize</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="kc">null</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of all these fields, storing strings in a map is much cleaner:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">Properties</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">welcome</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">divider</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;divider&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMove</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmove&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">yourMoveThreeSquares</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">playAgain</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;playagain&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverDraw</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">gameOverWin</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;gameoverwin&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">xWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xwins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">oWins</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;owins&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerOne</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">choosePlayerTwo</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">boardSize</span> <span class="o">=</span> <span class="n">viewStrings</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;boardsize&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The repeated calls to <code>viewStrings.getProperty()</code> are still pretty ugly and very difficult to read. One solution is to extract a <code>load()</code> method, then iterate over an array of the property names:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringLoader</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">Properties</span> <span class="n">viewStringProperties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">StringLoader</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">load</span><span class="o">(</span><span class="n">String</span> <span class="n">propertyName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">String</span> <span class="n">propertyString</span> <span class="o">=</span> <span class="n">viewStringProperties</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">propertyName</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">viewStrings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">propertyName</span><span class="o">,</span> <span class="n">propertyString</span><span class="o">)</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">void</span> <span class="n">loadViewStrings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">viewStringProperties</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">));</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">exception</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">String</span><span class="o">[]</span> <span class="n">properties</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;welcome&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;divider&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;yourmove&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;yourmovethreesquares&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;playagain&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;gameoverdraw&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;gameoverwin&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;xwins&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;owins&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;chooseplayerone&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;chooseplayertwo&quot;</span><span class="o">,</span>
</span><span class='line'><span class="err">                                </span><span class="s">&quot;boardsize&quot;</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">property</span> <span class="o">:</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">load</span><span class="o">(</span><span class="n">property</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, let&#8217;s replace the hardcoded filepath by passing a path to the view constructor (and on to the <code>loadViewStrings()</code> method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">StringLoader</span><span class="o">(</span><span class="n">String</span> <span class="n">filepath</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">      </span><span class="n">loadViewStrings</span><span class="o">(</span><span class="n">filepath</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, reading in strings from the properties file looks like this, instead of the forty-line monster we started with:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameController</span> <span class="kd">implements</span> <span class="n">Controller</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">viewStrings</span> <span class="o">=</span>
</span><span class='line'><span class="err">    </span>  <span class="k">new</span> <span class="n">StringLoader</span><span class="o">().</span><span class="na">getViewStrings</span><span class="o">(</span><span class="s">&quot;/viewstrings.properties&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use a string, I can just get it from the map:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">viewStrings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;welcome&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This requires trading off a little clarity, but on balance it&#8217;s much cleaner. Best of all, now I can use properties as they were intended. Preventing my view from displaying certain strings just requires creating a new properties file and removing the content from the unneeded messages—another win for decoupling and abstraction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring examples: Duplicated code]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/06/02/refactoring-examples-duplicated-code/"/>
    <updated>2013-06-02T20:56:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/06/02/refactoring-examples-duplicated-code</id>
    <content type="html"><![CDATA[<p>I&#8217;ve spent the last couple weeks working through <a href="http://martinfowler.com/">Martin Fowler&#8217;s</a> <a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?ie=UTF8&amp;qid=1370238910&amp;sr=8-1&amp;keywords=refactoring"><em>Refactoring</em></a>, which includes a taxonomy of useful solutions to common code smells. It&#8217;s an excellent book, but I found it hard to recognize and remember some of the patterns without digging into my own  code. Over the next few posts, I&#8217;ll describe some of the smells and refactors I found in my Tic Tac Toe game (as much to commit them to my own memory as to share them with others). First up, the most common code smell of all: duplication.</p>

<p>Despite using a <a href="https://github.com/ecmendenhall/Java-TTT/blob/master/test/com/cmendenhall/tests/TicTacToeTest.java">superclass</a> to store static methods and data
used by all my tests, I wasn&#8217;t using inheritance to create universal setup and teardown methods. Although many of my tests used a similar pattern to capture output, none were quite alike, and all of them were pretty messy. Here&#8217;s an example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JUnit4</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">MockTerminalView</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MockTerminalView</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">GameController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameController</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kd">final</span> <span class="n">PrintStream</span> <span class="n">stdout</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kd">final</span> <span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">PrintStream</span> <span class="n">outputStream</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">OutputRecorder</span> <span class="n">outputRecorder</span><span class="o">;</span>
</span><span class='line'><span class="err">  </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Before</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">outputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">outputRecorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">Player</span> <span class="n">playerOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HumanPlayer</span><span class="o">(</span><span class="n">X</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">Player</span> <span class="n">playerTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MinimaxPlayer</span><span class="o">(</span><span class="n">O</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerOne</span><span class="o">(</span><span class="n">playerOne</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerTwo</span><span class="o">(</span><span class="n">playerTwo</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="nd">@Test</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">controllerShouldStartNewGame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputRecorder</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">welcome</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">divider</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">    </span><span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="n">GameOverException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">controllerShouldEndGameOnRestartIfInputIsNo</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">GameOverException</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputStream</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;n&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">controller</span><span class="o">.</span><span class="na">restartGame</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">playAgain</span><span class="o">,</span> <span class="n">output</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>These tests use both a plain <code>PrintStream</code> and my custom <code>OutputRecorder</code>, though they don&#8217;t really need to. Some setup is done in the fields, and some during <code>setUp()</code>, though there&#8217;s no clear reason why. And the same lines setting up and tearing down the recorder are repeated across lots of tests. The smell here is duplicated code, which Fowler calls &#8220;number one in the stink parade.&#8221; To solve it, I&#8217;ll start by extracting a method, and then extracting a superclass.</p>

<p>First, I&#8217;ll create an empty <code>TicTacToeTest</code> class with empty setup and teardown methods.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">JUnit4</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TicTacToeTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Before</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@After</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cleanUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, extract a <code>setUpRecorder()</code> method including all the setup-related lines:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>            <span class="kd">private</span> <span class="n">OutputRecorder</span> <span class="n">recorder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setUpRecorder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>            <span class="err">        </span><span class="n">PrintStream</span> <span class="n">stdout</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>            <span class="err">        </span><span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>            <span class="err">        </span><span class="n">recorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Then, a <code>startRecorder()</code> method to replace calls to <code>System.setOut()</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>            <span class="kd">private</span><span class="err"> </span><span class="kt">void</span><span class="err"> </span><span class="n">startRecorder</span><span class="o">()</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">recorder</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This method might seem short, but I find <code>startRecorder()</code> much easier to read. Now that these methods are implemented, I can plug them into the tests:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>              <span class="nd">@Before</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>              <span class="err">    </span><span class="n">loadViewStrings</span><span class="o">();</span>
</span><span class='line'>              <span class="err">    </span>
</span><span class='line'>              <span class="err">    </span><span class="n">setUpRecorder</span><span class="o">();</span>
</span><span class='line'>              <span class="err">    </span>
</span><span class='line'>              <span class="err">    </span><span class="n">Player</span> <span class="n">playerOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HumanPlayer</span><span class="o">(</span><span class="n">X</span><span class="o">);</span>
</span><span class='line'>              <span class="err">    </span><span class="n">Player</span> <span class="n">playerTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MinimaxPlayer</span><span class="o">(</span><span class="n">O</span><span class="o">);</span>
</span><span class='line'>              <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerOne</span><span class="o">(</span><span class="n">playerOne</span><span class="o">);</span>
</span><span class='line'>              <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">setPlayerTwo</span><span class="o">(</span><span class="n">playerTwo</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>              <span class="nd">@Test</span>
</span><span class='line'>              <span class="kd">public</span> <span class="kt">void</span> <span class="nf">controllerShouldStartNewGame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">startRecorder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">welcome</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'>                  <span class="err">    </span><span class="n">assertEquals</span><span class="o">(</span><span class="n">divider</span><span class="o">,</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The last line of the second test was meant as a mini-teardown, to reset stdout before the next test. I wrote it before I understood JUnit execution, in which each test runs in its own environment. It survived around 80 commits, but it doesn&#8217;t actually do anything, so I can safely delete it. (I know because none of the tests fail afterwards). In fact, this whole refactor should be possible while keeping the tests green.</p>

<p>After searching for usages of the old pattern and replacing them with the new methods, there&#8217;s just one thing left: pull up the new methods to a Test superclass. Here&#8217;s the result:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>                  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TicTacToeTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="kd">protected</span> <span class="n">OutputRecorder</span> <span class="n">recorder</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">setUpRecorder</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>                  <span class="err">        </span><span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>                  <span class="err">        </span><span class="n">recorder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OutputRecorder</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class='line'>                  <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">startRecorder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                  <span class="err">        </span><span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">recorder</span><span class="o">);</span>
</span><span class='line'>                  <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                  <span class="err">    </span><span class="nd">@Before</span>
</span><span class='line'>                  <span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">recorderSetUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>                  <span class="err">        </span><span class="n">setUpRecorder</span><span class="o">();</span>
</span><span class='line'>                  <span class="err">    </span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>This looks like a simple refactor, but my tests are now much cleaner. More important, if I need to make a change to the <code>OutputRecorder</code> class, it will propagate through all tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Travis CI solutions: Ivy dependencies and headless testing]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/28/two-travis-ci-solutions/"/>
    <updated>2013-05-28T01:06:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/28/two-travis-ci-solutions</id>
    <content type="html"><![CDATA[<p>One of last week&#8217;s projects was setting up <a href="https://travis-ci.org/">Travis
CI</a>, a hosted <a href="http://martinfowler.com/articles/continuousIntegration.html">continuous
integration</a>
service that&#8217;s free for open source projects. Even if you haven&#8217;t
heard about Travis (as I hadn&#8217;t), you&#8217;ve probably already seen the
service on Github—it&#8217;s responsible for the green and red build status
icons at the top of many project READMEs.</p>

<p>After every push to a remote repo, Travis builds your project, runs
the test suite, and sends off a notification with the results. Once
it&#8217;s configured, it&#8217;s a great way to ensure that even if your project is
unfinished, the published code will work correctly for anyone who
pulls the repo.</p>

<p>The official <a href="http://about.travis-ci.org/">Travis docs</a> are close to
comprehensive, but I ran into a few catches getting everything set up (and have an inbox full of
failed build notifications to prove it). Hopefully these solutions
will rescue someone else from a frustrating afternoon.</p>

<h1>Resolving Ivy dependencies</h1>

<p>My Tic Tac Toe project uses <a href="https://ant.apache.org/ivy/">Ivy</a> to
manage build dependencies, and my ant build script includes a <a href="https://ant.apache.org/ivy/history/latest-milestone/install.html">standard
snippet</a> that downloads Ivy if it&#8217;s not available locally:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ivy.install.version&quot;</span> <span class="na">value=</span><span class="s">&quot;2.1.0-rc2&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;condition</span> <span class="na">property=</span><span class="s">&quot;ivy.home&quot;</span> <span class="na">value=</span><span class="s">&quot;${env.IVY_HOME}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;isset</span> <span class="na">property=</span><span class="s">&quot;env.IVY_HOME&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/condition&gt;</span>
</span><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ivy.home&quot;</span> <span class="na">value=</span><span class="s">&quot;${user.home}/.ant&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ivy.jar.dir&quot;</span> <span class="na">value=</span><span class="s">&quot;${ivy.home}/lib&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;ivy.jar.file&quot;</span> <span class="na">value=</span><span class="s">&quot;${ivy.jar.dir}/ivy.jar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;download-ivy&quot;</span> <span class="na">unless=</span><span class="s">&quot;offline&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;${ivy.jar.dir}&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- download Ivy from web site so that it can be used even without --</span>
</span><span class='line'><span class="c">    -- any special installation --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;get</span> <span class="na">src=</span><span class="s">&quot;http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar&quot;</span>
</span><span class='line'>       <span class="na">dest=</span><span class="s">&quot;${ivy.jar.file}&quot;</span>
</span><span class='line'>       <span class="na">usetimestamp=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;init-ivy&quot;</span>
</span><span class='line'>        <span class="na">depends=</span><span class="s">&quot;download-ivy&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="c">&lt;!-- try to load ivy here from ivy home, in case the user has not --</span>
</span><span class='line'><span class="c">  -- already dropped it into ant&#39;s lib dir (note that the latter copy --</span>
</span><span class='line'><span class="c">  -- will always take precedence). We will not fail as long as local --</span>
</span><span class='line'><span class="c">  -- lib dir exists (it may be empty) and ivy is in at least one of --</span>
</span><span class='line'><span class="c">  -- ant&#39;s lib dir or the local lib dir. --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;path</span> <span class="na">id=</span><span class="s">&quot;ivy.lib.path&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;${ivy.jar.dir}&quot;</span>
</span><span class='line'>             <span class="na">includes=</span><span class="s">&quot;*.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/path&gt;</span>
</span><span class='line'>  <span class="nt">&lt;taskdef</span> <span class="na">resource=</span><span class="s">&quot;org/apache/ivy/ant/antlib.xml&quot;</span>
</span><span class='line'>           <span class="na">uri=</span><span class="s">&quot;antlib:org.apache.ivy.ant&quot;</span>
</span><span class='line'>           <span class="na">classpathref=</span><span class="s">&quot;ivy.lib.path&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/target&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If your build and test targets are set to depend on the <code>init-ivy</code>
task, the script will ensure that Ivy resolves itself and the
project&#8217;s other dependencies correctly. Telling Travis how to build
and test a project is as simple as writing a few lines of YAML. For
example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ant resolve</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk6</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tells Travis the project language (which comes with its own
<a href="http://about.travis-ci.org/docs/user/languages/">default settings</a>),
points to <code>ant resolve</code> as the command necessary to resolve
dependencies, and describes the target Java versions to test against.
But my builds failed with the following mysterious error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ant resolve
</span><span class='line'>Buildfile: /home/travis/build/ecmendenhall/Java-TTT/build.xml
</span><span class='line'>
</span><span class='line'>  [mkdir] Created dir: /home/travis/build/ecmendenhall/Java-TTT/lib
</span><span class='line'>
</span><span class='line'>check-ivy:
</span><span class='line'>  [echo] Checking for Ivy .jar in local directories.
</span><span class='line'>
</span><span class='line'>bootstrap-ivy:
</span><span class='line'>  [echo] Bootstrapping Ivy installation.
</span><span class='line'>  [mkdir] Created dir: /home/travis/.ant/lib
</span><span class='line'>  [get] Getting: http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.3.0/ivy-2.3.0.jar
</span><span class='line'>  [get] To: /home/travis/.ant/lib/ivy.jar
</span><span class='line'>
</span><span class='line'>resolve:
</span><span class='line'>  [echo] Resolving project dependencies.
</span><span class='line'>
</span><span class='line'>BUILD FAILED
</span><span class='line'>/home/travis/build/ecmendenhall/Java-TTT/build.xml:52: Problem: failed
</span><span class='line'>to create task or type antlib:org.apache.ivy.ant:retrieve
</span><span class='line'>Cause: The name is undefined.
</span><span class='line'>Action: Check the spelling.
</span><span class='line'>Action: Check that any custom tasks/types have been declared.
</span><span class='line'>Action: Check that any &lt;presetdef>/&lt;macrodef> declarations have taken
</span><span class='line'>        place.
</span><span class='line'>
</span><span class='line'>        No types or tasks have been defined in this namespace yet
</span><span class='line'>        This appears to be an antlib declaration.
</span><span class='line'>        Action: Check that the implementing library exists in one of:
</span><span class='line'>            -/usr/share/ant/lib
</span><span class='line'>            -/home/travis/.ant/lib
</span><span class='line'>            -a directory added on the command line with the -lib argument</span></code></pre></td></tr></table></div></figure>


<p>Even though ant was correctly downloading an ivy jarfile, the build
script failed to find it. The answers to my <a href="http://stackoverflow.com/questions/16673978/travis-ci-cant-find-ivy-jarfile">Stack Overflow question</a>
explained that this was related to the order in which jars are
loaded to the Java classpath. The easiest solution is to run ant
twice, once to download ivy, and again to build and test the
project.</p>

<p>Once the source of this error was cleared up, the solution was simple.
Adding a <code>before_install</code> script to my Travis build ensured that ivy
would be downloaded before trying to build the project. This meant
adding just one line to my <code>.travis.yml</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">before_install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ant init-ivy</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ant resolve</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk6</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a number of other options to run scripts at different times
in the Travis lifecycle. Check out the rest of the docs
<a href="http://about.travis-ci.org/docs/user/build-configuration/#Build-Lifecycle">here</a>.</p>

<h1>Headless testing with xfvb</h1>

<p>My Travis builds worked nicely until I started adding a Swing view to
my Tic Tac Toe project. Although the tests would run and pass locally,
Travis threw a <code>java.awt.HeadlessException</code> as soon as it tried to run
the test suite. The <a href="http://about.travis-ci.org/docs/user/gui-and-headless-browsers/">Travis docs</a> explain using a tool called xvfb (X
Virtual Framebuffer) to simulate a windowing system and run headless
tests, but warn that &#8220;you need to tell your testing tool process&#8221;
exactly how to use it.</p>

<p>Exactly how to do this wasn&#8217;t clear, but after fiddling with JVM startup arguments and
trying to shell out from inside ant, I discovered that the solution
was dead simple: just add the recommended arguments to <code>.travis.yml</code>,
and ant and JUnit will take care of the rest. Here&#8217;s my final
<code>.travis.yml</code>, including the solutions to both problems.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">java</span>
</span><span class='line'><span class="l-Scalar-Plain">before_install</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ant init-ivy</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;export</span><span class="nv"> </span><span class="s">DISPLAY=:99.0&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;sh</span><span class="nv"> </span><span class="s">-e</span><span class="nv"> </span><span class="s">/etc/init.d/xvfb</span><span class="nv"> </span><span class="s">start&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">install</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ant resolve</span>
</span><span class='line'><span class="l-Scalar-Plain">jdk</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">oraclejdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk7</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">openjdk6</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reconstructing Clojure macros with speclj]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/27/learning-clojure-macros-with-speclj/"/>
    <updated>2013-05-27T17:01:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/27/learning-clojure-macros-with-speclj</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;It is a revelation to compare Menard’s Don Quixote with Cervantes’.
The latter, for example, wrote (part one, chapter nine):
&#8216;…truth, whose mother is history, rival of time, depository of
deeds, witness of the past, exemplar and adviser to the present, and
the future’s counselor.&#8217; Written in the seventeenth century, written by
the &#8216;lay genius&#8217; Cervantes, this enumeration is a mere rhetorical
praise of history. Menard, on the other hand, writes:
&#8216;…truth, whose mother is history, rival of time, depository of
deeds, witness of the past, exemplar and adviser to the present, and
the future’s counselor.&#8217;&#8221;</p></blockquote>

<p>–From <a href="http://www.coldbacon.com/writing/borges-quixote.html"><em>Pierre Menard, Author of the Quixote</em></a></p>

<p><a href="http://www.infoq.com/presentations/Clojure-Macros">Macros are hard</a>,
but one of the most helpful exercises I&#8217;ve found in my limited macro
writing experience is practicing by recreating some of the <a href="http://clojure.org/macros">core
macros</a> I already know and love, like <code>or</code>,
<code>when-let</code>, and <code>-&gt;</code>.</p>

<p>Using <a href="https://github.com/slagyr/speclj">speclj</a> greatly simplifies
this exercise, and writing macro specs often test my understanding
better than writing the implementations themselves. Here&#8217;s an example spec for the threading macro:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;-&gt; macro&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should expand into the code below&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">macro-form</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">-&gt;-macro</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="mi">3</span><span class="p">))]</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="nf">macro-challenges.core/-&gt;-macro</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">macro-challenges.core/-&gt;-macro</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="nb">* </span><span class="mi">3</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">macroexpand-1 </span><span class="nv">macro-form</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">macro-challenges.core/-&gt;-macro</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span><span class="p">))</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">macroexpand </span><span class="nv">macro-form</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="o">&#39;</span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">macroexpand-all</span> <span class="nv">macro-form</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The functions <code>macroexpand</code>, <code>macroexpand-1</code>, and <code>macroexpand-all</code>
come in very handy. <code>Macroexpand-1</code> returns the &#8220;first&#8221; expansion of a
macro form (macros within macros won&#8217;t be expanded). <code>Macroexpand</code>
calls <code>macroexpand-1</code> until the expansion is no longer a macro form.</p>

<p>In the above example, the first expansion of <code>-&gt;-macro</code>, my threading
macro replacement, returns a form that starts with another call to
<code>-&gt;-macro</code>. (I was surprised to find out that this is how the
threading macro works under the hood). <code>Macroexpand</code> expands <a href="http://stackoverflow.com/questions/2296385/homoiconicity-how-does-it-work">into a
list</a>
until the first item is <code>*</code>, which is not a macro.</p>

<p>When it&#8217;s macros all the way down, <code>macroexpand-all</code> (technically
<code>clojure.walk/macroexpand-all</code>) recursively expands all macros in a
given form, resulting in the much simpler expression <code>(* (+ 1 2) 3)</code>
in the example above. These functions are all hugely helpful for
writing macros and their associated tests.</p>

<p>Here&#8217;s my recreation of <code>-&gt;</code>, which passed the spec:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">-&gt;-macro</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">arg</span><span class="p">]</span> <span class="nv">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">arg</span> <span class="nv">first-form</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="nb">first </span><span class="nv">first-form</span><span class="p">)</span> <span class="o">~</span><span class="nv">arg</span> <span class="o">~@</span><span class="p">(</span><span class="nb">rest </span><span class="nv">first-form</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">arg</span> <span class="nv">first-form</span> <span class="o">&amp;</span> <span class="nv">more-forms</span><span class="p">]</span>
</span><span class='line'>     <span class="o">`</span><span class="p">(</span><span class="nf">-&gt;-macro</span> <span class="p">(</span><span class="nf">-&gt;-macro</span> <span class="o">~</span><span class="nv">arg</span> <span class="o">~</span><span class="nv">first-form</span><span class="p">)</span> <span class="o">~@</span><span class="nv">more-forms</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And bears a pretty strong resemblance to the original source:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">-&gt;</span>
</span><span class='line'>  <span class="s">&quot;Threads the expr through the forms. Inserts x as the</span>
</span><span class='line'><span class="s">  second item in the first form, making a list of it if it is not a</span>
</span><span class='line'><span class="s">  list already. If there are more forms, inserts the first form as the</span>
</span><span class='line'><span class="s">  second item in second form, etc.&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:added</span> <span class="s">&quot;1.0&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">x</span><span class="p">]</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">x</span> <span class="nv">form</span><span class="p">]</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">seq? </span><span class="nv">form</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">with-meta </span><span class="o">`</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="nb">first </span><span class="nv">form</span><span class="p">)</span> <span class="o">~</span><span class="nv">x</span> <span class="o">~@</span><span class="p">(</span><span class="nb">next </span><span class="nv">form</span><span class="p">))</span> <span class="p">(</span><span class="nb">meta </span><span class="nv">form</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">list </span><span class="nv">form</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">([</span><span class="nv">x</span> <span class="nv">form</span> <span class="o">&amp;</span> <span class="nv">more</span><span class="p">]</span> <span class="o">`</span><span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">-&gt; </span><span class="o">~</span><span class="nv">x</span> <span class="o">~</span><span class="nv">form</span><span class="p">)</span> <span class="o">~@</span><span class="nv">more</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some macros are pretty easy to reconstruct (but check <a href="http://clojuredocs.org/clojure_core/clojure.repl/doc">their
documentation</a>
to make sure you really understand how they handle different
arguments). If you&#8217;re well and truly stuck, it&#8217;s always possible to check out the
<a href="http://clojuredocs.org/clojure_core/clojure.repl/source">original
code</a> for inspiration.</p>

<p>The specs and solutions I&#8217;ve written so far (mostly low-hanging fruit) are all
  available on my
  <a href="https://github.com/ecmendenhall/macro-challenges">Github</a>, if you&#8217;d
  like to have a hand at reconstructing Clojure yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network closures in Clojure]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/25/network-closures-in-clojure/"/>
    <updated>2013-05-25T12:38:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/25/network-closures-in-clojure</id>
    <content type="html"><![CDATA[<p>Clojure may be a new language, but Lisp has a long history.
Translating Scheme and Common Lisp classics into Clojure is always an
interesting exercise, and often illuminates the differences and
comparative advantages of various Lisp-y languages. (For more
Lisp-to-Clojure resources see <a href="http://juliangamble.com/blog/2012/07/13/amazing-lisp-books-living-again-in-clojure/">this
list</a>.
Or, if you&#8217;d like to try porting some Scheme, consider <a href="https://github.com/ecmendenhall/sicpclojure">helping
translate SICP</a>).</p>

<p>This weekend, I spent some time with Paul Graham&#8217;s classic <a href="http://www.paulgraham.com/onlisp.html"><em>On
Lisp</em></a>.
In Chapter 6, Graham shows how to use
<a href="https://en.wikipedia.org/wiki/Closure_(computer_science)">closures</a>
to model nodes in a network, representing a 20 questions game as a self-traversing binary
tree. Here&#8217;s his original code, and my best attempts at Clojure translations.</p>

<p>The most obvious model for a set of connected nodes is a nested data
structure, like a map of maps. In Common Lisp, Graham uses a mutable
hashmap of <a href="http://www.lispworks.com/documentation/HyperSpec/Body/m_defstr.htm">structured
types</a>,
each pointing to their neighbors in the network:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defstruct</span> <span class="nv">node</span> <span class="nv">contents</span> <span class="nv">yes</span> <span class="nv">no</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="vg">*nodes*</span> <span class="p">(</span><span class="nb">make-hash-table</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">defnode</span> <span class="p">(</span><span class="nv">name</span> <span class="nv">conts</span> <span class="k">&amp;optional</span> <span class="nv">yes</span> <span class="nv">no</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">name</span> <span class="vg">*nodes*</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">make-node</span> <span class="ss">:contents</span> <span class="nv">conts</span>
</span><span class='line'>    <span class="ss">:yes</span> <span class="nv">yes</span>
</span><span class='line'>    <span class="ss">:no</span> <span class="nv">no</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple map seems like a sufficient replacement in Clojure. A single
node looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:people</span> <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is the person a man?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:male</span>, <span class="ss">:no</span> <span class="ss">:female</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the full tree looks like the following. Each node&#8217;s <code>:yes</code> or <code>:no</code> keyword
points to the next node in the tree:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:penny</span> <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Abraham Lincoln.&quot;</span>, <span class="ss">:yes</span> <span class="nv">nil</span>, <span class="ss">:no</span> <span class="nv">nil</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:coin</span>  <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is the coin a penny?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:penny</span>, <span class="ss">:no</span> <span class="ss">:other-coin</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:USA</span>   <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is he on a coin?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:coin</span>, <span class="ss">:no</span> <span class="ss">:no-coin</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:dead</span>  <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Was he from the USA?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:USA</span>, <span class="ss">:no</span> <span class="ss">:elsewhere</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:male</span>  <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is he living?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:live</span>, <span class="ss">:no</span> <span class="ss">:dead</span><span class="p">}</span>,
</span><span class='line'> <span class="ss">:people</span> <span class="p">{</span><span class="ss">:contents</span> <span class="s">&quot;Is the person a man?&quot;</span>, <span class="ss">:yes</span> <span class="ss">:male</span>, <span class="ss">:no</span> <span class="ss">:female</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s my first draft for defining nodes in Clojure. Since the Common
Lisp version used a mutable variable, I used a Clojure atom to store
network state:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nodes</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">defnode</span> <span class="p">[</span><span class="nb">name </span><span class="nv">contents</span> <span class="o">&amp;</span> <span class="p">[</span><span class="nv">yes</span> <span class="nv">no</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">nodes</span> <span class="nb">assoc name </span><span class="p">{</span><span class="ss">:contents</span> <span class="nv">contents</span> <span class="ss">:yes</span> <span class="nv">yes</span> <span class="ss">:no</span> <span class="nv">no</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-nodes</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:people</span> <span class="s">&quot;Is the person a man?&quot;</span> <span class="ss">:male</span> <span class="ss">:female</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:male</span> <span class="s">&quot;Is he living?&quot;</span> <span class="ss">:live</span> <span class="ss">:dead</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:dead</span> <span class="s">&quot;Was he from the USA?&quot;</span> <span class="ss">:USA</span> <span class="ss">:elsewhere</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:USA</span> <span class="s">&quot;Is he on a coin?&quot;</span> <span class="ss">:coin</span> <span class="ss">:no-coin</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:coin</span> <span class="s">&quot;Is the coin a penny?&quot;</span> <span class="ss">:penny</span> <span class="ss">:other-coin</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:penny</span> <span class="s">&quot;Abraham Lincoln.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Traversing the network is simple: get a node, print the associated
question, prompt for input, get the next node, and repeat. Here&#8217;s the original Common Lisp:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">run-node</span> <span class="p">(</span><span class="nv">name</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">n</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">name</span> <span class="vg">*nodes*</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">node-yes</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;~A~%&gt;&gt; &quot;</span> <span class="p">(</span><span class="nv">node-contents</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">case</span> <span class="p">(</span><span class="nb">read</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nv">yes</span> <span class="p">(</span><span class="nv">run-node</span> <span class="p">(</span><span class="nv">node-yes</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nv">run-node</span> <span class="p">(</span><span class="nv">node-no</span> <span class="nv">n</span><span class="p">)))))</span>
</span><span class='line'>          <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nv">node-contents</span> <span class="nv">n</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&#8217;s an equivalent in Clojure:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-node</span> <span class="p">[</span><span class="nv">name</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nb">node </span>    <span class="p">(</span><span class="err">@</span><span class="nv">nodes</span> <span class="nv">name</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">contents</span> <span class="p">(</span><span class="nb">node </span><span class="ss">:contents</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">yes</span>      <span class="p">(</span><span class="nb">node </span><span class="ss">:yes</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">no</span>       <span class="p">(</span><span class="nb">node </span><span class="ss">:no</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="nv">yes</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;yes&quot;</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">run-node</span> <span class="nv">yes</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">run-node</span> <span class="nv">no</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, there&#8217;s no reason to bother swapping and dereferencing an
atom as long as the tree won&#8217;t need to change at runtime. This
immutable version works just as well:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">defnode</span> <span class="p">[</span><span class="nv">nodes</span> <span class="nb">name </span><span class="nv">contents</span> <span class="o">&amp;</span> <span class="p">[</span><span class="nv">yes</span> <span class="nv">no</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">assoc </span><span class="nv">nodes</span> <span class="nb">name </span><span class="p">{</span><span class="ss">:contents</span> <span class="nv">contents</span> <span class="ss">:yes</span> <span class="nv">yes</span> <span class="ss">:no</span> <span class="nv">no</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-nodes</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="p">{}</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:people</span> <span class="s">&quot;Is the person a man?&quot;</span> <span class="ss">:male</span> <span class="ss">:female</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:male</span> <span class="s">&quot;Is he living?&quot;</span> <span class="ss">:live</span> <span class="ss">:dead</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:dead</span> <span class="s">&quot;Was he from the USA?&quot;</span> <span class="ss">:USA</span> <span class="ss">:elsewhere</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:USA</span> <span class="s">&quot;Is he on a coin?&quot;</span> <span class="ss">:coin</span> <span class="ss">:no-coin</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:coin</span> <span class="s">&quot;Is the coin a penny?&quot;</span> <span class="ss">:penny</span> <span class="ss">:other-coin</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">defnode</span> <span class="ss">:penny</span> <span class="s">&quot;Abraham Lincoln.&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nodes</span> <span class="p">(</span><span class="nf">make-nodes</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-node</span> <span class="p">[</span><span class="nv">nodes</span> <span class="nv">name</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nb">node </span>    <span class="p">(</span><span class="nf">nodes</span> <span class="nv">name</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">contents</span> <span class="p">(</span><span class="nb">node </span><span class="ss">:contents</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">yes</span>      <span class="p">(</span><span class="nb">node </span><span class="ss">:yes</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">no</span>       <span class="p">(</span><span class="nb">node </span><span class="ss">:no</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="nv">yes</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;yes&quot;</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">run-node</span> <span class="nv">nodes</span> <span class="nv">yes</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">run-node</span> <span class="nv">nodes</span> <span class="nv">no</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a closure rolls the data structure and traversal code into one,
by associating the <code>yes</code> and <code>no</code> fields with anonymous functions that
handle the same logic as <code>run-node</code>. Here&#8217;s Graham&#8217;s CL version:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">defnode</span> <span class="p">(</span><span class="nv">name</span> <span class="nv">conts</span> <span class="k">&amp;optional</span> <span class="nv">yes</span> <span class="nv">no</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">name</span> <span class="vg">*nodes*</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if</span> <span class="nv">yes</span>
</span><span class='line'>          <span class="err">#’</span><span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;~A~%&gt;&gt; &quot;</span> <span class="nv">conts</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">case</span> <span class="p">(</span><span class="nb">read</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nv">yes</span> <span class="p">(</span><span class="nb">funcall</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">yes</span> <span class="vg">*nodes*</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nb">funcall</span> <span class="p">(</span><span class="nb">gethash</span> <span class="nv">no</span> <span class="vg">*nodes*</span><span class="p">)))))</span>
</span><span class='line'>          <span class="err">#’</span><span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="nv">conts</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&#8217;s mine in Clojure. The double-parens around <code>(@nodes yes)</code>
and <code>(@nodes no)</code> call the anonymous function, instead of just
returning it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nodes</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">defclosure</span> <span class="p">[</span><span class="nb">name </span><span class="nv">contents</span> <span class="o">&amp;</span> <span class="p">[</span><span class="nv">yes</span> <span class="nv">no</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">nodes</span> <span class="nb">assoc </span><span class="nv">name</span>
</span><span class='line'>         <span class="p">(</span><span class="k">if </span><span class="nv">yes</span>
</span><span class='line'>           <span class="p">(</span><span class="k">fn </span><span class="p">[]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="s">&quot;yes&quot;</span> <span class="p">(</span><span class="nf">read-line</span><span class="p">))</span>
</span><span class='line'>               <span class="p">((</span><span class="err">@</span><span class="nv">nodes</span> <span class="nv">yes</span><span class="p">))</span>
</span><span class='line'>               <span class="p">((</span><span class="err">@</span><span class="nv">nodes</span> <span class="nv">no</span><span class="p">))))</span>
</span><span class='line'>           <span class="p">(</span><span class="k">fn </span><span class="p">[]</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">println </span><span class="nv">contents</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-nodes</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:people</span> <span class="s">&quot;Is the person a man?&quot;</span> <span class="ss">:male</span> <span class="ss">:female</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:male</span> <span class="s">&quot;Is he living?&quot;</span> <span class="ss">:live</span> <span class="ss">:dead</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:dead</span> <span class="s">&quot;Was he from the USA?&quot;</span> <span class="ss">:USA</span> <span class="ss">:elsewhere</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:USA</span> <span class="s">&quot;Is he on a coin?&quot;</span> <span class="ss">:coin</span> <span class="ss">:no-coin</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:coin</span> <span class="s">&quot;Is the coin a penny?&quot;</span> <span class="ss">:penny</span> <span class="ss">:other-coin</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defclosure</span> <span class="ss">:penny</span> <span class="s">&quot;Abraham Lincoln.&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, traversing the tree is as simple as calling:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">((</span><span class="nf">nodes</span> <span class="ss">:people</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And watching the tree traverse itself. You can find my code from this
post <a href="https://gist.github.com/ecmendenhall/5646594">here</a>. For more on closures in Lisp,
check out the rest of <a href="http://lib.store.yahoo.net/lib/paulgraham/onlisp.pdf">Chapter 6</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The joy of exceptions]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/19/the-joy-of-exceptions/"/>
    <updated>2013-05-19T21:31:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/19/the-joy-of-exceptions</id>
    <content type="html"><![CDATA[<p>One more recipe for the TDD cookbook before I move on to more
interesting things. You might have noticed a new <code>GameOverException</code>
and a try-catch block in the final example of my last post.</p>

<p>Before adding a game over exception, methods that checked for final
game states directly called <code>System.exit()</code>. Testing this proved
difficult, and I ended up importing a <a href="http://stefanbirkner.github.io/system-rules/">third-party library</a> of extra
JUnit rules. This week, I refactored them to throw a custom exception:</p>

<figure class='code'><figcaption><span>TerminalView.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TerminalView</span> <span class="kd">implements</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">endGame</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">GameOverException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">GameOverException</span><span class="o">(</span><span class="s">&quot;Game over.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This exception will bubble up until it&#8217;s caught in <code>Main</code>, which calls
<code>System.exit()</code> on behalf of any method that throws a
<code>GameOverException</code>.</p>

<figure class='code'><figcaption><span>Main.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TerminalView</span><span class="o">();</span>
</span><span class='line'>            <span class="n">GameController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GameController</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>            <span class="n">controller</span><span class="o">.</span><span class="na">setUp</span><span class="o">();</span>
</span><span class='line'>            <span class="n">controller</span><span class="o">.</span><span class="na">startGame</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">GameOverException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not only a <a href="http://stackoverflow.com/questions/6171265/best-way-to-exit-a-program-when-i-want-an-exception-to-be-thrown">better practice</a>,
but also provides a much better way to test methods that might detect
a completed game—just add a try/catch block to the tests!</p>

<p>Exceptions have come in handy elsewhere in my tests, too. Once the
controller starts a game, there&#8217;s nothing to break the back-and-forth
game loop but a win, draw, or error. Figuring out how to test game
states without getting stuck in an infinite loop or loading up entire
games was a challenge. &#8220;If only there
were some special syntax for breaking normal control flow in special
situations,&#8221; I wondered to myself more times than I&#8217;d like to admit.
Well, duh—use exceptions!  My mock view objects throw a <code>NoSuchElementException</code> when their input
queue runs empty. Catching this exception breaks the normal game flow
and allows me to access game state as soon as the fake input I&#8217;m
interested in has been sent to the controller. Here&#8217;s an example:</p>

<figure class='code'><figcaption><span>GameControllerTest.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">controllerShouldPassErrorMessageToViewOnInvalidInput</span><span class="o">()</span><span class="kd">throws</span> <span class="n">GameOverException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;invalid phrase&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputRecorder</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">controller</span><span class="o">.</span><span class="na">playRound</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchElementException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">outputRecorder</span><span class="o">.</span><span class="na">discardFirstNStrings</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">output</span> <span class="o">=</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;That&#39;s not a valid board location.&quot;</span><span class="o">,</span> <span class="n">output</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">clearInput</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally, <code>Controller.playRound()</code> will continue querying players for
moves until the game ends. But once this test catches the empty queue
exception, it tests against the expected output, which should show an
error message. Exceptions have proved extremely handy so far—as long as I remember
that they&#8217;re in my control flow toolbox, too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capturing console output with a deque]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/19/capturing-console-output-with-a-deque/"/>
    <updated>2013-05-19T14:43:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/19/capturing-console-output-with-a-deque</id>
    <content type="html"><![CDATA[<p>Redirecting stdout to a new <code>PrintStream</code> is an <a href="http://ecmendenhall.github.io/blog/blog/2013/05/05/testing-console-output-with-junit-and-infinitest/">easy way</a>
to test simple console output in Java. But as my Tic-Tac-Toe game has
grown more complex, the tests I wrote using this pattern have started
to stink. There&#8217;s a lot of duplicated code (create the stream,
redirect, tear down with each test), each test uses a hand-constructed
string filled with finicky newline characters, and tests are prone to
break when unrelated view components change the way they print to the
screen. Inspired by my <a href="http://ecmendenhall.github.io/blog/blog/2013/05/15/mocking-user-input-with-a-queue/">input
queue</a>,
I created an <code>OutputRecorder</code> class that extends <code>PrintStream</code> and
captures output string by string for later playback:</p>

<figure class='code'><figcaption><span>OutputRecorder.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OutputRecorder</span> <span class="kd">extends</span> <span class="n">PrintStream</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Deque</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">outputStack</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">OutputRecorder</span><span class="o">(</span><span class="n">OutputStream</span> <span class="n">outputStream</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">b</span><span class="o">,</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">(</span><span class="n">outputStream</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>          <span class="n">outputStack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">catchOutput</span><span class="o">(</span><span class="n">String</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">outputStack</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">popLastOutput</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">outputStack</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">popFirstOutput</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">outputStack</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">peekLastOutput</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">outputStack</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">peekFirstOutput</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">outputStack</span><span class="o">.</span><span class="na">peekLast</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">discardLastNStrings</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">popLastOutput</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">discardFirstNStrings</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">popFirstOutput</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">replayAllForwards</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">output</span> <span class="o">=</span> <span class="n">popFirstOutput</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">output</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Element&quot;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">output</span> <span class="o">=</span> <span class="n">popFirstOutput</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">replayAllBackwards</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">output</span> <span class="o">=</span> <span class="n">popLastOutput</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">outputStack</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">output</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Element&quot;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
</span><span class='line'>                <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                <span class="n">output</span> <span class="o">=</span> <span class="n">popLastOutput</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="nd">@Override</span>
</span><span class='line'>       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">println</span><span class="o">(</span><span class="n">String</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">catchOutput</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>       <span class="nd">@Override</span>
</span><span class='line'>       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="n">String</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">catchOutput</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the recorder stores strings in a
<a href="https://en.wikipedia.org/wiki/Deque">deque</a>,
it&#8217;s easy to replay output in forward or reverse order. Now a test
like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">controllerShouldPassErrorMessageToViewOnInvalidMove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">pushInput</span><span class="o">(</span><span class="s">&quot;middle center&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">pushInput</span><span class="o">(</span><span class="s">&quot;middle center&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">exit</span><span class="o">.</span><span class="na">expectSystemExitWithStatus</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputStream</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">playRound</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">expected</span> <span class="o">=</span> <span class="n">yourMove</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span> <span class="n">xInCenter</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span>
</span><span class='line'>    <span class="n">output</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">clearInput</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Become a little friendlier&#8230;</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">controllerShouldPassErrorMessageToViewOnInvalidMove</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">GameOverException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;middle center&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;middle center&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">outputRecorder</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">controller</span><span class="o">.</span><span class="na">playRound</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchElementException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">outputRecorder</span><span class="o">.</span><span class="na">discardFirstNStrings</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">output</span> <span class="o">=</span> <span class="n">outputRecorder</span><span class="o">.</span><span class="na">popFirstOutput</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;Square is already full.&quot;</span><span class="o">,</span> <span class="n">output</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">clearInput</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The utility might not be immediately obvious, but capturing output
string by string has already put an end to tracking down small
differences between expected and actual output that come from an extra
space or misplaced newline.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mocking User Input with a Queue]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/15/mocking-user-input-with-a-queue/"/>
    <updated>2013-05-15T14:53:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/15/mocking-user-input-with-a-queue</id>
    <content type="html"><![CDATA[<p>Over the course of my Tic Tac Toe project, I&#8217;ve needed to test against
user input several times. As a newcomer to <a href="http://ecmendenhall.github.io/blog/blog/2013/05/12/a-mock-object-antipattern/">mock object
patterns</a>,
coming up with good solutions to these testing dilemmas has been one
of my biggest challenges.</p>

<p>There are plenty of <a href="http://stackoverflow.com/questions/3833840/mock-object-libraries-in-java">heavy-duty
tools</a>
for mocks and fakes in Java, but I&#8217;d like to stick with my own
solutions as long as possible, since writing them myself has been
enlightening.</p>

<p>Here&#8217;s a solution I came up with today to simulate full Tic Tac Toe
games with two human players: a mock View object that returns fake input
from a queue. By pushing mock input onto the queue during test setup,
I can configure games in advance and replay them later. Here&#8217;s the
very simple mock View object:</p>

<figure class='code'><figcaption><span>MockTerminalView.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.NoSuchElementException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.LinkedBlockingQueue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockTerminalView</span> <span class="kd">extends</span> <span class="n">TerminalView</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">inputQ</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">enqueueInput</span><span class="o">(</span><span class="n">String</span> <span class="n">fakeInput</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">inputQ</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">fakeInput</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clearInput</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">inputQ</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getInput</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">inputQ</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchElementException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&#8217;s an example test that plays through an entire game and exits
when Player 2 wins (comments added for some context):</p>

<figure class='code'><figcaption><span>GameControllerTest.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">gameShouldEndOnWin</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">exit</span><span class="o">.</span><span class="na">expectSystemExit</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">newGame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Select two human players</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;h&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;h&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">setUp</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;middle center&quot;</span><span class="o">);</span> <span class="c1">// Player 1&#39;s first move</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;top left&quot;</span><span class="o">);</span>      <span class="c1">// Player 2&#39;s first move</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;top right&quot;</span><span class="o">);</span>     <span class="c1">// Player 1 goes for the diagonal...</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;middle left&quot;</span><span class="o">);</span>   <span class="c1">// Player 2 goes for the column...</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;lower right&quot;</span><span class="o">);</span>   <span class="c1">// Player 1 chokes!</span>
</span><span class='line'>    <span class="n">view</span><span class="o">.</span><span class="na">enqueueInput</span><span class="o">(</span><span class="s">&quot;lower left&quot;</span><span class="o">);</span>    <span class="c1">// Player 2 wins! What an upset! </span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span><span class="o">.</span><span class="na">startGame</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m sure I&#8217;ll discover the shortcomings of this approach sooner or
later, but for now it&#8217;s a pretty good way to test events inside
the main game loop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A mock object antipattern]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/12/a-mock-object-antipattern/"/>
    <updated>2013-05-12T23:05:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/12/a-mock-object-antipattern</id>
    <content type="html"><![CDATA[<p>For the most part, test-driven development has been a breeze so far.
In addition to
<a href="http://ecmendenhall.github.io/blog/blog/2013/05/10/enforcing-bottom-up-design/">enforcing</a>
good habits, watching red tests turn green provides an extremely satisfying
dopamine kick every few minutes, all day. Testing simple objects and actions in my Tic Tac Toe game—things
like the board, player behavior, and the Minimax algorithm—was
straightforward. But testing the view and controller classes that glue
them together required a little more thought.</p>

<p>Writing tests required interrupting the game loop to check on the behavior of the view and
controller objects. To start, I added optional flag arguments to many
methods that would break the game loop so I could make assertions
about game state. I quickly came to realize that this was a bad
solution, and I cringed the next day when a chapter of <em>Clean Code</em>
described boolean flags as one of the most rancid code smells around.</p>

<p>I came across the concept of <a href="http://martinfowler.com/articles/mocksArentStubs.html">test
 doubles</a>
and mock objects, and got the idea right away: create fake objects
 with the same methods as real ones, override their behavior, and use
 them as substitutes for their more complicated counterparts in unit tests.</p>

<p>Or at least, I  <em>thought</em> I got the idea. With my tests passing and my game working, I felt pretty good about my
project. But wiring up a code coverage tool showed that my view and
controller classes were only half covered by my tests. What went
wrong? As it turned out, I was testing my mocks! Here&#8217;s the pattern I was following:</p>

<ul>
<li>Create a subclass of the object you want to test.</li>
<li>Override or stub out methods to return predetermined output.</li>
<li>Write assertions against the behavior of the mock objects.</li>
</ul>


<p>This meant, of course, that I was never actually testing the real
objects, but only the fake ones, as revealed by the code coverage data. Worse, all the tests
that I thought showed my code was working were essentialy tautologies.
This probably appears obvious to experienced TDD practitioners, but it
was surprisingly easy to fall into this antipattern. For the record,
here&#8217;s how you should really use a mock object:</p>

<ul>
<li>Create mocks of the objects that <em>interact with</em> the one you want to
test.</li>
<li>Override or stub out methods to return predetermined output.</li>
<li>Write assertions against the behavior of the <em>real</em> object
interacting with the test doubles.</li>
</ul>


<p>In retrospect, this makes perfect sense. But I&#8217;ll be going over all my
tests with a careful eye tomorrow. Sometimes the green light isn&#8217;t
what it seems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimating Pi with Incanter and Monte Carlo Methods]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/12/estimating-pi-with-incanter-monte-carlo-methods/"/>
    <updated>2013-05-12T14:26:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/12/estimating-pi-with-incanter-monte-carlo-methods</id>
    <content type="html"><![CDATA[<p>Of all the things <a href="https://en.wikipedia.org/wiki/John_von_neumann#Career_and_abilities">John von
Neumann</a>
invented (including the <a href="https://en.wikipedia.org/wiki/Minimax_theorem#Minimax_theorem">Minimax
theorem</a>
behind my Tic Tac Toe AI, and the <a href="https://en.wikipedia.org/wiki/Von_Neumann_architecture">architecture</a> of the computer it runs
on), Monte Carlo simulation is one of my favorites. Unlike some of his
other
<a href="https://en.wikipedia.org/wiki/Ergodic_theory#Mean_ergodic_theorem">breakthroughs</a>,
the idea behind Monte Carlo simulation is simple: use probability
and computation to estimate solutions to hard problems.</p>

<p>Think of the craziest integral you&#8217;ve ever solved, and the sheaves of
notebook paper spent working out the area under that ridiculous curve.
The Monte Carlo approach is a clever hack: tack a graph of the
function to a dartboard, and start throwing darts at
random. As more and more darts hit the board, the ratio of darts that
land under the curve to total darts thrown will approximate the
proportion of the dartboard under the curve. Multiply this ratio by
the area of the dartboard, and you&#8217;ve computed the integral. As a student whose
favorite fourth grade problem solving strategy was &#8220;guess and check,&#8221;
and whose favorite tenth grade problem solving strategy was &#8220;plug it
into your TI-83,&#8221; the idea has a lot of appeal.</p>

<p>Wikipedia has a great example of <a href="https://en.wikipedia.org/wiki/Monte_carlo_simulation#Introduction">estimating the value of
Pi</a>
with a Monte Carlo simulation. I wrote a similar simulation <a href="https://gist.github.com/ecmendenhall/5054266">in Python</a> a couple
months ago, but wanted to check out Clojure&#8217;s <a href="http://incanter.org/">Incanter</a> library for
statistical computing and try my hand at a TDD solution.</p>

<p>To start, you&#8217;ll want the <a href="https://github.com/slagyr/speclj">speclj</a>
test framework for Clojure, which uses Rspec-like syntax and provides
a helpful autorunner. Create a new Leiningen project and add it as a dev
dependency and plugin in <code>project.clj</code>. Make sure you set up your spec
directory as <a href="https://github.com/slagyr/speclj">described</a> in the
documentation. You&#8217;ll also want to add Incanter to your project
dependencies. Here&#8217;s my final <code>project.clj</code>:</p>

<figure class='code'><figcaption><span>project.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defproject </span><span class="nv">montecarlopi</span> <span class="s">&quot;0.1.0&quot;</span>
</span><span class='line'>  <span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">org.clojure/clojure</span> <span class="s">&quot;1.5.0&quot;</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">[</span><span class="nv">incanter</span> <span class="s">&quot;1.5.0-SNAPSHOT&quot;</span><span class="p">]]</span>
</span><span class='line'>  <span class="ss">:main</span> <span class="nv">montecarlopi.core</span>
</span><span class='line'>  <span class="ss">:profiles</span> <span class="p">{</span><span class="ss">:dev</span> <span class="p">{</span><span class="ss">:dependencies</span> <span class="p">[[</span><span class="nv">speclj</span> <span class="s">&quot;2.5.0&quot;</span><span class="p">]]}}</span>
</span><span class='line'>  <span class="ss">:plugins</span> <span class="p">[[</span><span class="nv">speclj</span> <span class="s">&quot;2.5.0&quot;</span><span class="p">]]</span>
</span><span class='line'>  <span class="ss">:test-paths</span> <span class="p">[</span><span class="s">&quot;spec/&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>To start, we&#8217;ll need a way to tell whether a given point is inside the
circle. Here&#8217;s a simple test:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">montecarlopi.core-spec</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">speclj.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>            <span class="p">[</span><span class="nv">montecarlopi.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;in-circle?&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return true for points inside the circle.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nf">in-circle?</span> <span class="p">[</span><span class="mi">0</span> <span class="mf">0.1</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return false for points outside the circle.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should-not</span> <span class="p">(</span><span class="nf">in-circle?</span> <span class="p">[</span><span class="mf">0.8</span> <span class="mf">0.9</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fire up the testrunner with <code>lein spec -a</code>, and you&#8217;ll see an
exception, since the function doesn&#8217;t exist. Time to add it to
<code>core.clj</code>:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">montecarlopi.core</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="p">[</span><span class="nv">incanter.core</span>   <span class="ss">:refer</span> <span class="p">[</span><span class="nv">sq</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">in-circle?</span> <span class="p">[</span><span class="nv">point</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span> <span class="nv">point</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">sq</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">sq</span> <span class="nv">y</span><span class="p">))</span>
</span><span class='line'>            <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">true</span>
</span><span class='line'>      <span class="nv">false</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>let</code> binding pulls x and y coordinates out of a vector
representing a point. If x squared plus y squared are less
than 1, the point is inside the circle. Save and watch the
autorunner turn green.</p>

<p>Next, we need a way to generate points at random, with x and y values
between 0 and 1. Here&#8217;s a test:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;generate-random-point&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return a point with x and y values between 0 and 1.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span> <span class="p">(</span><span class="nf">generate-random-point</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">&gt;= </span><span class="nv">x</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">&lt;= </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">&gt;= </span><span class="nv">y</span> <span class="mi">0</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And a dead-simple implementation (<code>clojure.core/rand</code> conveniently
generates random floats between 0 and 1).:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">generate-random-point</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">[(</span><span class="nf">rand</span><span class="p">)</span> <span class="p">(</span><span class="nf">rand</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need a lot of random points, so we&#8217;d better add a function to
generate them. Here&#8217;s a test and a function that passes:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;generate-random-points&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return the specified number of random points.&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">should=</span> <span class="mi">100</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nf">generate-random-points</span> <span class="mi">100</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">generate-random-points</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">take </span><span class="nv">n</span> <span class="p">(</span><span class="nf">repeatedly</span> <span class="nv">generate-random-point</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we&#8217;ve generated lots of points, we&#8217;ll want to know how many lie
inside the circle. This test is a little more complicated, since it
requires some mock points to test against:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;points-in-circle&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return only points inside the circle.&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">inside</span>  <span class="p">[[</span><span class="mf">0.0</span> <span class="mf">0.0</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">[</span><span class="mf">0.2</span> <span class="mf">0.3</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">[</span><span class="mf">0.1</span> <span class="mf">0.8</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">[</span><span class="mf">0.0</span> <span class="mf">1.0</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">[</span><span class="mf">1.0</span> <span class="mf">0.0</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>          <span class="nv">outside</span> <span class="p">[[</span><span class="mf">1.0</span> <span class="mf">0.2</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">[</span><span class="mf">0.8</span> <span class="mf">0.8</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">[</span><span class="mf">0.5</span> <span class="mf">0.9</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">[</span><span class="mf">0.8</span> <span class="mf">0.7</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">[</span><span class="mf">0.9</span> <span class="mf">0.9</span><span class="p">]]</span>
</span><span class='line'>          <span class="nv">points</span>  <span class="p">(</span><span class="nb">concat </span><span class="nv">inside</span> <span class="nv">outside</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="mi">5</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nf">points-in-circle</span> <span class="nv">points</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="nv">inside</span> <span class="p">(</span><span class="nf">points-in-circle</span> <span class="nv">points</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should-not=</span> <span class="nv">outside</span> <span class="p">(</span><span class="nf">points-in-circle</span> <span class="nv">points</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>But a passing solution is as easy as using <code>in-circle?</code> as a filter:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">points-in-circle</span> <span class="p">[</span><span class="nv">points</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">filter </span><span class="nv">in-circle?</span> <span class="nv">points</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to plot the points, we&#8217;ll need to sort them into groups. A
map should do the trick. Let&#8217;s also take this chance to
pull <code>inside</code>, <code>outside</code>, and <code>points</code> out of the <code>let</code>
binding and define them as vars so we can reuse them.
Here&#8217;s the result after a quick refactor:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">inside</span>  <span class="p">[[</span><span class="mf">0.0</span> <span class="mf">0.0</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="mf">0.2</span> <span class="mf">0.3</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="mf">0.1</span> <span class="mf">0.8</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="mf">0.0</span> <span class="mf">1.0</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="mf">1.0</span> <span class="mf">0.0</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">outside</span> <span class="p">[[</span><span class="mf">1.0</span> <span class="mf">0.2</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="mf">0.8</span> <span class="mf">0.8</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="mf">0.5</span> <span class="mf">0.9</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="mf">0.8</span> <span class="mf">0.7</span><span class="p">]</span>
</span><span class='line'>              <span class="p">[</span><span class="mf">0.9</span> <span class="mf">0.9</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">points</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">inside</span> <span class="nv">outside</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;points-in-circle&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return only points inside the circle.&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">should=</span> <span class="mi">5</span> <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nf">points-in-circle</span> <span class="nv">points</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">should=</span> <span class="nv">inside</span> <span class="p">(</span><span class="nf">points-in-circle</span> <span class="nv">points</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">should-not=</span> <span class="nv">outside</span> <span class="p">(</span><span class="nf">points-in-circle</span> <span class="nv">points</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;sort-points&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return a map of correctly sorted points.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="p">{</span><span class="ss">:inside</span>  <span class="nv">inside</span>
</span><span class='line'>                <span class="ss">:outside</span> <span class="nv">outside</span><span class="p">}</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">sort-points</span> <span class="nv">points</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code passes, but it&#8217;s not as clear as it could be:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sort-points</span> <span class="p">[</span><span class="nv">points</span><span class="p">]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:inside</span>  <span class="p">(</span><span class="nb">filter </span><span class="nv">in-circle?</span> <span class="nv">points</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:outside</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">in-circle</span> <span class="nv">%</span><span class="p">))</span> <span class="nv">points</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;d like to rename the inline function <code>outside-circle?</code>. So let&#8217;s add
a test:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;outside-circle?&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return true for points outside the circle.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nf">outside-circle?</span> <span class="p">[</span><span class="mf">0.9</span> <span class="mf">0.7</span><span class="p">]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write the function:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">outside-circle?</span> <span class="p">[</span><span class="nv">point</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">in-circle?</span> <span class="nv">point</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And refactor <code>sort-points</code> once speclj gives us the green light:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">sort-points</span> <span class="p">[</span><span class="nv">points</span><span class="p">]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:inside</span>  <span class="p">(</span><span class="nb">filter </span><span class="nv">in-circle?</span> <span class="nv">points</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:outside</span> <span class="p">(</span><span class="nb">filter </span><span class="nv">outside-circle?</span> <span class="nv">points</span><span class="p">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>It shouldn&#8217;t be hard to convert sorted points into a ratio. Here&#8217;s a
test and solution:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;point-ratio&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return the correct ratio of inside to outside points&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="mf">0.5</span> <span class="p">(</span><span class="nf">point-ratio</span> <span class="nv">points</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you return a float instead of a rational:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">point-ratio</span> <span class="p">[</span><span class="nv">points</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">float </span><span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nf">points-in-circle</span> <span class="nv">points</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">count </span><span class="nv">points</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we&#8217;re just a step away from estimating Pi. We&#8217;re considering a
quarter circle inside a unit square. The area of the
square is 1, and the quarter circle 1/4 * Pi. So
multiplying by four gives us our estimate:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;estimate-pi&quot;</span>
</span><span class='line'> <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return four times the ratio of inside to outside points.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="mf">2.0</span> <span class="p">(</span><span class="nf">estimate-pi</span> <span class="nv">points</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should return something close to pi when given a lot of points.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span> <span class="p">[</span><span class="nv">estimate</span> <span class="p">(</span><span class="nf">estimate-pi</span> <span class="p">(</span><span class="nf">generate-random-points</span> <span class="mi">70000</span><span class="p">))]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">estimate</span> <span class="mf">3.13</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">should</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">estimate</span> <span class="mf">3.15</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second part of this test is a little tricky. Our estimate is
probabilistic, but with enough points it should almost always generate
an estimate within range. Passing the test is easy:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">estimate-pi</span> <span class="p">[</span><span class="nv">points</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="mi">4</span> <span class="p">(</span><span class="nf">point-ratio</span> <span class="nv">points</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>All that&#8217;s left is to create an Incanter
chart. We&#8217;ll start by plotting the circle with Incanter. First, we
need to write a function. Here&#8217;s a test for points on 1 = x<sup>2</sup> + y<sup>2</sup>:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;circle&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should equal 1 when x is 0.&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">should=</span> <span class="mf">1.0</span> <span class="p">(</span><span class="nf">circle</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should equal 0 when x is 1.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="mf">0.0</span> <span class="p">(</span><span class="nf">circle</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should equal 0.866 when x is 0.5&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="s">&quot;0.866&quot;</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;%.3f&quot;</span> <span class="p">(</span><span class="nf">circle</span> <span class="mf">0.5</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To write the function, make sure you refer <code>incanter.core/sqrt</code> to
your namespace:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">montecarlopi.core</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="p">[</span><span class="nv">incanter.core</span>   <span class="ss">:refer</span> <span class="p">[</span><span class="nv">sqrt</span> <span class="nv">sq</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">circle</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="p">(</span><span class="nf">sqrt</span> <span class="p">(</span><span class="nb">- </span><span class="mf">1.0</span> <span class="p">(</span><span class="nf">sq</span> <span class="nv">x</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, writing tests gets a little hairy. The <code>JFreeChart</code>
object on which Incanter plots are based doesn&#8217;t
<a href="http://www.jfree.org/jfreechart/api/javadoc/index.html">offer much</a>
in the way of public fields to test against. But we
can at least check that the function returns a chart:</p>

<figure class='code'><figcaption><span>core_spec.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">describe</span> <span class="s">&quot;draw-circle&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">it</span> <span class="s">&quot;should be a JFreeChart object.&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">should=</span> <span class="s">&quot;class org.jfree.chart.JFreeChart&quot;</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="nf">.getClass</span> <span class="p">(</span><span class="nf">draw-circle</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Refer <code>incanter.charts/function-plot</code> to plot the function:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">montecarlopi.core</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="p">[</span><span class="nv">incanter.core</span>   <span class="ss">:refer</span> <span class="p">[</span><span class="nv">sqrt</span> <span class="nv">sq</span> <span class="nv">view</span><span class="p">]]</span>
</span><span class='line'>           <span class="p">[</span><span class="nv">incanter.charts</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">function-plot</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">draw-circle</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">function-plot</span> <span class="nv">circle</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>(view (draw-circle))</code> from the REPL should produce a chart
like this:</p>

<p><img src="http://ecmendenhall.github.io/blog/images/circle-plot.png"></p>

<p>The last step is to add the points and some annotations to the
Incanter plot:</p>

<figure class='code'><figcaption><span>core.clj </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">montecarlopi.core</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="p">[</span><span class="nv">incanter.core</span>   <span class="ss">:refer</span> <span class="p">[</span><span class="nv">sqrt</span> <span class="nv">sq</span> <span class="nv">view</span><span class="p">]]</span>
</span><span class='line'>           <span class="p">[</span><span class="nv">incanter.charts</span> <span class="ss">:refer</span> <span class="p">[</span><span class="nv">function-plot</span>
</span><span class='line'>                                    <span class="nv">add-points</span>
</span><span class='line'>                                    <span class="nv">add-text</span>
</span><span class='line'>                                    <span class="nv">set-x-label</span>
</span><span class='line'>                                    <span class="nv">set-y-label</span>
</span><span class='line'>                                    <span class="nv">set-y-range</span>
</span><span class='line'>                                    <span class="nv">xy-plot</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">plot-points</span> <span class="p">[</span><span class="nv">chart</span> <span class="nv">points</span> <span class="nv">label</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">xs</span> <span class="p">(</span><span class="nb">map first </span> <span class="nv">points</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">ys</span> <span class="p">(</span><span class="nb">map second </span><span class="nv">points</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">add-points</span> <span class="nv">chart</span> <span class="nv">xs</span> <span class="nv">ys</span> <span class="ss">:series-label</span> <span class="nv">label</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-plot</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">points</span> <span class="p">(</span><span class="nf">generate-random-points</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">sorted</span> <span class="p">(</span><span class="nf">sort-points</span> <span class="nv">points</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doto </span><span class="p">(</span><span class="nf">draw-circle</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">set-y-range</span> <span class="mf">-0.25</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">plot-points</span> <span class="p">(</span><span class="ss">:inside</span>  <span class="nv">sorted</span><span class="p">)</span> <span class="s">&quot;inside&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">plot-points</span> <span class="p">(</span><span class="ss">:outside</span> <span class="nv">sorted</span><span class="p">)</span> <span class="s">&quot;outside&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">set-x-label</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">set-y-label</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">add-text</span> <span class="mf">0.10</span> <span class="mf">-0.10</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Total: &quot;</span>
</span><span class='line'>                                <span class="p">(</span><span class="nb">count </span><span class="nv">points</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">add-text</span> <span class="mf">0.10</span> <span class="mf">-0.05</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Inside: &quot;</span>
</span><span class='line'>                                <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="ss">:inside</span> <span class="nv">sorted</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">add-text</span> <span class="mf">0.10</span> <span class="mf">-0.15</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Ratio: &quot;</span>
</span><span class='line'>                                <span class="p">(</span><span class="nf">point-ratio</span> <span class="nv">points</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">add-text</span> <span class="mf">0.10</span> <span class="mf">-0.20</span> <span class="p">(</span><span class="nb">str </span><span class="s">&quot;Pi: &quot;</span>
</span><span class='line'>                                <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;%4f&quot;</span> <span class="p">(</span><span class="nf">estimate-pi</span> <span class="nv">points</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">view</span> <span class="ss">:width</span> <span class="mi">500</span> <span class="ss">:height</span> <span class="mi">600</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s a plot and estimate with 100 points:</p>

<p><img src="http://ecmendenhall.github.io/blog/images/pi-100.png"></p>

<p>With 10000:</p>

<p><img src="http://ecmendenhall.github.io/blog/images/pi-10000.png"></p>

<p>And with 100000:</p>

<p><img src="http://ecmendenhall.github.io/blog/images/pi-100000.png"></p>

<p>A gist with all the code from this post is <a href="https://gist.github.com/ecmendenhall/5565604">available here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enforcing Bottom-up Design]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/10/enforcing-bottom-up-design/"/>
    <updated>2013-05-10T00:21:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/10/enforcing-bottom-up-design</id>
    <content type="html"><![CDATA[<blockquote><p>&#8220;Experienced Lisp programmers divide up their programs differently.
As well as top-down design, they follow a principle which could be
called bottom-up design–changing the language to suit the problem.
In Lisp, you don&#8217;t just write your program down toward the language,
you also build the language up toward your program. As you&#8217;re writing
a program you may think &#8216;I wish Lisp had such-and-such an operator.&#8217;
So you go and write it. Afterward you realize that using the new
operator would simplify the design of another part of the program, and
so on. Language and program evolve together. Like the border between
two warring states, the boundary between language and program is drawn
and redrawn, until eventually it comes to rest along the mountains and
rivers, the natural frontiers of your problem. In the end your program
will look as if the language had been designed for it. And when
language and program fit one another well, you end up with code which
is clear, small, and efficient.&#8221;</p></blockquote>

<p>–<a href="http://www.paulgraham.com/progbot.html">Paul Graham</a>, from the
introduction to <a href="http://www.paulgraham.com/onlisptext.html"><em>On Lisp</em></a></p>

<p>Lisp programmers have a reputation (earned or otherwise) for considering their language of
  choice <a href="http://xkcd.com/224/">uniquely powerful</a>, capable of
  extending the <a href="https://tractatus-online.appspot.com/Tractatus/Ajaxs/tlpA.html#56">limits of the
  world</a>
  with its special
  <a href="http://stackoverflow.com/questions/267862/what-makes-lisp-macros-so-special">expressiveness</a>.
  I find writing Lisp a joy, and for a long time I bought into the
  mythos. It still <em>feels</em> unique. But I&#8217;ve come to learn that good bottom-up design is possible in any language.</p>

<p>  For the past two weeks, I&#8217;ve been working in Java, a
  language many programmers consider
  <a href="http://www.paulgraham.com/avg.html">Blub</a> incarnate. (You don&#8217;t have to take <a href="http://hammerprinciple.com/therighttool/items/java/clojure">my word for
  it</a>).
  But even without clever macros and first-class functions, following
  the rules of <a href="http://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530">test-driven
  development</a>
  and the principles of <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">clean
  code</a>
  feels a lot like the process of natural, iterative evolution Paul
  Graham describes.</p>

<p>  A good language can encourage bottom-up, evolutionary design, and
  this is one of Lisp&#8217;s great strengths. But
  writing good tests—and writing them first—can go a step further and
  actually enforce it.</p>

<p> Writing tests first requires describing abstractions before
 they exist—writing the program you want to read from the very start. Using meaningful names transforms the language you have
 into the one you want. Revising after every passing test makes
 simplifying design second nature. And building up a program test by
 tiny test is an evolutionary process that generates clean, efficient
 code, whether you&#8217;re writing Common Lisp or COBOL.</p>

<p>Here&#8217;s a function that returns a given game board&#8217;s winner from my
  first crack at Tic Tac Toe in Clojure:</p>

<figure class='code'><figcaption><span>tictactoe.core/get-win </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-win</span>
</span><span class='line'>  <span class="s">&quot;Takes a 3x3 game board. Returns a vector</span>
</span><span class='line'><span class="s">  [winner start middle  end] of the winning player,</span>
</span><span class='line'><span class="s">  and (row, col) grid coordinates of the three-in-a-row elements.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">board</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">wins</span>           <span class="p">(</span><span class="nf">check-for-wins</span> <span class="nv">board</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">winner</span>         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">remove nil? </span><span class="nv">wins</span><span class="p">)))</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="p">[</span><span class="nv">row</span> <span class="nv">col</span> <span class="nv">diag</span><span class="p">]</span> <span class="p">(</span><span class="nf">unflatten</span> <span class="nv">wins</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cond </span><span class="p">(</span><span class="nf">not-empty-row?</span> <span class="nv">row</span><span class="p">)</span>  <span class="p">[</span><span class="nv">winner</span> <span class="p">[(</span><span class="nf">get-row-win</span> <span class="nv">row</span><span class="p">)</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                                          <span class="p">[(</span><span class="nf">get-row-win</span> <span class="nv">row</span><span class="p">)</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                                          <span class="p">[(</span><span class="nf">get-row-win</span> <span class="nv">row</span><span class="p">)</span> <span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">not-empty-row?</span> <span class="nv">col</span><span class="p">)</span>  <span class="p">[</span><span class="nv">winner</span> <span class="p">[</span><span class="mi">0</span> <span class="p">(</span><span class="nf">get-row-win</span> <span class="nv">col</span><span class="p">)]</span>
</span><span class='line'>                                          <span class="p">[</span><span class="mi">1</span> <span class="p">(</span><span class="nf">get-row-win</span> <span class="nv">col</span><span class="p">)]</span>
</span><span class='line'>                                          <span class="p">[</span><span class="mi">2</span> <span class="p">(</span><span class="nf">get-row-win</span> <span class="nv">col</span><span class="p">)]]</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">not-empty-row?</span> <span class="nv">diag</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">get-row-win</span> <span class="nv">diag</span><span class="p">))</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nv">winner</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">2</span><span class="p">]]</span>
</span><span class='line'>                                    <span class="p">[</span><span class="nv">winner</span> <span class="p">[</span><span class="mi">0</span> <span class="mi">2</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">1</span><span class="p">]</span> <span class="p">[</span><span class="mi">2</span> <span class="mi">0</span><span class="p">]]))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&#8217;s the equivalent I wrote in Java:</p>

<figure class='code'><figcaption><span>Board.winnerIs( ) </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">winnerIs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">hasWin</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nf">getWinningRow</span><span class="o">().</span><span class="na">winner</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which excerpt reads more like a domain-specific language? Which
  would you rather read a year from now? I don&#8217;t doubt that I could
  clean up the Clojure into something just as simple and readable. But
merely using an elegant language is no guarantee of elegant design.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Console Output with JUnit and Infinitest]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/05/testing-console-output-with-junit-and-infinitest/"/>
    <updated>2013-05-05T20:54:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/05/testing-console-output-with-junit-and-infinitest</id>
    <content type="html"><![CDATA[<p>I saved the view components of my Tic-Tac-Toe game for last. The
functionality I need to implement for a command line application is
pretty simple: the view should be able to print game boards and
messages to the terminal, prompt for user input and pass it off to a
controller, and not much more. But doing this the TDD way was harder
than I expected. Here are the solutions I found to two testing problems.</p>

<h2>Testing text output</h2>

<p>Printing a board should be a one-liner, especially since I added a
<code>toString()</code> method to my <code>Board</code> objects. <code>System.out.println(Board)</code>
ought to work just fine. But wait—the tests come first.</p>

<p>Writing tests against printed terminal output isn&#8217;t tough, but it does
require some setup. <code>System.setOut()</code> redirects Java&#8217;s default output
to a byte stream of <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#setOut(Java.io.PrintStream)">your choice</a>.
First, save the default <code>System.out</code> (It&#8217;s a <code>PrintStream</code>), so you can switch back to stdout later.
Then, initialize a <code>ByteArrayOutputStream</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@RunWith</span><span class="o">(</span><span class="n">JUnit4</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TerminalViewTest</span> <span class="kd">extends</span> <span class="n">TicTacToeTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">PrintStream</span> <span class="n">stdout</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">ByteArrayOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">TerminalView</span> <span class="n">terminalview</span><span class="o">;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Add a <code>setUp()</code> method with the JUnit <code>@Before</code> annotation—the usual
pattern to run some code before your tests. Pass <code>System.setOut()</code> a
UTF-8 <code>PrintStream</code> object constructed with the byte array (You <em>are</em>
using <a href="http://www.utf8everywhere.org/">UTF-8 everywhere</a>, right?):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="nd">@Before</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">terminalview</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TerminalView</span><span class="o">();</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="n">output</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then test against <code>output</code>. If the terminal output is as expected, it
should match the result of the printed object&#8217;s <code>toString()</code> method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="nd">@Test</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">terminalViewShouldPrintBoards</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">terminalview</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">nowins</span><span class="o">);</span>
</span><span class='line'>            <span class="n">assertEquals</span><span class="o">(</span><span class="n">nowins</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">output</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, make sure you clean up and redirect output back to stdout, so later print statements don&#8217;t go missing:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="nd">@After</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cleanUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">setOut</span><span class="o">(</span><span class="n">stdout</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you&#8217;re ready to write that one-liner. You can find the whole test
class as a gist <a href="https://gist.github.com/ecmendenhall/5523091">here</a>.</p>

<h2>Testing Unicode output with Infinitest</h2>

<p>With my test in place, I wrote a quick print method and waited for the
green flash. And waited. And waited&#8230; I&#8217;ve been using
<a href="http://infinitest.github.io/">Infinitest</a>, an excellent continuous testing
plugin for IntelliJ and Eclipse, but it threw an assertion error, even
though the tests passed when run directly from IntelliJ.</p>

<p>The problem? I wasn&#8217;t using <a href="http://www.joelonsoftware.com/articles/Unicode.html">Unicode</a>
everywhere! (Don&#8217;t say I didn&#8217;t warn you.) My boards print with Unicode <a href="http://unicode-table.com/en/#box-drawing">box
drawing</a> characters that
threw off Infinitest. IntelliJ runs in a UTF-8 environment by default,
but character encoding must be passed as an option to the Infinitest
JVM. Fortunately, this is another one-line
<a href="http://infinitest.github.io/doc/user_guide.html">solution</a>:
add a text file named <code>infinitest.args</code> in your project&#8217;s root directory with one argument per
line. In this case, just:</p>

<pre><code>-D file.encoding=UTF-8
</code></pre>

<p>With tests back in the green, I was ready to start testing user
input—but that&#8217;s a yak shave for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building better git habits]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/03/building-better-git-habits/"/>
    <updated>2013-05-03T01:00:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/03/building-better-git-habits</id>
    <content type="html"><![CDATA[<p>Like many young whippersnapper kids these days, I started using GitHub before I really understood git. The benefits of version control were obvious right away, but I stuck to the very simplest git commands for a long time, and many of them turned into habits.</p>

<p>This week, I&#8217;ve been working on making cleaner commits and writing better messages. Composing <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">good commit messages</a> is the best git habit of all, and I&#8217;ve found two simple substitutions that nudge me towards more thoughtful commits.</p>

<p>If you&#8217;re used to <code>git add -u</code> or <code>git add -a</code>, try:</p>

<pre><code>git add -p
</code></pre>

<p>Instead of committing everything at once, this will walk you through the results of <code>git diff</code>, offering the option to stage each chunk of changed code:</p>

<pre><code>@@ -34,5 +35,45 @@ public class GameTree {

+
+        public List&lt;Node&gt; getLeaves() {
+            List&lt;Node&gt; leaves = new ArrayList&lt;Node&gt;();
+
+            for (Node child : children) {
+                if (child.children.isEmpty()) {
+                    leaves.add(child);
+                } else {
+                    leaves.addAll(child.getLeaves());
+                }
+            }
+            return leaves;
+        }

Stage this hunk [y,n,q,a,d,/,K,g,e,?]?
</code></pre>

<p>(You can find the alphabet soup of staging options <a href="http://git-scm.com/docs/git-add">here</a>). This is easier to read than a full diff, requires a careful review of each change in context, and makes composing small atomic commits much easier.</p>

<p>Then, if you&#8217;re used to <code>git commit -m &lt;message&gt;</code>, try:</p>

<pre><code>git commit -F &lt;filename&gt;
</code></pre>

<p>Instead of pulling a commit message from the command line or opening an editor, this uses an existing file as your commit message. But the real trick here is to keep an editor open as you page through the previous command, and compose your commit message chunk by chunk.</p>

<p>There are <a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/">many</a>, <a href="http://sethrobertson.github.io/GitBestPractices/">many</a> <a href="http://reinh.com/blog/2009/03/02/a-git-workflow-for-agile-teams.html">more</a> git workflows, including ways to commit with reckless abandon and clean up later with <code>git rebase</code>, but these two simple changes have helped me make much better commits just by switching a few command line flags.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GTD and TDD]]></title>
    <link href="http://ecmendenhall.github.io/blog/blog/2013/05/02/gtd-and-tdd/"/>
    <updated>2013-05-02T00:29:00-05:00</updated>
    <id>http://ecmendenhall.github.io/blog/blog/2013/05/02/gtd-and-tdd</id>
    <content type="html"><![CDATA[<p>My apprenticeship at 8th Light began with the <a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">Three Laws of TDD</a>:</p>

<blockquote><ul>
<li>Don&#8217;t write any production code unless it makes a failing test pass.</li>
<li>Write the most minimal test that is sufficient to fail.</li>
<li>Don&#8217;t write any more production code than <a href="http://plato.stanford.edu/entries/necessary-sufficient/">necessary and sufficient</a> to pass a failing test.</li>
</ul>
</blockquote>

<p>My first project obeying these new commandments is a rewrite of <a href="https://github.com/ecmendenhall/clojurescript-tic-tac-toe">Tic-Tac-Toe</a> in Java, a language completely new to me. Like all new projects, I began in a wilderness of error. IntelliJ was totally unfamiliar. Type declarations felt fussy and foreign. I just wanted to map over an array but had to settle for another for loop. And yet test by test, things slowly started to work.</p>

<p>After three days, I can&#8217;t claim to know Java. But I can claim that I know <em>my</em> Java works.</p>

<p>The clarity and certainty that come from good tests are feelings I&#8217;ve experienced before. Over the past few years, the practices and principles of <a href="http://www.43folders.com/2004/09/08/getting-started-with-getting-things-done">Getting Things Done</a> have transformed the way I work, think, and act. (Have I told you about our church? Would you like to read some <a href="http://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0142000280">inspirational literature</a>?) Here is a formulation of the basic idea that might look familiar:</p>

<blockquote><ul>
<li>Don&#8217;t spend time and effort on anything but a project&#8217;s next incomplete action.</li>
<li>Choose the smallest <a href="http://www.43folders.com/2004/09/17/next-actions-both-physical-and-visible">next action</a> sufficient to accomplish something useful.</li>
<li>Don&#8217;t spend more time or effort than necessary to finish an incomplete action.</li>
</ul>
</blockquote>

<p>To the uninitiated, writing tests and making lists might seem inflexible, <a href="https://en.wikipedia.org/wiki/Three_laws_of_robotics">robotic</a>, and a little dorky. But TODO lists and test suites are really tools that externalize uncertainty. The vague sense that I really should do that thing becomes a clear action that will be in my inbox later. The nagging fear that a method might misbehave becomes proof that it does and will always do exactly what I expect.</p>

<p>I skated through school and college on cleverness and a keen balance of terror. And it worked! I wrote code that seemed to do what I told it long before I started writing tests. (Tests aren&#8217;t necessary for working code: they&#8217;re sufficient to prove that code works). But to claim that other ways work just fine is to miss the point. GTD and TDD are systems that radically, ruthlessly eliminate uncertainty—not because the rules are necessary in the strictest sense, but because they are sufficient to get things done, make things work, and do it all with a clear mind.</p>
]]></content>
  </entry>
  
</feed>
